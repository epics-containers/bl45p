#% macro, __doc__, Create some records for reading IOC statistics and details.
#% macro, IOC, Device prefix

# Used by Channel Access Security to determine access to this IOC.
record(mbbo, "BL45P-EA-IOC-02:ACCESS")
{
  field(DESC, "BL45P-EA-IOC-02 Acc Mode")
  field(PINI, "YES")
  field(ZRST, "Running")
  field(ZRSV, "NO_ALARM")
  field(ONST, "Maintenance")
  field(ONSV, "MINOR")
  field(TWST, "Test")
  field(TWSV, "MINOR")
  field(THST, "OFFLINE")
  field(THSV, "MAJOR")
  info(autosaveFields, "VAL")
}
record(stringin, "BL45P-EA-IOC-02:STARTTOD")
{
    field(DESC, "Time and date of startup")
    field(DTYP, "Soft Timestamp")
    field(PINI, "YES")
    field(INP, "@%Y-%m-%d %H:%M:%S")
}
record(stringin, "BL45P-EA-IOC-02:TOD")
{
    field(DESC, "Current time and date")
    field(DTYP, "Soft Timestamp")
    field(SCAN, "1 second")
    field(INP, "@%Y-%m-%d %H:%M:%S")
}
record(calcout, "BL45P-EA-IOC-02:HEARTBEAT")
{
    field(DESC, "1 Hz counter since startup")
    field(CALC, "(A<2147483647)?A+1:1")
    field(SCAN, "1 second")
    field(INPA, "BL45P-EA-IOC-02:HEARTBEAT")
}
# if autosave is working, START_CNT creates a running count of 
# number of times the IOC was started.
record(calcout, "BL45P-EA-IOC-02:START_CNT")
{
    field(DESC, "Increments at startup")
    field(CALC, "A+1")
    field(PINI, "YES")
    field(INPA, "BL45P-EA-IOC-02:START_CNT")
    info(autosaveFields_pass0, "VAL")
}
#
# Using an existing internal set of subroutines, this
# PV updates the Access Security mechanism dynamically.
# The .acf file is re-read.
#
record( sub, "BL45P-EA-IOC-02:READACF")
{
    field( DESC, "BL45P-EA-IOC-02 ACF Update")
    field( INAM, "asSubInit")
    field( SNAM, "asSubProcess")
    field( BRSV, "INVALID")
}
record(sub, "BL45P-EA-IOC-02:SYSRESET")
{
    alias("BL45P-EA-IOC-02:SysReset")
    field(DESC, "IOC Restart" )
    field(SNAM, "rebootProc")
    field(BRSV,"INVALID")
    field(L,"1")
}

#% archiver 1 Monitor
#% alh
record(ai, "BL45P-EA-IOC-02:CA_CLNT_CNT") {
  field(DESC, "Number of CA Clients")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@ca_clients")
  field(HOPR, "200")
  field(HIHI, "175")
  field(HIGH, "100")
  field(HHSV, "MAJOR")
  field(HSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

#% archiver 1 Monitor
#% alh
record(ai, "BL45P-EA-IOC-02:CA_CONN_CNT") {
  field(DESC, "Number of CA Connections")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@ca_connections")
  field(HOPR, "5000")
  field(HIHI, "4500")
  field(HIGH, "4000")
  field(HHSV, "MAJOR")
  field(HSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

record(ai, "BL45P-EA-IOC-02:RECORD_CNT") {
  field(DESC, "Number of Records")
  field(PINI, "YES")
  field(DTYP, "IOC stats")
  field(INP, "@records")
}

record(ai, "BL45P-EA-IOC-02:FD_MAX") {
  field(DESC, "Max File Descriptors")
  field(PINI, "YES")
  field(DTYP, "IOC stats")
  field(INP, "@maxfd")
}

record(ai, "BL45P-EA-IOC-02:FD_CNT") {
  field(DESC, "Allocated File Descriptors")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(FLNK, "BL45P-EA-IOC-02:FD_FREE  PP MS")
  field(INP, "@fd")
}

#% archiver 1 Monitor
#% alh
record(calc, "BL45P-EA-IOC-02:FD_FREE") {
  field(DESC, "Available FDs")
  field(CALC, "B>0?B-A:C")
  field(INPA, "BL45P-EA-IOC-02:FD_CNT  NPP MS")
  field(INPB, "BL45P-EA-IOC-02:FD_MAX  NPP MS")
  field(INPC, "1000")
  field(HOPR, "150")
  field(LOLO, "5")
  field(LOW, "20")
  field(LLSV, "MAJOR")
  field(LSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR LOW LOLO LSV LLSV")
}

#% archiver 1 Monitor
record(ai, "BL45P-EA-IOC-02:SYS_CPU_LOAD") {
  field(DESC, "System CPU Load")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@sys_cpuload")
  field(EGU, "%")
  field(PREC, "1")
  field(HOPR, "100")
  field(HIHI, "80")
  field(HIGH, "70")
  field(HHSV, "MAJOR")
  field(HSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

#% archiver 1 Monitor
#% alh
record(ai, "BL45P-EA-IOC-02:IOC_CPU_LOAD") {
  alias("BL45P-EA-IOC-02:LOAD")
  field(DESC, "IOC CPU Load")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@ioc_cpuload")
  field(EGU, "%")
  field(PREC, "1")
  field(HOPR, "100")
  field(HIHI, "80")
  field(HIGH, "70")
  field(HHSV, "MAJOR")
  field(HSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

record(ai, "BL45P-EA-IOC-02:CPU_CNT") {
  field(DESC, "Number of CPUs")
  field(DTYP, "IOC stats")
  field(INP, "@no_of_cpus")
  field(PINI, "YES")
}

#% archiver 1 Monitor
#% alh
record(ai, "BL45P-EA-IOC-02:SUSP_TASK_CNT") {
  field(DESC, "Number Suspended Tasks")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@suspended_tasks")
  field(HIHI, "1")
  field(HHSV, "MAJOR")
  info(autosaveFields_pass0, "HOPR LOPR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

#% archiver 1 Monitor
record(ai, "BL45P-EA-IOC-02:MEM_USED") {
  field(DESC, "Allocated Memory")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@allocated_bytes")
  field(EGU, "byte")
}

#% archiver 1 Monitor
record(ai, "BL45P-EA-IOC-02:MEM_FREE") {
  field(DESC, "Free Memory")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@free_bytes")
  field(EGU, "byte")
  field(LLSV, "MAJOR")
  field(LSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR LOW LOLO LSV LLSV")
}

record(ai, "BL45P-EA-IOC-02:MEM_MAX") {
  field(DESC, "Maximum Memory")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@total_bytes")
  field(EGU, "byte")
}

record(ao, "BL45P-EA-IOC-02:CA_UPD_TIME") {
  field(DESC, "CA Check Update Period")
  field(DTYP, "IOC stats")
  field(OUT, "@ca_scan_rate")
  field(EGU, "sec")
  field(DRVH, "60")
  field(DRVL, "1")
  field(HOPR, "60")
  field(VAL, "15")
  field(PINI, "YES")
}

record(ao, "BL45P-EA-IOC-02:FD_UPD_TIME") {
  field(DESC, "FD Check Update Period")
  field(DTYP, "IOC stats")
  field(OUT, "@fd_scan_rate")
  field(EGU, "sec")
  field(DRVH, "60")
  field(DRVL, "1")
  field(HOPR, "60")
  field(VAL, "20")
  field(PINI, "YES")
}

record(ao, "BL45P-EA-IOC-02:LOAD_UPD_TIME") {
  field(DESC, "CPU Check Update Period")
  field(DTYP, "IOC stats")
  field(OUT, "@cpu_scan_rate")
  field(EGU, "sec")
  field(DRVH, "60")
  field(DRVL, "1")
  field(HOPR, "60")
  field(VAL, "10")
  field(PINI, "YES")
}

record(ao, "BL45P-EA-IOC-02:MEM_UPD_TIME") {
  field(DESC, "Memory Check Update Period")
  field(DTYP, "IOC stats")
  field(OUT, "@memory_scan_rate")
  field(EGU, "sec")
  field(DRVH, "60")
  field(DRVL, "1")
  field(HOPR, "60")
  field(VAL, "10")
  field(PINI, "YES")
}

record(stringin, "BL45P-EA-IOC-02:ST_SCRIPT1") {
  field(DESC, "Startup Script Part1")
  field(DTYP, "IOC stats")
  field(INP, "@startup_script_1")
  field(PINI, "YES")
}

record(stringin, "BL45P-EA-IOC-02:ST_SCRIPT2") {
  field(DESC, "Startup Script Part2")
  field(DTYP, "IOC stats")
  field(INP, "@startup_script_2")
  field(PINI, "YES")
}

record(waveform, "BL45P-EA-IOC-02:ST_SCRIPT") {
  field(DESC, "Startup Script")
  field(DTYP, "IOC stats")
  field(INP, "@startup_script")
  field(NELM, "120")
  field(FTVL, "CHAR")
  field(PINI, "YES")
}

record(stringin, "BL45P-EA-IOC-02:KERNEL_VERS") {
  field(DESC, "Kernel Version")
  field(DTYP, "IOC stats")
  field(INP, "@kernel_ver")
  field(PINI, "YES")
}

record(stringin, "BL45P-EA-IOC-02:EPICS_VERS") {
  field(DESC, "EPICS Version")
  field(DTYP, "IOC stats")
  field(INP, "@epics_ver")
  field(PINI, "YES")
}

record(waveform, "BL45P-EA-IOC-02:EPICS_VERSION") {
  field(DESC, "EPICS Version")
  field(DTYP, "IOC stats")
  field(INP, "@epics_ver")
  field(NELM, "120")
  field(FTVL, "CHAR")
  field(PINI, "YES")
}

record(stringin, "BL45P-EA-IOC-02:HOSTNAME") {
  field(DESC, "Host Name")
  field(DTYP, "IOC stats")
  field(INP, "@hostname")
  field(PINI, "YES")
}

record(stringin, "BL45P-EA-IOC-02:APP_DIR1") {
  field(DESC, "Application Directory Part 1")
  field(DTYP, "IOC stats")
  field(INP, "@pwd1")
  field(PINI, "YES")
}

record(stringin, "BL45P-EA-IOC-02:APP_DIR2") {
  field(DESC, "Application Directory Part 2")
  field(DTYP, "IOC stats")
  field(INP, "@pwd2")
  field(PINI, "YES")
}

record(waveform, "BL45P-EA-IOC-02:APP_DIR") {
  field(DESC, "Application Directory")
  field(DTYP, "IOC stats")
  field(INP, "@pwd")
  field(NELM, "160")
  field(FTVL, "CHAR")
  field(PINI, "YES")
}

record(stringin, "BL45P-EA-IOC-02:UPTIME") {
  field(DESC, "Elapsed Time since Start")
  field(SCAN, "1 second")
  field(DTYP, "IOC stats")
  field(INP, "@up_time")
  field(PINI, "YES")
}

record(stringin, "BL45P-EA-IOC-02:ENGINEER") {
  field(DESC, "Engineer")
  field(DTYP, "IOC stats")
  field(INP, "@engineer")
  field(PINI, "YES")
}

record(stringin, "BL45P-EA-IOC-02:LOCATION") {
  field(DESC, "Location")
  field(DTYP, "IOC stats")
  field(INP, "@location")
  field(PINI, "YES")
}

record(ai, "BL45P-EA-IOC-02:PROCESS_ID") {
  field(DESC, "Process ID")
  field(PINI, "YES")
  field(DTYP, "IOC stats")
  field(INP, "@proc_id")
}

record(ai, "BL45P-EA-IOC-02:PARENT_ID") {
  field(DESC, "Parent Process ID")
  field(PINI, "YES")
  field(DTYP, "IOC stats")
  field(INP, "@parent_proc_id")
}

record(stringin, "BL45P-EA-IOC-02:DLSVER") {
  field(DESC, "IOC version")
  field(DTYP, "IOC stats")
  field(INP, "@dlsver")
  field(PINI, "YES")
}
record(ai, "BL45P-EA-IOC-02:GTIM_TIME") {
  field(DESC, "Gen Time Secs since 1990")
  field(SCAN, "1 second")
  field(DTYP, "General Time")
  field(PREC, "3")
  field(INP,  "@TIME")
  field(EGU,  "sec")
}

record(bo, "BL45P-EA-IOC-02:GTIM_RESET") {
  field(DESC, "Gen Time Error Reset")
  field(DTYP, "General Time")
  field(OUT,  "@RSTERRCNT")
  field(ZNAM, "Reset")
  field(ONAM, "Reset")
}

record(longin, "BL45P-EA-IOC-02:GTIM_ERR_CNT") {
  field(DESC, "Gen Time Error Count")
  field(DTYP, "General Time")
  field(INP,  "@GETERRCNT")
  field(SCAN, "1 second")
  field(HIHI, "1")
  field(HHSV, "MAJOR")
}

record(stringin, "BL45P-EA-IOC-02:GTIM_CUR_SRC") {
  field(DESC, "Gen Time Current Provider")
  field(DTYP, "General Time")
  field(INP,  "@BESTTCP")
  field(SCAN, "1 second")
}

record(stringin, "BL45P-EA-IOC-02:GTIM_EVT_SRC") {
  field(DESC, "Gen Time Event Provider")
  field(DTYP, "General Time")
  field(INP,  "@BESTTEP")
  field(SCAN, "1 second")
}

record(stringin, "BL45P-EA-IOC-02:GTIM_HI_SRC") {
  field(DESC, "Gen Time Highest Provider")
  field(DTYP, "General Time")
  field(INP,  "@TOPTCP")
  field(SCAN, "1 second")
}
record(stringin, "BL45P-EA-IOC-02:CA_ADDR_LIST") {
  field(DESC, "EPICS_CA_ADDR_LIST")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_CA_ADDR_LIST")
  field(PINI, "YES")
}
record(stringin, "BL45P-EA-IOC-02:CA_CONN_TIME") {
  field(DESC, "EPICS_CA_CONN_TMO")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_CA_CONN_TMO")
  field(PINI, "YES")
}
record(stringin, "BL45P-EA-IOC-02:CA_AUTO_ADDR") {
  field(DESC, "EPICS_CA_AUTO_ADDR_LIST")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_CA_AUTO_ADDR_LIST")
  field(PINI, "YES")
}
record(stringin, "BL45P-EA-IOC-02:CA_RPTR_PORT") {
  field(DESC, "EPICS_CA_REPEATER_PORT")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_CA_REPEATER_PORT")
  field(PINI, "YES")
}
record(stringin, "BL45P-EA-IOC-02:CA_SRVR_PORT") {
  field(DESC, "EPICS_CA_SERVER_PORT")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_CA_SERVER_PORT")
  field(PINI, "YES")
}
record(stringin, "BL45P-EA-IOC-02:CA_MAX_ARRAY") {
  field(DESC, "EPICS_CA_MAX_ARRAY_BYTES")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_CA_MAX_ARRAY_BYTES")
  field(PINI, "YES")
}
record(stringin, "BL45P-EA-IOC-02:CA_SRCH_TIME") {
  field(DESC, "EPICS_CA_MAX_SEARCH_PERIOD")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_CA_MAX_SEARCH_PERIOD")
  field(PINI, "YES")
}
record(stringin, "BL45P-EA-IOC-02:CA_BEAC_TIME") {
  field(DESC, "EPICS_CA_BEACON_PERIOD")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_CA_BEACON_PERIOD")
  field(PINI, "YES")
}
record(stringin, "BL45P-EA-IOC-02:TIMEZONE") {
  field(DESC, "EPICS_TIMEZONE")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_TIMEZONE")
  field(PINI, "YES")
}
record(stringin, "BL45P-EA-IOC-02:TS_NTP_INET") {
  field(DESC, "EPICS_TS_NTP_INET")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_TS_NTP_INET")
  field(PINI, "YES")
}
record(stringin, "BL45P-EA-IOC-02:IOC_LOG_PORT") {
  field(DESC, "EPICS_IOC_LOG_PORT")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_IOC_LOG_PORT")
  field(PINI, "YES")
}
record(stringin, "BL45P-EA-IOC-02:IOC_LOG_INET") {
  field(DESC, "EPICS_IOC_LOG_INET")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_IOC_LOG_INET")
  field(PINI, "YES")
}
#% macro, __doc__, Create some records for reading IOC statistics and details.
#% macro, IOC, Device prefix

record(bo, "BL45P-EA-IOC-02:01HZ_MODE") {
	field(DESC, "01HZ Mode")
	field(DOL, "1")
	field(PINI, "YES")
	field(ZNAM, "Relative")
	field(ONAM, "Absolute")
}
record(sub, "BL45P-EA-IOC-02:01HZ_UPD_TIME") {
	field(DESC, "01HZ Update Time")
	field(SCAN, "10 second")
	field(EGU, "second")
	field(PREC, "5")
	field(MDEL, "0.00001")
	field(HYST, "0.00002")
	field(INAM, "scanMonInit")
	field(SNAM, "scanMon")
	field(HHSV, "MAJOR")
	field(HSV, "MINOR")
	field(LSV, "MINOR")
	field(LLSV, "MAJOR")
	field(BRSV, "INVALID")
	field(INPA, "BL45P-EA-IOC-02:01HZ_MODE")
	field(B,    "1.0")
	field(C,    "5.0")
}
#% macro, __doc__, Create some records for reading IOC statistics and details.
#% macro, IOC, Device prefix

record(bo, "BL45P-EA-IOC-02:02HZ_MODE") {
	field(DESC, "02HZ Mode")
	field(DOL, "1")
	field(PINI, "YES")
	field(ZNAM, "Relative")
	field(ONAM, "Absolute")
}
record(sub, "BL45P-EA-IOC-02:02HZ_UPD_TIME") {
	field(DESC, "02HZ Update Time")
	field(SCAN, "5 second")
	field(EGU, "second")
	field(PREC, "5")
	field(MDEL, "0.00001")
	field(HYST, "0.00002")
	field(INAM, "scanMonInit")
	field(SNAM, "scanMon")
	field(HHSV, "MAJOR")
	field(HSV, "MINOR")
	field(LSV, "MINOR")
	field(LLSV, "MAJOR")
	field(BRSV, "INVALID")
	field(INPA, "BL45P-EA-IOC-02:02HZ_MODE")
	field(B,    "1.0")
	field(C,    "5.0")
}
#% macro, __doc__, Create some records for reading IOC statistics and details.
#% macro, IOC, Device prefix

record(bo, "BL45P-EA-IOC-02:05HZ_MODE") {
	field(DESC, "05HZ Mode")
	field(DOL, "1")
	field(PINI, "YES")
	field(ZNAM, "Relative")
	field(ONAM, "Absolute")
}
record(sub, "BL45P-EA-IOC-02:05HZ_UPD_TIME") {
	field(DESC, "05HZ Update Time")
	field(SCAN, "2 second")
	field(EGU, "second")
	field(PREC, "5")
	field(MDEL, "0.00001")
	field(HYST, "0.00002")
	field(INAM, "scanMonInit")
	field(SNAM, "scanMon")
	field(HHSV, "MAJOR")
	field(HSV, "MINOR")
	field(LSV, "MINOR")
	field(LLSV, "MAJOR")
	field(BRSV, "INVALID")
	field(INPA, "BL45P-EA-IOC-02:05HZ_MODE")
	field(B,    "1.0")
	field(C,    "5.0")
}
#% macro, __doc__, Create some records for reading IOC statistics and details.
#% macro, IOC, Device prefix

record(bo, "BL45P-EA-IOC-02:1HZ_MODE") {
	field(DESC, "1HZ Mode")
	field(DOL, "1")
	field(PINI, "YES")
	field(ZNAM, "Relative")
	field(ONAM, "Absolute")
}
record(sub, "BL45P-EA-IOC-02:1HZ_UPD_TIME") {
	field(DESC, "1HZ Update Time")
	field(SCAN, "1 second")
	field(EGU, "second")
	field(PREC, "5")
	field(MDEL, "0.00001")
	field(HYST, "0.00002")
	field(INAM, "scanMonInit")
	field(SNAM, "scanMon")
	field(HHSV, "MAJOR")
	field(HSV, "MINOR")
	field(LSV, "MINOR")
	field(LLSV, "MAJOR")
	field(BRSV, "INVALID")
	field(INPA, "BL45P-EA-IOC-02:1HZ_MODE")
	field(B,    "1.0")
	field(C,    "5.0")
}
#% macro, __doc__, Create some records for reading IOC statistics and details.
#% macro, IOC, Device prefix

record(bo, "BL45P-EA-IOC-02:2HZ_MODE") {
	field(DESC, "2HZ Mode")
	field(DOL, "1")
	field(PINI, "YES")
	field(ZNAM, "Relative")
	field(ONAM, "Absolute")
}
record(sub, "BL45P-EA-IOC-02:2HZ_UPD_TIME") {
	field(DESC, "2HZ Update Time")
	field(SCAN, ".5 second")
	field(EGU, "second")
	field(PREC, "5")
	field(MDEL, "0.00001")
	field(HYST, "0.00002")
	field(INAM, "scanMonInit")
	field(SNAM, "scanMon")
	field(HHSV, "MAJOR")
	field(HSV, "MINOR")
	field(LSV, "MINOR")
	field(LLSV, "MAJOR")
	field(BRSV, "INVALID")
	field(INPA, "BL45P-EA-IOC-02:2HZ_MODE")
	field(B,    "1.0")
	field(C,    "5.0")
}
#% macro, __doc__, Create some records for reading IOC statistics and details.
#% macro, IOC, Device prefix

record(bo, "BL45P-EA-IOC-02:5HZ_MODE") {
	field(DESC, "5HZ Mode")
	field(DOL, "1")
	field(PINI, "YES")
	field(ZNAM, "Relative")
	field(ONAM, "Absolute")
}
record(sub, "BL45P-EA-IOC-02:5HZ_UPD_TIME") {
	field(DESC, "5HZ Update Time")
	field(SCAN, ".2 second")
	field(EGU, "second")
	field(PREC, "5")
	field(MDEL, "0.00001")
	field(HYST, "0.00002")
	field(INAM, "scanMonInit")
	field(SNAM, "scanMon")
	field(HHSV, "MAJOR")
	field(HSV, "MINOR")
	field(LSV, "MINOR")
	field(LLSV, "MAJOR")
	field(BRSV, "INVALID")
	field(INPA, "BL45P-EA-IOC-02:5HZ_MODE")
	field(B,    "1.0")
	field(C,    "5.0")
}
#% macro, __doc__, Create some records for reading IOC statistics and details.
#% macro, IOC, Device prefix

record(bo, "BL45P-EA-IOC-02:10HZ_MODE") {
	field(DESC, "10HZ Mode")
	field(DOL, "1")
	field(PINI, "YES")
	field(ZNAM, "Relative")
	field(ONAM, "Absolute")
}
record(sub, "BL45P-EA-IOC-02:10HZ_UPD_TIME") {
	field(DESC, "10HZ Update Time")
	field(SCAN, ".1 second")
	field(EGU, "second")
	field(PREC, "5")
	field(MDEL, "0.00001")
	field(HYST, "0.00002")
	field(INAM, "scanMonInit")
	field(SNAM, "scanMon")
	field(HHSV, "MAJOR")
	field(HSV, "MINOR")
	field(LSV, "MINOR")
	field(LLSV, "MAJOR")
	field(BRSV, "INVALID")
	field(INPA, "BL45P-EA-IOC-02:10HZ_MODE")
	field(B,    "1.0")
	field(C,    "5.0")
}

record(calc, "BL45P-EA-IOC-02:SCANMON_SEVR") {
    field(DESC, "ScanMon Max Severity")
    field(SCAN, "1 second")
    field(CALC, "0")
    field(INPA, "BL45P-EA-IOC-02:01HZ_UPD_TIME.SEVR MS")
    field(INPB, "BL45P-EA-IOC-02:02HZ_UPD_TIME.SEVR MS")
    field(INPC, "BL45P-EA-IOC-02:05HZ_UPD_TIME.SEVR MS")
    field(INPD, "BL45P-EA-IOC-02:1HZ_UPD_TIME.SEVR MS")
    field(INPE, "BL45P-EA-IOC-02:2HZ_UPD_TIME.SEVR MS")
    field(INPF, "BL45P-EA-IOC-02:5HZ_UPD_TIME.SEVR MS")
    field(INPG, "BL45P-EA-IOC-02:10HZ_UPD_TIME.SEVR MS")
}

# % macro, name, name for gui elements
# % macro, EDM_FILE, edm screen, defaults to ioc_stats_softdls.edl
# % macro, IOC, ioc name

# % gui, EA02_STATS, edm, ioc_stats_softdls.edl, ioc=BL45P-EA-IOC-02
# % gui, EA02_STATS, edmembed, ioc_embed.edl, ioc=BL45P-EA-IOC-02,EDM_FILE=ioc_stats_softdls.edl



# This associates BOY screens with the template
# % gui, EA02_STATS, boydetail, devIocStatsApp_opi/iocStats_detail.opi, desc=BL45P-EA-IOC-02, IOC=BL45P-EA-IOC-02, name=EA02_STATS
# % gui, EA02_STATS, boyembed, devIocStatsApp_opi/iocStats_embed.opi, desc=BL45P-EA-IOC-02,  IOC=BL45P-EA-IOC-02, name=EA02_STATS
# % gui, EA02_STATS, boyembed, devIocStatsApp_opi/iocStats_embed_box.opi, desc=BL45P-EA-IOC-02,  IOC=BL45P-EA-IOC-02, name=EA02_STATS

# These define what PVs a detail screen should contain
# % gui, EA02_STATS, readback, Startup Time,BL45P-EA-IOC-02:STARTOD
# % gui, EA02_STATS, readback, Current Time,BL45P-EA-IOC-02:TOD
# % gui, EA02_STATS, readback, Up Time,BL45P-EA-IOC-02:UPTIME
# % gui, EA02_STATS, readback, Heartbeat,BL45P-EA-IOC-02:HEARTBEAT
# % gui, EA02_STATS, readback, Records,BL45P-EA-IOC-02:RECORD_CNT
# % gui, EA02_STATS, readback, Host Name,BL45P-EA-IOC-02:HOSTNAME
# % gui, EA02_STATS, readback, User Name,BL45P-EA-IOC-02:ENGINEER
# % gui, EA02_STATS, readback, Location,BL45P-EA-IOC-02:LOCATION
# % gui, EA02_STATS, readback, CA Clients,BL45P-EA-IOC-02:CA_CLNT_CNT
# % gui, EA02_STATS, readback, CA PV Conns,BL45P-EA-IOC-02:CA_CONN_CNT
# % gui, EA02_STATS, readback, Susp Tasks,BL45P-EA-IOC-02:SUSP_TASK_CNT
# % gui, EA02_STATS, readback, EPICS Version,BL45P-EA-IOC-02:EPICS_VERS
# % gui, EA02_STATS, readback, OS Version,BL45P-EA-IOC-02:KERNEL_VERS
# % gui, EA02_STATS, readback, Application Directory,BL45P-EA-IOC-02:APP_DIR1
# % gui, EA02_STATS, readback, Startup Script,BL45P-EA-IOC-02:ST_SCRIPT1
# % gui, EA02_STATS, readback, Memory Free,BL45P-EA-IOC-02:MEM_FREE
# % gui, EA02_STATS, readback, Memory Used,BL45P-EA-IOC-02:MEM_USED
# % gui, EA02_STATS, readback, Memory Max,BL45P-EA-IOC-02:MEM_MAX
# % gui, EA02_STATS, readback, File Handles Free,BL45P-EA-IOC-02:FD_FREE
# % gui, EA02_STATS, readback, File Handles Max,BL45P-EA-IOC-02:FD_MAX
# % gui, EA02_STATS, readback, IOC CPU Load,BL45P-EA-IOC-02:IOC_CPU_LOAD
# % gui, EA02_STATS, readback, All CPUs Load,BL45P-EA-IOC-02:SYS_CPU_LOAD
# % gui, EA02_STATS, readback, System CPUs,BL45P-EA-IOC-02:CPU_CNT

#====================================================================#
# Template file: ADPandABlocks.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
#
# EDM:
# % gui, PANDA01.DRV, edmtab, ADPandABlocksDetector.edl, P=BL45P-EA-PANDA-01, R=:DRV:, DEVICE=BL45P-EA-PANDA-01:DRV:
#====================================================================#

# CSS screen
## This associates a BOY screen with the template
# % gui, PANDA01.DRV, boydetail, ADPandABlocksApp_opi/ADPandABlocks_detail.opi, P=BL45P-EA-PANDA-01, R=:DRV:, DESC=PandA, DEVICE=BL45P-EA-PANDA-01:DRV:
# % gui, PANDA01.DRV, boyembed, ADPandABlocksApp_opi/ADPandABlocks_embed.opi, P=BL45P-EA-PANDA-01, R=:DRV:, DESC=PandA, DEVICE=BL45P-EA-PANDA-01:DRV:
# % gui, PANDA01.DRV, boyembed, ADPandABlocksApp_opi/ADPandABlocks_embed_box.opi, P=BL45P-EA-PANDA-01, R=:DRV:, DESC=PandA, DEVICE=BL45P-EA-PANDA-01:DRV:
# % gui, PANDA01.DRV, boyembed, ADPandABlocksApp_opi/ADPandABlocks_positions.opi, P=BL45P-EA-PANDA-01, R=:DRV:, DESC=PandA, DEVICE=BL45P-EA-PANDA-01:DRV:
# % gui, PANDA01.DRV, boyembed, ADPandABlocksApp_opi/ADPandABlocks_sync.opi, P=BL45P-EA-PANDA-01, R=:DRV:, DESC=PandA, DEVICE=BL45P-EA-PANDA-01:DRV:

## Info
# % gui, PANDA01.DRV, groupHeading, Info
# % gui, PANDA01.DRV, readback, Port Name , BL45P-EA-PANDA-01:DRV:PortName_RBV
# % gui, PANDA01.DRV, readback, Detector State , BL45P-EA-PANDA-01:DRV:DetectorState_RBV
# % gui, PANDA01.DRV, readback, Status Message , BL45P-EA-PANDA-01:DRV:StatusMessage_RBV
# % gui, PANDA01.DRV, readback, Manufacturer , BL45P-EA-PANDA-01:DRV:Manufacturer_RBV
# % gui, PANDA01.DRV, readback, Model , BL45P-EA-PANDA-01:DRV:Model_RBV
# % gui, PANDA01.DRV, groupExit, InfoExit
## Image
# % gui, PANDA01.DRV, groupHeading, Image
# % gui, PANDA01.DRV, enum, Data Type , BL45P-EA-PANDA-01:DRV:DataType
# % gui, PANDA01.DRV, readback, Sensor Size X , BL45P-EA-PANDA-01:DRV:MaxSizeX_RBV
# % gui, PANDA01.DRV, readback, Sensor Size Y , BL45P-EA-PANDA-01:DRV:MaxSizeY_RBV
# % gui, PANDA01.DRV, readback, Image  Size X , BL45P-EA-PANDA-01:DRV:ArraySizeX_RBV
# % gui, PANDA01.DRV, readback, Image Size Y , BL45P-EA-PANDA-01:DRV:ArraySizeY_RBV
# % gui, PANDA01.DRV, readback, Image Bytes , BL45P-EA-PANDA-01:DRV:ArraySize_RBV
# % gui, PANDA01.DRV, groupExit, ImageExit
## Acquisition
# % gui, PANDA01.DRV, groupHeading, Acquisition
# % gui, PANDA01.DRV, demand, Num Exposures , BL45P-EA-PANDA-01:DRV:NumExposures
# % gui, PANDA01.DRV, readback, Num Exposures , BL45P-EA-PANDA-01:DRV:NumExposures_RBV
# % gui, PANDA01.DRV, demand, Num Images , BL45P-EA-PANDA-01:DRV:NumImages
# % gui, PANDA01.DRV, readback, Num Images , BL45P-EA-PANDA-01:DRV:NumImages_RBV
# % gui, PANDA01.DRV, enum, Image Mode , BL45P-EA-PANDA-01:DRV:ImageMode
# % gui, PANDA01.DRV, enum, Trigger Mode , BL45P-EA-PANDA-01:DRV:TriggerMode
# % gui, PANDA01.DRV, enum, Acquire , BL45P-EA-PANDA-01:DRV:Acquire
# % gui, PANDA01.DRV, readback, Acquire , BL45P-EA-PANDA-01:DRV:Acquire
# % gui, PANDA01.DRV, groupExit, AcquisitionExit
## Status
# % gui, PANDA01.DRV, groupHeading, Status
# % gui, PANDA01.DRV, demand, Counter , BL45P-EA-PANDA-01:DRV:ArrayCounter
# % gui, PANDA01.DRV, readback, Counter , BL45P-EA-PANDA-01:DRV:ArrayCounter_RBV
# % gui, PANDA01.DRV, readback, Array Rate (fps) , BL45P-EA-PANDA-01:DRV:ArrayRate_RBV
# % gui, PANDA01.DRV, readback, Time Remaining , BL45P-EA-PANDA-01:DRV:TimeRemaining_RBV
# % gui, PANDA01.DRV, readback, Exposures Remaining , BL45P-EA-PANDA-01:DRV:NumExposuresCounter_RBV
# % gui, PANDA01.DRV, readback, Images Remaining , BL45P-EA-PANDA-01:DRV:NumImagesCounter_RBV
# % gui, PANDA01.DRV, groupExit, StatusExit
## Header
# % gui, PANDA01.DRV, groupHeading, Header
# % gui, PANDA01.DRV, readback, Data End , $(DEVICE,undefined)DATAEND
# % gui, PANDA01.DRV, readback, Data Header , $(DEVICE,undefined)HEADER
# % gui, PANDA01.DRV, groupExit, HeaderExit

#=================================================================#
# Template file: ADBase.template
# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

# Macros:
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, TIMEOUT, Timeout
# % macro, ADDR, Asyn Port address
# % macro, SCANRATE, Chosen Scan Rate for cpu intensive PVs

#  Using SCANRATE:The ImageJ EPICS_AD_Viewer plugin monitors ArrayCounter_RBV to decide
#  when there is a new image to display. That means that it will not display faster than
#  the SCANRATE you select.

#=================================================================#
# Template file: NDArrayBase.template
# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

###################################################################
#  This record contains the version of ADCore                     #
###################################################################

record(stringin, "BL45P-EA-PANDA-01:DRV:ADCoreVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.DRV,0,1)ADCORE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the version of the driver or plugin       #
###################################################################

record(stringin, "BL45P-EA-PANDA-01:DRV:DriverVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.DRV,0,1)DRIVER_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the asyn port name of this detector       #
###################################################################

record(stringin, "BL45P-EA-PANDA-01:DRV:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.DRV,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records contain basic information about the detector     # 
###################################################################

record(stringin, "BL45P-EA-PANDA-01:DRV:Manufacturer_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.DRV,0,1)MANUFACTURER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-01:DRV:Model_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.DRV,0,1)MODEL")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-01:DRV:SerialNumber_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.DRV,0,1)SERIAL_NUMBER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-01:DRV:SDKVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.DRV,0,1)SDK_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-01:DRV:FirmwareVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.DRV,0,1)FIRMWARE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control acquisition start and stop               #
###################################################################

record(bo, "BL45P-EA-PANDA-01:DRV:Acquire") {
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(PANDA01.DRV,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ONAM, "Acquire")
   field(VAL,  "0")
   field(FLNK, "BL45P-EA-PANDA-01:DRV:SetAcquireBusy")
   info(asyn:READBACK, "1")
}

record(bi, "BL45P-EA-PANDA-01:DRV:Acquire_RBV") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(PANDA01.DRV,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "BL45P-EA-PANDA-01:DRV:SetAcquireBusy")
{
    field(INPA, "BL45P-EA-PANDA-01:DRV:Acquire NPP")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(OUT,  "BL45P-EA-PANDA-01:DRV:AcquireBusy PP")
}

record(busy, "BL45P-EA-PANDA-01:DRV:AcquireBusy") {
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(VAL,  "0")
}

record(bi, "BL45P-EA-PANDA-01:DRV:AcquireBusyCB") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(PANDA01.DRV,0,1)ACQUIRE_BUSY")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "BL45P-EA-PANDA-01:DRV:ClearAcquireBusy") {
    field(INPA, "BL45P-EA-PANDA-01:DRV:AcquireBusyCB CP")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(OUT,  "BL45P-EA-PANDA-01:DRV:AcquireBusy PP")
}

record(bo, "BL45P-EA-PANDA-01:DRV:WaitForPlugins") {
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(PANDA01.DRV,0,1)WAIT_FOR_PLUGINS")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
}

###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longout, "BL45P-EA-PANDA-01:DRV:NDimensions")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.DRV,0,1)ARRAY_NDIMENSIONS")
}

record(longin, "BL45P-EA-PANDA-01:DRV:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.DRV,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform records
record(waveform, "BL45P-EA-PANDA-01:DRV:Dimensions")
{
    field(DTYP, "asynInt32ArrayOut")
    field(INP,  "@asyn(PANDA01.DRV,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:Dim0SA")
}

record(subArray, "BL45P-EA-PANDA-01:DRV:Dim0SA")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:ArraySize0")
}

record(longin, "BL45P-EA-PANDA-01:DRV:ArraySize0")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dim0SA")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:Dim1SA")
}

record(subArray, "BL45P-EA-PANDA-01:DRV:Dim1SA")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:ArraySize1")
}

record(longin, "BL45P-EA-PANDA-01:DRV:ArraySize1")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dim1SA")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:Dim2SA")
}

record(subArray, "BL45P-EA-PANDA-01:DRV:Dim2SA")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:ArraySize2")
}

record(longin, "BL45P-EA-PANDA-01:DRV:ArraySize2")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dim2SA")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:Dim3SA")
}

record(subArray, "BL45P-EA-PANDA-01:DRV:Dim3SA")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:ArraySize3")
}

record(longin, "BL45P-EA-PANDA-01:DRV:ArraySize3")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dim3SA")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:Dim4SA")
}

record(subArray, "BL45P-EA-PANDA-01:DRV:Dim4SA")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:ArraySize4")
}

record(longin, "BL45P-EA-PANDA-01:DRV:ArraySize4")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dim4SA")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:Dim5SA")
}

record(subArray, "BL45P-EA-PANDA-01:DRV:Dim5SA")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:ArraySize5")
}

record(longin, "BL45P-EA-PANDA-01:DRV:ArraySize5")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dim5SA")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:Dim6SA")
}

record(subArray, "BL45P-EA-PANDA-01:DRV:Dim6SA")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:ArraySize6")
}

record(longin, "BL45P-EA-PANDA-01:DRV:ArraySize6")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dim6SA")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:Dim7SA")
}

record(subArray, "BL45P-EA-PANDA-01:DRV:Dim7SA")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:ArraySize7")
}

record(longin, "BL45P-EA-PANDA-01:DRV:ArraySize7")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dim7SA")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:Dim8SA")
}

record(subArray, "BL45P-EA-PANDA-01:DRV:Dim8SA")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:ArraySize8")
}

record(longin, "BL45P-EA-PANDA-01:DRV:ArraySize8")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dim8SA")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:Dim9SA")
}

record(subArray, "BL45P-EA-PANDA-01:DRV:Dim9SA")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:ArraySize9")
}

record(longin, "BL45P-EA-PANDA-01:DRV:ArraySize9")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dim9SA")
}


record(waveform, "BL45P-EA-PANDA-01:DRV:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(PANDA01.DRV,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:Dim0SA_RBV")
    field(SCAN, "I/O Intr")
}

record(subArray, "BL45P-EA-PANDA-01:DRV:Dim0SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:ArraySize0_RBV")
}

record(longin, "BL45P-EA-PANDA-01:DRV:ArraySize0_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dim0SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:Dim1SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:DRV:Dim1SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:ArraySize1_RBV")
}

record(longin, "BL45P-EA-PANDA-01:DRV:ArraySize1_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dim1SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:Dim2SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:DRV:Dim2SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:ArraySize2_RBV")
}

record(longin, "BL45P-EA-PANDA-01:DRV:ArraySize2_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dim2SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:Dim3SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:DRV:Dim3SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:ArraySize3_RBV")
}

record(longin, "BL45P-EA-PANDA-01:DRV:ArraySize3_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dim3SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:Dim4SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:DRV:Dim4SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:ArraySize4_RBV")
}

record(longin, "BL45P-EA-PANDA-01:DRV:ArraySize4_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dim4SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:Dim5SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:DRV:Dim5SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:ArraySize5_RBV")
}

record(longin, "BL45P-EA-PANDA-01:DRV:ArraySize5_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dim5SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:Dim6SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:DRV:Dim6SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:ArraySize6_RBV")
}

record(longin, "BL45P-EA-PANDA-01:DRV:ArraySize6_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dim6SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:Dim7SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:DRV:Dim7SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:ArraySize7_RBV")
}

record(longin, "BL45P-EA-PANDA-01:DRV:ArraySize7_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dim7SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:Dim8SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:DRV:Dim8SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:ArraySize8_RBV")
}

record(longin, "BL45P-EA-PANDA-01:DRV:ArraySize8_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dim8SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:Dim9SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:DRV:Dim9SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:ArraySize9_RBV")
}

record(longin, "BL45P-EA-PANDA-01:DRV:ArraySize9_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:DRV:Dim9SA_RBV")
}


record(mbbi, "BL45P-EA-PANDA-01:DRV:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:DRV:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:DRV:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:DRV:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:DRV:ArraySize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)ARRAY_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records have information on the compression              # 
###################################################################
record(stringin, "BL45P-EA-PANDA-01:DRV:Codec_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.DRV,0,1)CODEC")
   field(VAL,  "")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:DRV:CompressedSize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)COMPRESSED_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the data type                            # 
###################################################################

record(mbbo, "BL45P-EA-PANDA-01:DRV:DataType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA01.DRV,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-01:DRV:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the color mode                           #
#  These choices must agree with NDColorMode_t in NDArray.h       # 
###################################################################

record(mbbo, "BL45P-EA-PANDA-01:DRV:ColorMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA01.DRV,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-01:DRV:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamps of the array     #
###################################################################
record(longin, "BL45P-EA-PANDA-01:DRV:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.DRV,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "BL45P-EA-PANDA-01:DRV:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA01.DRV,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:DRV:EpicsTSSec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.DRV,0,1)EPICS_TS_SEC")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:DRV:EpicsTSNsec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.DRV,0,1)EPICS_TS_NSEC")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "BL45P-EA-PANDA-01:DRV:ArrayCounter")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.DRV,0,1)ARRAY_COUNTER")
}

record(longin, "BL45P-EA-PANDA-01:DRV:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.DRV,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# Updated rate calculation to use a smoothing factor w/ guard against negative values
record(calc, "BL45P-EA-PANDA-01:DRV:ArrayRate_RBV")
{
    field(INPA, "BL45P-EA-PANDA-01:DRV:ArrayRate_RBV.LB NPP NMS")   # Previous counter value
    field(INPB, "BL45P-EA-PANDA-01:DRV:ArrayCounter_RBV NPP NMS")   # Current counter value
    field(INPC, "1.0")                                # Delta time in seconds
    field(INPD, "BL45P-EA-PANDA-01:DRV:ArrayRate_RBV.VAL NPP NMS")  # Previous rate
    field(INPE, "0.0")                 # Smoothing factor
    field(CALC, "(D*E)/C+MAX(0,B-A)*(1-E)/C")
    field(PREC, "2" )
    field(EGU,  "Hz" )
    field(SCAN, "1 second")
}

###################################################################
#  These records control NDArray callacks                         # 
###################################################################
record(bo, "BL45P-EA-PANDA-01:DRV:ArrayCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.DRV,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(VAL, "1")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-01:DRV:ArrayCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.DRV,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains macro definitions for the attributes      # 
###################################################################

record(waveform, "BL45P-EA-PANDA-01:DRV:NDAttributesMacros")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(PANDA01.DRV,0,1)ND_ATTRIBUTES_MACROS")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record is the name of a file defining attributes          # 
###################################################################

record(waveform, "BL45P-EA-PANDA-01:DRV:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(PANDA01.DRV,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record defines the status of reading attributes file      # 
###################################################################

record(mbbi, "BL45P-EA-PANDA-01:DRV:NDAttributesStatus")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.DRV,0,1)ND_ATTRIBUTES_STATUS")
    field(ZRVL, "0")
    field(ZRST, "Attributes file OK")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "File not found")
    field(ONSV, "MINOR")
    field(TWVL, "2")
    field(TWST, "XML syntax error")
    field(TWSV, "MAJOR")
    field(THVL, "3")
    field(THST, "Macro substitution error")
    field(THSV, "MAJOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
###################################################################

record(ai, "BL45P-EA-PANDA-01:DRV:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA01.DRV,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "BL45P-EA-PANDA-01:DRV:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA01.DRV,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "BL45P-EA-PANDA-01:DRV:PoolAllocBuffers")
   info(autosaveFields, "SCAN")
}

record(longin, "BL45P-EA-PANDA-01:DRV:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "BL45P-EA-PANDA-01:DRV:PoolFreeBuffers")
}

record(longin, "BL45P-EA-PANDA-01:DRV:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "BL45P-EA-PANDA-01:DRV:PoolUsedBuffers")
}

record(calc, "BL45P-EA-PANDA-01:DRV:PoolUsedBuffers")
{
    field(INPA, "BL45P-EA-PANDA-01:DRV:PoolAllocBuffers NPP MS")
    field(INPB, "BL45P-EA-PANDA-01:DRV:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

record(bo, "BL45P-EA-PANDA-01:DRV:EmptyFreeList")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA01.DRV,0,1)POOL_EMPTY_FREELIST")
}

record(longin, "BL45P-EA-PANDA-01:DRV:NumQueuedArrays")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)NUM_QUEUED_ARRAYS")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:DRV:MaxSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)MAX_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:DRV:MaxSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)MAX_SIZE_Y")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the detector readout                     #
#  including binning, region start and size                       # 
###################################################################

record(longout, "BL45P-EA-PANDA-01:DRV:BinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA01.DRV,0,1)BIN_X")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:DRV:BinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)BIN_X")
   field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:DRV:BinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA01.DRV,0,1)BIN_Y")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:DRV:BinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)BIN_Y")
   field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:DRV:MinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA01.DRV,0,1)MIN_X")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:DRV:MinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)MIN_X")
   field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:DRV:MinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA01.DRV,0,1)MIN_Y")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:DRV:MinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)MIN_Y")
   field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:DRV:SizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA01.DRV,0,1)SIZE_X")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:DRV:SizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:DRV:SizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA01.DRV,0,1)SIZE_Y")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:DRV:SizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(bo, "BL45P-EA-PANDA-01:DRV:ReverseX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA01.DRV,0,1)REVERSE_X")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-01:DRV:ReverseX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)REVERSE_X")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "BL45P-EA-PANDA-01:DRV:ReverseY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA01.DRV,0,1)REVERSE_Y")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-01:DRV:ReverseY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)REVERSE_Y")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the acquisition time and                 #
#  period                                                         # 
###################################################################
record(ao, "BL45P-EA-PANDA-01:DRV:AcquireTime")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PANDA01.DRV,0,1)ACQ_TIME")
   field(PREC, "3")
   field(VAL,  "1.0")
   info(autosaveFields, "VAL")
}

record(ai, "BL45P-EA-PANDA-01:DRV:AcquireTime_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA01.DRV,0,1)ACQ_TIME")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ao, "BL45P-EA-PANDA-01:DRV:AcquirePeriod")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PANDA01.DRV,0,1)ACQ_PERIOD")
   field(PREC, "3")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(ai, "BL45P-EA-PANDA-01:DRV:AcquirePeriod_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA01.DRV,0,1)ACQ_PERIOD")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ai, "BL45P-EA-PANDA-01:DRV:TimeRemaining_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA01.DRV,0,1)TIME_REMAINING")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the gain                                 # 
###################################################################
record(ao, "BL45P-EA-PANDA-01:DRV:Gain")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PANDA01.DRV,0,1)GAIN")
   field(VAL,  "1.0")
   field(PREC, "3")
   info(autosaveFields, "VAL")
}

record(ai, "BL45P-EA-PANDA-01:DRV:Gain_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA01.DRV,0,1)GAIN")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the frame type                           # 
###################################################################
record(mbbo, "BL45P-EA-PANDA-01:DRV:FrameType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA01.DRV,0,1)FRAME_TYPE")
   field(ZRST, "Normal")
   field(ZRVL, "0")
   field(ONST, "Background")
   field(ONVL, "1")
   field(TWST, "FlatField")
   field(TWVL, "2")
   field(THST, "DblCorrelation")
   field(THVL, "3")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-01:DRV:FrameType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)FRAME_TYPE")
   field(ZRST, "Normal")
   field(ZRVL, "0")
   field(ONST, "Background")
   field(ONVL, "1")
   field(TWST, "FlatField")
   field(TWVL, "2")
   field(THST, "DblCorrelation")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the acquisition mode                     # 
###################################################################
record(mbbo, "BL45P-EA-PANDA-01:DRV:ImageMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA01.DRV,0,1)IMAGE_MODE")
   field(ZRST, "Single")
   field(ZRVL, "0")
   field(ONST, "Multiple")
   field(ONVL, "1")
   field(TWST, "Continuous")
   field(TWVL, "2")
   field(VAL,  "2")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-01:DRV:ImageMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)IMAGE_MODE")
   field(ZRST, "Single")
   field(ZRVL, "0")
   field(ONST, "Multiple")
   field(ONVL, "1")
   field(TWST, "Continuous")
   field(TWVL, "2")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the trigger mode                         # 
###################################################################
record(mbbo, "BL45P-EA-PANDA-01:DRV:TriggerMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA01.DRV,0,1)TRIGGER_MODE")
   field(ZRST, "Internal")
   field(ZRVL, "0")
   field(ONST, "External")
   field(ONVL, "1")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-01:DRV:TriggerMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)TRIGGER_MODE")
   field(ZRST, "Internal")
   field(ZRVL, "0")
   field(ONST, "External")
   field(ONVL, "1")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the number of exposures and              #
#  number of images                                               # 
###################################################################
record(longout, "BL45P-EA-PANDA-01:DRV:NumExposures")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA01.DRV,0,1)NEXPOSURES")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:DRV:NumExposures_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)NEXPOSURES")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:DRV:NumExposuresCounter_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)NEXPOSURES_COUNTER")
   field(SCAN, "I/O Intr")
}
record(longout, "BL45P-EA-PANDA-01:DRV:NumImages")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA01.DRV,0,1)NIMAGES")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:DRV:NumImages_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)NIMAGES")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:DRV:NumImagesCounter_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.DRV,0,1)NIMAGES_COUNTER")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are for the detector state                       # 
###################################################################

record(mbbi, "BL45P-EA-PANDA-01:DRV:DetectorState_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.DRV,0,1)STATUS")
    field(ZRST, "Idle")
    field(ZRVL, "0")
    field(ZRSV, "NO_ALARM")
    field(ONST, "Acquire")
    field(ONVL, "1")
    field(ONSV, "NO_ALARM")
    field(TWST, "Readout")
    field(TWVL, "2")
    field(TWSV, "NO_ALARM")
    field(THST, "Correct")
    field(THVL, "3")
    field(THSV, "NO_ALARM")
    field(FRST, "Saving")
    field(FRVL, "4")
    field(FRSV, "NO_ALARM")
    field(FVST, "Aborting")
    field(FVVL, "5")
    field(FVSV, "MINOR")
    field(SXST, "Error")
    field(SXVL, "6")
    field(SXSV, "MAJOR")
    field(SVST, "Waiting")
    field(SVVL, "7")
    field(SVSV, "NO_ALARM")
    field(EIST, "Initializing")
    field(EIVL, "8")
    field(EISV, "NO_ALARM")
    field(NIST, "Disconnected")
    field(NIVL, "9")
    field(NISV, "INVALID")
    field(TEST, "Aborted")
    field(TEVL, "10")
    field(TESV, "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide status information                       # 
###################################################################

# Status message.
record(waveform, "BL45P-EA-PANDA-01:DRV:StatusMessage_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA01.DRV,0,1)STATUS_MESSAGE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(waveform, "BL45P-EA-PANDA-01:DRV:StringToServer_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA01.DRV,0,1)STRING_TO_SERVER")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(waveform, "BL45P-EA-PANDA-01:DRV:StringFromServer_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA01.DRV,0,1)STRING_FROM_SERVER")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

################################################################@###
#  This record can be used to force a read of the detector status  # 
####################################################################
record(bo,"BL45P-EA-PANDA-01:DRV:ReadStatus") {
    field(DTYP,"asynInt32")
    field(OUT, "@asyn(PANDA01.DRV,0,1)READ_STATUS")
    field(VAL, "1")
    field(SCAN,"Passive")
    info(autosaveFields, "SCAN")
}

###################################################################
#  These records control the shutter                              # 
###################################################################

record(mbbo, "BL45P-EA-PANDA-01:DRV:ShutterMode")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.DRV,0,1)SHUTTER_MODE")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "EPICS PV")
    field(ONVL, "1")
    field(TWST, "Detector output")
    field(TWVL, "2")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-01:DRV:ShutterMode_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.DRV,0,1)SHUTTER_MODE")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "EPICS PV")
    field(ONVL, "1")
    field(TWST, "Camera output")
    field(TWVL, "2")
    field(SCAN, "I/O Intr")
}

record(bo, "BL45P-EA-PANDA-01:DRV:ShutterControl")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.DRV,0,1)SHUTTER_CONTROL")
    field(ZNAM, "Close")
    field(ONAM, "Open")
    field(VAL,  "0")
}

record(bi, "BL45P-EA-PANDA-01:DRV:ShutterControl_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.DRV,0,1)SHUTTER_CONTROL")
    field(ZNAM, "Close")
    field(ONAM, "Open")
    field(SCAN, "I/O Intr")
}

record(bi, "BL45P-EA-PANDA-01:DRV:ShutterStatus_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.DRV,0,1)SHUTTER_STATUS")
    field(ZNAM, "Closed")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Open")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "BL45P-EA-PANDA-01:DRV:ShutterOpenDelay")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PANDA01.DRV,0,1)SHUTTER_OPEN_DELAY")
   field(PREC, "3")
   field(VAL,  "0.0")
   info(autosaveFields, "VAL")
}

record(ai, "BL45P-EA-PANDA-01:DRV:ShutterOpenDelay_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA01.DRV,0,1)SHUTTER_OPEN_DELAY")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ao, "BL45P-EA-PANDA-01:DRV:ShutterCloseDelay")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PANDA01.DRV,0,1)SHUTTER_CLOSE_DELAY")
   field(PREC, "3")
   field(VAL,  "0.0")
   info(autosaveFields, "VAL")
}

record(ai, "BL45P-EA-PANDA-01:DRV:ShutterCloseDelay_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA01.DRV,0,1)SHUTTER_CLOSE_DELAY")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

# This record changes state when the driver opens/closes an EPICS shutter
record(bi, "BL45P-EA-PANDA-01:DRV:ShutterControlEPICS")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.DRV,0,1)SHUTTER_CONTROL_EPICS")
    field(ZNAM, "Closed")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Open")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
    field(FLNK, "BL45P-EA-PANDA-01:DRV:ShutterFanout.PROC")
}

record(fanout, "BL45P-EA-PANDA-01:DRV:ShutterFanout")
{
    field(LNK1, "BL45P-EA-PANDA-01:DRV:ShutterOpenEPICS.PROC PP MS")
    field(LNK2, "BL45P-EA-PANDA-01:DRV:ShutterCloseEPICS.PROC PP MS")
}

record(calcout, "BL45P-EA-PANDA-01:DRV:ShutterOpenEPICS")
{
    field(INPA, "BL45P-EA-PANDA-01:DRV:ShutterControlEPICS.VAL NPP NMS")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "1")
    field(OUT,  "")
    info(autosaveFields, "OUT OCAL")
}

record(calcout, "BL45P-EA-PANDA-01:DRV:ShutterCloseEPICS")
{
    field(INPA, "BL45P-EA-PANDA-01:DRV:ShutterControlEPICS.VAL NPP NMS")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "0")
    field(OUT,  "")
    info(autosaveFields, "OUT OCAL")
}

record(mbbi, "BL45P-EA-PANDA-01:DRV:ShutterStatusEPICS_RBV")
{
    field(DTYP, "Raw Soft Channel")
    field(INP,  "test CP MS")
    field(ZRVL, "0")
    field(ZRST, "Closed")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "Open")
    field(ONSV, "MINOR")
    info(autosaveFields, "INP ZRVL ONVL")
}

###################################################################
#  These records control the detector temperature                 # 
###################################################################
 
record(ao, "BL45P-EA-PANDA-01:DRV:Temperature")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PANDA01.DRV,0,1)TEMPERATURE")
   field(PREC, "1")
   field(EGU,  "C")
   field(VAL,  "25.0")
   info(autosaveFields, "VAL")
}

record(ai, "BL45P-EA-PANDA-01:DRV:Temperature_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA01.DRV,0,1)TEMPERATURE")
   field(PREC, "1")
   field(EGU,  "C")
   field(SCAN, "I/O Intr")
}

record(ai, "BL45P-EA-PANDA-01:DRV:TemperatureActual")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA01.DRV,0,1)TEMPERATURE_ACTUAL")
   field(PREC, "1")
   field(EGU,  "C")
   field(SCAN, "I/O Intr")
}


###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"BL45P-EA-PANDA-01:DRV:AsynIO")
{
    field(PORT, "PANDA01.DRV")
    field(TIB2,"1")
    info("ADType", "ADDriver")
}


record(bi, "BL45P-EA-PANDA-01:DRV:CONNECTED") {
  field(DESC, "Is ADPandABlocks connected")
  field(DTYP, "asynInt32")
  field(INP, "@asyn(PANDA01.DRV,0) ISCONNECTED")
  field(ZNAM, "Not Connected")
  field(ONAM, "Connected")
  field(ZSV, "INVALID")
  field(SCAN, "I/O Intr")
}

record(bi, "BL45P-EA-PANDA-01:DRV:RESPONDING") {
  field(DESC, "Is ADPandABlocks responsive")
  field(DTYP, "asynInt32")
  field(INP, "@asyn(PANDA01.DRV,0) ISRESPONSIVE")
  field(ZNAM, "Not Responding")
  field(ONAM, "Responding")
  field(ZSV, "INVALID")
  field(SCAN, "I/O Intr")
}

record(waveform, "BL45P-EA-PANDA-01:DRV:HEADER") {
  field(DESC, "ADPandABlocks data header")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,0) HEADER")
  field(FTVL, "CHAR")
  field(NELM, "1024")
 # field(SCAN, "I/O Intr")
}

record(waveform, "BL45P-EA-PANDA-01:DRV:DATAEND") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,0) DATAEND")
  field(FTVL, "CHAR")
  field(NELM, "1024")
 # field(SCAN, "I/O Intr")
}


record(mbbo, "BL45P-EA-PANDA-01:DRV:ColorMode") {
  field(DISA, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:Gain") {
  field(DISA, "1")
}

record(ai, "BL45P-EA-PANDA-01:DRV:Gain_RBV") {
  field(DISA, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:BinX") {
  field(DISA, "1")
}

record(longin, "BL45P-EA-PANDA-01:DRV:BinX_RBV") {
  field(DISA, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:BinY") {
  field(DISA, "1")
}

record(longin, "BL45P-EA-PANDA-01:DRV:BinY_RBV") {
  field(DISA, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:MinX") {
  field(DISA, "1")
}

record(longin, "BL45P-EA-PANDA-01:DRV:MinX_RBV") {
  field(DISA, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:MinY") {
  field(DISA, "1")
}

record(longin, "BL45P-EA-PANDA-01:DRV:MinY_RBV") {
  field(DISA, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:SizeX") {
  field(DISA, "1")
}

record(longin, "BL45P-EA-PANDA-01:DRV:SizeX_RBV") {
  field(DISA, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:SizeY") {
  field(DISA, "1")
}

record(longin, "BL45P-EA-PANDA-01:DRV:SizeY_RBV") {
  field(DISA, "1")
}

record(bo, "BL45P-EA-PANDA-01:DRV:ReverseX") {
  field(DISA, "1")
}

record(bi, "BL45P-EA-PANDA-01:DRV:ReverseX_RBV") {
  field(DISA, "1")
}

record(bo, "BL45P-EA-PANDA-01:DRV:ReverseY") {
  field(DISA, "1")
}

record(bi, "BL45P-EA-PANDA-01:DRV:ReverseY_RBV") {
  field(DISA, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:AcquireTime") {
  field(DISA, "1")
}

record(ai, "BL45P-EA-PANDA-01:DRV:AcquireTime_RBV") {
  field(DISA, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:AcquirePeriod") {
  field(DISA, "1")
}

record(ai, "BL45P-EA-PANDA-01:DRV:AcquirePeriod_RBV") {
  field(DISA, "1")
}
#====================================================================#
# Template file: ADPandABlocks.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
#
# EDM:
# % gui, PANDA02.DRV, edmtab, ADPandABlocksDetector.edl, P=BL45P-EA-PANDA-02, R=:DRV:, DEVICE=BL45P-EA-PANDA-02:DRV:
#====================================================================#

# CSS screen
## This associates a BOY screen with the template
# % gui, PANDA02.DRV, boydetail, ADPandABlocksApp_opi/ADPandABlocks_detail.opi, P=BL45P-EA-PANDA-02, R=:DRV:, DESC=PandA, DEVICE=BL45P-EA-PANDA-02:DRV:
# % gui, PANDA02.DRV, boyembed, ADPandABlocksApp_opi/ADPandABlocks_embed.opi, P=BL45P-EA-PANDA-02, R=:DRV:, DESC=PandA, DEVICE=BL45P-EA-PANDA-02:DRV:
# % gui, PANDA02.DRV, boyembed, ADPandABlocksApp_opi/ADPandABlocks_embed_box.opi, P=BL45P-EA-PANDA-02, R=:DRV:, DESC=PandA, DEVICE=BL45P-EA-PANDA-02:DRV:
# % gui, PANDA02.DRV, boyembed, ADPandABlocksApp_opi/ADPandABlocks_positions.opi, P=BL45P-EA-PANDA-02, R=:DRV:, DESC=PandA, DEVICE=BL45P-EA-PANDA-02:DRV:
# % gui, PANDA02.DRV, boyembed, ADPandABlocksApp_opi/ADPandABlocks_sync.opi, P=BL45P-EA-PANDA-02, R=:DRV:, DESC=PandA, DEVICE=BL45P-EA-PANDA-02:DRV:

## Info
# % gui, PANDA02.DRV, groupHeading, Info
# % gui, PANDA02.DRV, readback, Port Name , BL45P-EA-PANDA-02:DRV:PortName_RBV
# % gui, PANDA02.DRV, readback, Detector State , BL45P-EA-PANDA-02:DRV:DetectorState_RBV
# % gui, PANDA02.DRV, readback, Status Message , BL45P-EA-PANDA-02:DRV:StatusMessage_RBV
# % gui, PANDA02.DRV, readback, Manufacturer , BL45P-EA-PANDA-02:DRV:Manufacturer_RBV
# % gui, PANDA02.DRV, readback, Model , BL45P-EA-PANDA-02:DRV:Model_RBV
# % gui, PANDA02.DRV, groupExit, InfoExit
## Image
# % gui, PANDA02.DRV, groupHeading, Image
# % gui, PANDA02.DRV, enum, Data Type , BL45P-EA-PANDA-02:DRV:DataType
# % gui, PANDA02.DRV, readback, Sensor Size X , BL45P-EA-PANDA-02:DRV:MaxSizeX_RBV
# % gui, PANDA02.DRV, readback, Sensor Size Y , BL45P-EA-PANDA-02:DRV:MaxSizeY_RBV
# % gui, PANDA02.DRV, readback, Image  Size X , BL45P-EA-PANDA-02:DRV:ArraySizeX_RBV
# % gui, PANDA02.DRV, readback, Image Size Y , BL45P-EA-PANDA-02:DRV:ArraySizeY_RBV
# % gui, PANDA02.DRV, readback, Image Bytes , BL45P-EA-PANDA-02:DRV:ArraySize_RBV
# % gui, PANDA02.DRV, groupExit, ImageExit
## Acquisition
# % gui, PANDA02.DRV, groupHeading, Acquisition
# % gui, PANDA02.DRV, demand, Num Exposures , BL45P-EA-PANDA-02:DRV:NumExposures
# % gui, PANDA02.DRV, readback, Num Exposures , BL45P-EA-PANDA-02:DRV:NumExposures_RBV
# % gui, PANDA02.DRV, demand, Num Images , BL45P-EA-PANDA-02:DRV:NumImages
# % gui, PANDA02.DRV, readback, Num Images , BL45P-EA-PANDA-02:DRV:NumImages_RBV
# % gui, PANDA02.DRV, enum, Image Mode , BL45P-EA-PANDA-02:DRV:ImageMode
# % gui, PANDA02.DRV, enum, Trigger Mode , BL45P-EA-PANDA-02:DRV:TriggerMode
# % gui, PANDA02.DRV, enum, Acquire , BL45P-EA-PANDA-02:DRV:Acquire
# % gui, PANDA02.DRV, readback, Acquire , BL45P-EA-PANDA-02:DRV:Acquire
# % gui, PANDA02.DRV, groupExit, AcquisitionExit
## Status
# % gui, PANDA02.DRV, groupHeading, Status
# % gui, PANDA02.DRV, demand, Counter , BL45P-EA-PANDA-02:DRV:ArrayCounter
# % gui, PANDA02.DRV, readback, Counter , BL45P-EA-PANDA-02:DRV:ArrayCounter_RBV
# % gui, PANDA02.DRV, readback, Array Rate (fps) , BL45P-EA-PANDA-02:DRV:ArrayRate_RBV
# % gui, PANDA02.DRV, readback, Time Remaining , BL45P-EA-PANDA-02:DRV:TimeRemaining_RBV
# % gui, PANDA02.DRV, readback, Exposures Remaining , BL45P-EA-PANDA-02:DRV:NumExposuresCounter_RBV
# % gui, PANDA02.DRV, readback, Images Remaining , BL45P-EA-PANDA-02:DRV:NumImagesCounter_RBV
# % gui, PANDA02.DRV, groupExit, StatusExit
## Header
# % gui, PANDA02.DRV, groupHeading, Header
# % gui, PANDA02.DRV, readback, Data End , $(DEVICE,undefined)DATAEND
# % gui, PANDA02.DRV, readback, Data Header , $(DEVICE,undefined)HEADER
# % gui, PANDA02.DRV, groupExit, HeaderExit

#=================================================================#
# Template file: ADBase.template
# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

# Macros:
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, TIMEOUT, Timeout
# % macro, ADDR, Asyn Port address
# % macro, SCANRATE, Chosen Scan Rate for cpu intensive PVs

#  Using SCANRATE:The ImageJ EPICS_AD_Viewer plugin monitors ArrayCounter_RBV to decide
#  when there is a new image to display. That means that it will not display faster than
#  the SCANRATE you select.

#=================================================================#
# Template file: NDArrayBase.template
# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

###################################################################
#  This record contains the version of ADCore                     #
###################################################################

record(stringin, "BL45P-EA-PANDA-02:DRV:ADCoreVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.DRV,0,1)ADCORE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the version of the driver or plugin       #
###################################################################

record(stringin, "BL45P-EA-PANDA-02:DRV:DriverVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.DRV,0,1)DRIVER_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the asyn port name of this detector       #
###################################################################

record(stringin, "BL45P-EA-PANDA-02:DRV:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.DRV,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records contain basic information about the detector     # 
###################################################################

record(stringin, "BL45P-EA-PANDA-02:DRV:Manufacturer_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.DRV,0,1)MANUFACTURER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-02:DRV:Model_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.DRV,0,1)MODEL")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-02:DRV:SerialNumber_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.DRV,0,1)SERIAL_NUMBER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-02:DRV:SDKVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.DRV,0,1)SDK_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-02:DRV:FirmwareVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.DRV,0,1)FIRMWARE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control acquisition start and stop               #
###################################################################

record(bo, "BL45P-EA-PANDA-02:DRV:Acquire") {
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(PANDA02.DRV,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ONAM, "Acquire")
   field(VAL,  "0")
   field(FLNK, "BL45P-EA-PANDA-02:DRV:SetAcquireBusy")
   info(asyn:READBACK, "1")
}

record(bi, "BL45P-EA-PANDA-02:DRV:Acquire_RBV") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(PANDA02.DRV,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "BL45P-EA-PANDA-02:DRV:SetAcquireBusy")
{
    field(INPA, "BL45P-EA-PANDA-02:DRV:Acquire NPP")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(OUT,  "BL45P-EA-PANDA-02:DRV:AcquireBusy PP")
}

record(busy, "BL45P-EA-PANDA-02:DRV:AcquireBusy") {
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(VAL,  "0")
}

record(bi, "BL45P-EA-PANDA-02:DRV:AcquireBusyCB") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(PANDA02.DRV,0,1)ACQUIRE_BUSY")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "BL45P-EA-PANDA-02:DRV:ClearAcquireBusy") {
    field(INPA, "BL45P-EA-PANDA-02:DRV:AcquireBusyCB CP")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(OUT,  "BL45P-EA-PANDA-02:DRV:AcquireBusy PP")
}

record(bo, "BL45P-EA-PANDA-02:DRV:WaitForPlugins") {
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(PANDA02.DRV,0,1)WAIT_FOR_PLUGINS")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
}

###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longout, "BL45P-EA-PANDA-02:DRV:NDimensions")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.DRV,0,1)ARRAY_NDIMENSIONS")
}

record(longin, "BL45P-EA-PANDA-02:DRV:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.DRV,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform records
record(waveform, "BL45P-EA-PANDA-02:DRV:Dimensions")
{
    field(DTYP, "asynInt32ArrayOut")
    field(INP,  "@asyn(PANDA02.DRV,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:Dim0SA")
}

record(subArray, "BL45P-EA-PANDA-02:DRV:Dim0SA")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:ArraySize0")
}

record(longin, "BL45P-EA-PANDA-02:DRV:ArraySize0")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dim0SA")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:Dim1SA")
}

record(subArray, "BL45P-EA-PANDA-02:DRV:Dim1SA")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:ArraySize1")
}

record(longin, "BL45P-EA-PANDA-02:DRV:ArraySize1")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dim1SA")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:Dim2SA")
}

record(subArray, "BL45P-EA-PANDA-02:DRV:Dim2SA")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:ArraySize2")
}

record(longin, "BL45P-EA-PANDA-02:DRV:ArraySize2")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dim2SA")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:Dim3SA")
}

record(subArray, "BL45P-EA-PANDA-02:DRV:Dim3SA")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:ArraySize3")
}

record(longin, "BL45P-EA-PANDA-02:DRV:ArraySize3")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dim3SA")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:Dim4SA")
}

record(subArray, "BL45P-EA-PANDA-02:DRV:Dim4SA")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:ArraySize4")
}

record(longin, "BL45P-EA-PANDA-02:DRV:ArraySize4")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dim4SA")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:Dim5SA")
}

record(subArray, "BL45P-EA-PANDA-02:DRV:Dim5SA")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:ArraySize5")
}

record(longin, "BL45P-EA-PANDA-02:DRV:ArraySize5")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dim5SA")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:Dim6SA")
}

record(subArray, "BL45P-EA-PANDA-02:DRV:Dim6SA")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:ArraySize6")
}

record(longin, "BL45P-EA-PANDA-02:DRV:ArraySize6")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dim6SA")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:Dim7SA")
}

record(subArray, "BL45P-EA-PANDA-02:DRV:Dim7SA")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:ArraySize7")
}

record(longin, "BL45P-EA-PANDA-02:DRV:ArraySize7")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dim7SA")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:Dim8SA")
}

record(subArray, "BL45P-EA-PANDA-02:DRV:Dim8SA")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:ArraySize8")
}

record(longin, "BL45P-EA-PANDA-02:DRV:ArraySize8")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dim8SA")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:Dim9SA")
}

record(subArray, "BL45P-EA-PANDA-02:DRV:Dim9SA")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:ArraySize9")
}

record(longin, "BL45P-EA-PANDA-02:DRV:ArraySize9")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dim9SA")
}


record(waveform, "BL45P-EA-PANDA-02:DRV:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(PANDA02.DRV,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:Dim0SA_RBV")
    field(SCAN, "I/O Intr")
}

record(subArray, "BL45P-EA-PANDA-02:DRV:Dim0SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:ArraySize0_RBV")
}

record(longin, "BL45P-EA-PANDA-02:DRV:ArraySize0_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dim0SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:Dim1SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:DRV:Dim1SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:ArraySize1_RBV")
}

record(longin, "BL45P-EA-PANDA-02:DRV:ArraySize1_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dim1SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:Dim2SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:DRV:Dim2SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:ArraySize2_RBV")
}

record(longin, "BL45P-EA-PANDA-02:DRV:ArraySize2_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dim2SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:Dim3SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:DRV:Dim3SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:ArraySize3_RBV")
}

record(longin, "BL45P-EA-PANDA-02:DRV:ArraySize3_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dim3SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:Dim4SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:DRV:Dim4SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:ArraySize4_RBV")
}

record(longin, "BL45P-EA-PANDA-02:DRV:ArraySize4_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dim4SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:Dim5SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:DRV:Dim5SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:ArraySize5_RBV")
}

record(longin, "BL45P-EA-PANDA-02:DRV:ArraySize5_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dim5SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:Dim6SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:DRV:Dim6SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:ArraySize6_RBV")
}

record(longin, "BL45P-EA-PANDA-02:DRV:ArraySize6_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dim6SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:Dim7SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:DRV:Dim7SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:ArraySize7_RBV")
}

record(longin, "BL45P-EA-PANDA-02:DRV:ArraySize7_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dim7SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:Dim8SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:DRV:Dim8SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:ArraySize8_RBV")
}

record(longin, "BL45P-EA-PANDA-02:DRV:ArraySize8_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dim8SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:Dim9SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:DRV:Dim9SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:ArraySize9_RBV")
}

record(longin, "BL45P-EA-PANDA-02:DRV:ArraySize9_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:DRV:Dim9SA_RBV")
}


record(mbbi, "BL45P-EA-PANDA-02:DRV:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:DRV:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:DRV:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:DRV:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:DRV:ArraySize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)ARRAY_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records have information on the compression              # 
###################################################################
record(stringin, "BL45P-EA-PANDA-02:DRV:Codec_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.DRV,0,1)CODEC")
   field(VAL,  "")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:DRV:CompressedSize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)COMPRESSED_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the data type                            # 
###################################################################

record(mbbo, "BL45P-EA-PANDA-02:DRV:DataType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA02.DRV,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-02:DRV:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the color mode                           #
#  These choices must agree with NDColorMode_t in NDArray.h       # 
###################################################################

record(mbbo, "BL45P-EA-PANDA-02:DRV:ColorMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA02.DRV,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-02:DRV:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamps of the array     #
###################################################################
record(longin, "BL45P-EA-PANDA-02:DRV:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.DRV,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "BL45P-EA-PANDA-02:DRV:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA02.DRV,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:DRV:EpicsTSSec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.DRV,0,1)EPICS_TS_SEC")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:DRV:EpicsTSNsec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.DRV,0,1)EPICS_TS_NSEC")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "BL45P-EA-PANDA-02:DRV:ArrayCounter")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.DRV,0,1)ARRAY_COUNTER")
}

record(longin, "BL45P-EA-PANDA-02:DRV:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.DRV,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# Updated rate calculation to use a smoothing factor w/ guard against negative values
record(calc, "BL45P-EA-PANDA-02:DRV:ArrayRate_RBV")
{
    field(INPA, "BL45P-EA-PANDA-02:DRV:ArrayRate_RBV.LB NPP NMS")   # Previous counter value
    field(INPB, "BL45P-EA-PANDA-02:DRV:ArrayCounter_RBV NPP NMS")   # Current counter value
    field(INPC, "1.0")                                # Delta time in seconds
    field(INPD, "BL45P-EA-PANDA-02:DRV:ArrayRate_RBV.VAL NPP NMS")  # Previous rate
    field(INPE, "0.0")                 # Smoothing factor
    field(CALC, "(D*E)/C+MAX(0,B-A)*(1-E)/C")
    field(PREC, "2" )
    field(EGU,  "Hz" )
    field(SCAN, "1 second")
}

###################################################################
#  These records control NDArray callacks                         # 
###################################################################
record(bo, "BL45P-EA-PANDA-02:DRV:ArrayCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.DRV,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(VAL, "1")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-02:DRV:ArrayCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.DRV,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains macro definitions for the attributes      # 
###################################################################

record(waveform, "BL45P-EA-PANDA-02:DRV:NDAttributesMacros")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(PANDA02.DRV,0,1)ND_ATTRIBUTES_MACROS")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record is the name of a file defining attributes          # 
###################################################################

record(waveform, "BL45P-EA-PANDA-02:DRV:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(PANDA02.DRV,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record defines the status of reading attributes file      # 
###################################################################

record(mbbi, "BL45P-EA-PANDA-02:DRV:NDAttributesStatus")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.DRV,0,1)ND_ATTRIBUTES_STATUS")
    field(ZRVL, "0")
    field(ZRST, "Attributes file OK")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "File not found")
    field(ONSV, "MINOR")
    field(TWVL, "2")
    field(TWST, "XML syntax error")
    field(TWSV, "MAJOR")
    field(THVL, "3")
    field(THST, "Macro substitution error")
    field(THSV, "MAJOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
###################################################################

record(ai, "BL45P-EA-PANDA-02:DRV:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA02.DRV,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "BL45P-EA-PANDA-02:DRV:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA02.DRV,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "BL45P-EA-PANDA-02:DRV:PoolAllocBuffers")
   info(autosaveFields, "SCAN")
}

record(longin, "BL45P-EA-PANDA-02:DRV:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "BL45P-EA-PANDA-02:DRV:PoolFreeBuffers")
}

record(longin, "BL45P-EA-PANDA-02:DRV:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "BL45P-EA-PANDA-02:DRV:PoolUsedBuffers")
}

record(calc, "BL45P-EA-PANDA-02:DRV:PoolUsedBuffers")
{
    field(INPA, "BL45P-EA-PANDA-02:DRV:PoolAllocBuffers NPP MS")
    field(INPB, "BL45P-EA-PANDA-02:DRV:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

record(bo, "BL45P-EA-PANDA-02:DRV:EmptyFreeList")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA02.DRV,0,1)POOL_EMPTY_FREELIST")
}

record(longin, "BL45P-EA-PANDA-02:DRV:NumQueuedArrays")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)NUM_QUEUED_ARRAYS")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:DRV:MaxSizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)MAX_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:DRV:MaxSizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)MAX_SIZE_Y")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the detector readout                     #
#  including binning, region start and size                       # 
###################################################################

record(longout, "BL45P-EA-PANDA-02:DRV:BinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA02.DRV,0,1)BIN_X")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:DRV:BinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)BIN_X")
   field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:DRV:BinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA02.DRV,0,1)BIN_Y")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:DRV:BinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)BIN_Y")
   field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:DRV:MinX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA02.DRV,0,1)MIN_X")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:DRV:MinX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)MIN_X")
   field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:DRV:MinY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA02.DRV,0,1)MIN_Y")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:DRV:MinY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)MIN_Y")
   field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:DRV:SizeX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA02.DRV,0,1)SIZE_X")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:DRV:SizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:DRV:SizeY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA02.DRV,0,1)SIZE_Y")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:DRV:SizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(bo, "BL45P-EA-PANDA-02:DRV:ReverseX")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA02.DRV,0,1)REVERSE_X")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-02:DRV:ReverseX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)REVERSE_X")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}

record(bo, "BL45P-EA-PANDA-02:DRV:ReverseY")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA02.DRV,0,1)REVERSE_Y")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-02:DRV:ReverseY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)REVERSE_Y")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(SCAN, "I/O Intr")
}


###################################################################
#  These records control the acquisition time and                 #
#  period                                                         # 
###################################################################
record(ao, "BL45P-EA-PANDA-02:DRV:AcquireTime")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PANDA02.DRV,0,1)ACQ_TIME")
   field(PREC, "3")
   field(VAL,  "1.0")
   info(autosaveFields, "VAL")
}

record(ai, "BL45P-EA-PANDA-02:DRV:AcquireTime_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA02.DRV,0,1)ACQ_TIME")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ao, "BL45P-EA-PANDA-02:DRV:AcquirePeriod")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PANDA02.DRV,0,1)ACQ_PERIOD")
   field(PREC, "3")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(ai, "BL45P-EA-PANDA-02:DRV:AcquirePeriod_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA02.DRV,0,1)ACQ_PERIOD")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ai, "BL45P-EA-PANDA-02:DRV:TimeRemaining_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA02.DRV,0,1)TIME_REMAINING")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the gain                                 # 
###################################################################
record(ao, "BL45P-EA-PANDA-02:DRV:Gain")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PANDA02.DRV,0,1)GAIN")
   field(VAL,  "1.0")
   field(PREC, "3")
   info(autosaveFields, "VAL")
}

record(ai, "BL45P-EA-PANDA-02:DRV:Gain_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA02.DRV,0,1)GAIN")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the frame type                           # 
###################################################################
record(mbbo, "BL45P-EA-PANDA-02:DRV:FrameType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA02.DRV,0,1)FRAME_TYPE")
   field(ZRST, "Normal")
   field(ZRVL, "0")
   field(ONST, "Background")
   field(ONVL, "1")
   field(TWST, "FlatField")
   field(TWVL, "2")
   field(THST, "DblCorrelation")
   field(THVL, "3")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-02:DRV:FrameType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)FRAME_TYPE")
   field(ZRST, "Normal")
   field(ZRVL, "0")
   field(ONST, "Background")
   field(ONVL, "1")
   field(TWST, "FlatField")
   field(TWVL, "2")
   field(THST, "DblCorrelation")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the acquisition mode                     # 
###################################################################
record(mbbo, "BL45P-EA-PANDA-02:DRV:ImageMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA02.DRV,0,1)IMAGE_MODE")
   field(ZRST, "Single")
   field(ZRVL, "0")
   field(ONST, "Multiple")
   field(ONVL, "1")
   field(TWST, "Continuous")
   field(TWVL, "2")
   field(VAL,  "2")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-02:DRV:ImageMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)IMAGE_MODE")
   field(ZRST, "Single")
   field(ZRVL, "0")
   field(ONST, "Multiple")
   field(ONVL, "1")
   field(TWST, "Continuous")
   field(TWVL, "2")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the trigger mode                         # 
###################################################################
record(mbbo, "BL45P-EA-PANDA-02:DRV:TriggerMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA02.DRV,0,1)TRIGGER_MODE")
   field(ZRST, "Internal")
   field(ZRVL, "0")
   field(ONST, "External")
   field(ONVL, "1")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-02:DRV:TriggerMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)TRIGGER_MODE")
   field(ZRST, "Internal")
   field(ZRVL, "0")
   field(ONST, "External")
   field(ONVL, "1")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the number of exposures and              #
#  number of images                                               # 
###################################################################
record(longout, "BL45P-EA-PANDA-02:DRV:NumExposures")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA02.DRV,0,1)NEXPOSURES")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:DRV:NumExposures_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)NEXPOSURES")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:DRV:NumExposuresCounter_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)NEXPOSURES_COUNTER")
   field(SCAN, "I/O Intr")
}
record(longout, "BL45P-EA-PANDA-02:DRV:NumImages")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA02.DRV,0,1)NIMAGES")
   field(VAL,  "1")
   info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:DRV:NumImages_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)NIMAGES")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:DRV:NumImagesCounter_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.DRV,0,1)NIMAGES_COUNTER")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are for the detector state                       # 
###################################################################

record(mbbi, "BL45P-EA-PANDA-02:DRV:DetectorState_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.DRV,0,1)STATUS")
    field(ZRST, "Idle")
    field(ZRVL, "0")
    field(ZRSV, "NO_ALARM")
    field(ONST, "Acquire")
    field(ONVL, "1")
    field(ONSV, "NO_ALARM")
    field(TWST, "Readout")
    field(TWVL, "2")
    field(TWSV, "NO_ALARM")
    field(THST, "Correct")
    field(THVL, "3")
    field(THSV, "NO_ALARM")
    field(FRST, "Saving")
    field(FRVL, "4")
    field(FRSV, "NO_ALARM")
    field(FVST, "Aborting")
    field(FVVL, "5")
    field(FVSV, "MINOR")
    field(SXST, "Error")
    field(SXVL, "6")
    field(SXSV, "MAJOR")
    field(SVST, "Waiting")
    field(SVVL, "7")
    field(SVSV, "NO_ALARM")
    field(EIST, "Initializing")
    field(EIVL, "8")
    field(EISV, "NO_ALARM")
    field(NIST, "Disconnected")
    field(NIVL, "9")
    field(NISV, "INVALID")
    field(TEST, "Aborted")
    field(TEVL, "10")
    field(TESV, "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide status information                       # 
###################################################################

# Status message.
record(waveform, "BL45P-EA-PANDA-02:DRV:StatusMessage_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA02.DRV,0,1)STATUS_MESSAGE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(waveform, "BL45P-EA-PANDA-02:DRV:StringToServer_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA02.DRV,0,1)STRING_TO_SERVER")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(waveform, "BL45P-EA-PANDA-02:DRV:StringFromServer_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA02.DRV,0,1)STRING_FROM_SERVER")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

################################################################@###
#  This record can be used to force a read of the detector status  # 
####################################################################
record(bo,"BL45P-EA-PANDA-02:DRV:ReadStatus") {
    field(DTYP,"asynInt32")
    field(OUT, "@asyn(PANDA02.DRV,0,1)READ_STATUS")
    field(VAL, "1")
    field(SCAN,"Passive")
    info(autosaveFields, "SCAN")
}

###################################################################
#  These records control the shutter                              # 
###################################################################

record(mbbo, "BL45P-EA-PANDA-02:DRV:ShutterMode")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.DRV,0,1)SHUTTER_MODE")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "EPICS PV")
    field(ONVL, "1")
    field(TWST, "Detector output")
    field(TWVL, "2")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-02:DRV:ShutterMode_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.DRV,0,1)SHUTTER_MODE")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "EPICS PV")
    field(ONVL, "1")
    field(TWST, "Camera output")
    field(TWVL, "2")
    field(SCAN, "I/O Intr")
}

record(bo, "BL45P-EA-PANDA-02:DRV:ShutterControl")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.DRV,0,1)SHUTTER_CONTROL")
    field(ZNAM, "Close")
    field(ONAM, "Open")
    field(VAL,  "0")
}

record(bi, "BL45P-EA-PANDA-02:DRV:ShutterControl_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.DRV,0,1)SHUTTER_CONTROL")
    field(ZNAM, "Close")
    field(ONAM, "Open")
    field(SCAN, "I/O Intr")
}

record(bi, "BL45P-EA-PANDA-02:DRV:ShutterStatus_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.DRV,0,1)SHUTTER_STATUS")
    field(ZNAM, "Closed")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Open")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "BL45P-EA-PANDA-02:DRV:ShutterOpenDelay")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PANDA02.DRV,0,1)SHUTTER_OPEN_DELAY")
   field(PREC, "3")
   field(VAL,  "0.0")
   info(autosaveFields, "VAL")
}

record(ai, "BL45P-EA-PANDA-02:DRV:ShutterOpenDelay_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA02.DRV,0,1)SHUTTER_OPEN_DELAY")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

record(ao, "BL45P-EA-PANDA-02:DRV:ShutterCloseDelay")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PANDA02.DRV,0,1)SHUTTER_CLOSE_DELAY")
   field(PREC, "3")
   field(VAL,  "0.0")
   info(autosaveFields, "VAL")
}

record(ai, "BL45P-EA-PANDA-02:DRV:ShutterCloseDelay_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA02.DRV,0,1)SHUTTER_CLOSE_DELAY")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

# This record changes state when the driver opens/closes an EPICS shutter
record(bi, "BL45P-EA-PANDA-02:DRV:ShutterControlEPICS")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.DRV,0,1)SHUTTER_CONTROL_EPICS")
    field(ZNAM, "Closed")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Open")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
    field(FLNK, "BL45P-EA-PANDA-02:DRV:ShutterFanout.PROC")
}

record(fanout, "BL45P-EA-PANDA-02:DRV:ShutterFanout")
{
    field(LNK1, "BL45P-EA-PANDA-02:DRV:ShutterOpenEPICS.PROC PP MS")
    field(LNK2, "BL45P-EA-PANDA-02:DRV:ShutterCloseEPICS.PROC PP MS")
}

record(calcout, "BL45P-EA-PANDA-02:DRV:ShutterOpenEPICS")
{
    field(INPA, "BL45P-EA-PANDA-02:DRV:ShutterControlEPICS.VAL NPP NMS")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "1")
    field(OUT,  "")
    info(autosaveFields, "OUT OCAL")
}

record(calcout, "BL45P-EA-PANDA-02:DRV:ShutterCloseEPICS")
{
    field(INPA, "BL45P-EA-PANDA-02:DRV:ShutterControlEPICS.VAL NPP NMS")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "0")
    field(OUT,  "")
    info(autosaveFields, "OUT OCAL")
}

record(mbbi, "BL45P-EA-PANDA-02:DRV:ShutterStatusEPICS_RBV")
{
    field(DTYP, "Raw Soft Channel")
    field(INP,  "test CP MS")
    field(ZRVL, "0")
    field(ZRST, "Closed")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "Open")
    field(ONSV, "MINOR")
    info(autosaveFields, "INP ZRVL ONVL")
}

###################################################################
#  These records control the detector temperature                 # 
###################################################################
 
record(ao, "BL45P-EA-PANDA-02:DRV:Temperature")
{
   field(PINI, "YES")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn(PANDA02.DRV,0,1)TEMPERATURE")
   field(PREC, "1")
   field(EGU,  "C")
   field(VAL,  "25.0")
   info(autosaveFields, "VAL")
}

record(ai, "BL45P-EA-PANDA-02:DRV:Temperature_RBV")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA02.DRV,0,1)TEMPERATURE")
   field(PREC, "1")
   field(EGU,  "C")
   field(SCAN, "I/O Intr")
}

record(ai, "BL45P-EA-PANDA-02:DRV:TemperatureActual")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA02.DRV,0,1)TEMPERATURE_ACTUAL")
   field(PREC, "1")
   field(EGU,  "C")
   field(SCAN, "I/O Intr")
}


###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"BL45P-EA-PANDA-02:DRV:AsynIO")
{
    field(PORT, "PANDA02.DRV")
    field(TIB2,"1")
    info("ADType", "ADDriver")
}


record(bi, "BL45P-EA-PANDA-02:DRV:CONNECTED") {
  field(DESC, "Is ADPandABlocks connected")
  field(DTYP, "asynInt32")
  field(INP, "@asyn(PANDA02.DRV,0) ISCONNECTED")
  field(ZNAM, "Not Connected")
  field(ONAM, "Connected")
  field(ZSV, "INVALID")
  field(SCAN, "I/O Intr")
}

record(bi, "BL45P-EA-PANDA-02:DRV:RESPONDING") {
  field(DESC, "Is ADPandABlocks responsive")
  field(DTYP, "asynInt32")
  field(INP, "@asyn(PANDA02.DRV,0) ISRESPONSIVE")
  field(ZNAM, "Not Responding")
  field(ONAM, "Responding")
  field(ZSV, "INVALID")
  field(SCAN, "I/O Intr")
}

record(waveform, "BL45P-EA-PANDA-02:DRV:HEADER") {
  field(DESC, "ADPandABlocks data header")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,0) HEADER")
  field(FTVL, "CHAR")
  field(NELM, "1024")
 # field(SCAN, "I/O Intr")
}

record(waveform, "BL45P-EA-PANDA-02:DRV:DATAEND") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,0) DATAEND")
  field(FTVL, "CHAR")
  field(NELM, "1024")
 # field(SCAN, "I/O Intr")
}


record(mbbo, "BL45P-EA-PANDA-02:DRV:ColorMode") {
  field(DISA, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:Gain") {
  field(DISA, "1")
}

record(ai, "BL45P-EA-PANDA-02:DRV:Gain_RBV") {
  field(DISA, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:BinX") {
  field(DISA, "1")
}

record(longin, "BL45P-EA-PANDA-02:DRV:BinX_RBV") {
  field(DISA, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:BinY") {
  field(DISA, "1")
}

record(longin, "BL45P-EA-PANDA-02:DRV:BinY_RBV") {
  field(DISA, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:MinX") {
  field(DISA, "1")
}

record(longin, "BL45P-EA-PANDA-02:DRV:MinX_RBV") {
  field(DISA, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:MinY") {
  field(DISA, "1")
}

record(longin, "BL45P-EA-PANDA-02:DRV:MinY_RBV") {
  field(DISA, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:SizeX") {
  field(DISA, "1")
}

record(longin, "BL45P-EA-PANDA-02:DRV:SizeX_RBV") {
  field(DISA, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:SizeY") {
  field(DISA, "1")
}

record(longin, "BL45P-EA-PANDA-02:DRV:SizeY_RBV") {
  field(DISA, "1")
}

record(bo, "BL45P-EA-PANDA-02:DRV:ReverseX") {
  field(DISA, "1")
}

record(bi, "BL45P-EA-PANDA-02:DRV:ReverseX_RBV") {
  field(DISA, "1")
}

record(bo, "BL45P-EA-PANDA-02:DRV:ReverseY") {
  field(DISA, "1")
}

record(bi, "BL45P-EA-PANDA-02:DRV:ReverseY_RBV") {
  field(DISA, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:AcquireTime") {
  field(DISA, "1")
}

record(ai, "BL45P-EA-PANDA-02:DRV:AcquireTime_RBV") {
  field(DISA, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:AcquirePeriod") {
  field(DISA, "1")
}

record(ai, "BL45P-EA-PANDA-02:DRV:AcquirePeriod_RBV") {
  field(DISA, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS0") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,0)POSBUS0")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS0:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,0)POSBUS0:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS0:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,0)POSBUS0:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS0:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,0)POSBUS0:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS0:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,0)POSBUS0:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS0:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,0)POSBUS0:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS0:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,0)POSBUS0:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS0:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,0)POSBUS0:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS0:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,0)POSBUS0:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS0:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,0)POSBUS0:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS0:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,0)POSBUS0:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS1") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,1)POSBUS1")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS1:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,1)POSBUS1:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS1:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,1)POSBUS1:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS1:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,1)POSBUS1:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS1:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,1)POSBUS1:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS1:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,1)POSBUS1:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS1:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,1)POSBUS1:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS1:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,1)POSBUS1:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS1:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,1)POSBUS1:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS1:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,1)POSBUS1:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS1:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,1)POSBUS1:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS2") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,2)POSBUS2")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS2:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,2)POSBUS2:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS2:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,2)POSBUS2:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS2:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,2)POSBUS2:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS2:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,2)POSBUS2:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS2:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,2)POSBUS2:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS2:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,2)POSBUS2:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS2:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,2)POSBUS2:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS2:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,2)POSBUS2:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS2:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,2)POSBUS2:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS2:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,2)POSBUS2:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS3") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,3)POSBUS3")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS3:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,3)POSBUS3:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS3:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,3)POSBUS3:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS3:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,3)POSBUS3:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS3:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,3)POSBUS3:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS3:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,3)POSBUS3:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS3:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,3)POSBUS3:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS3:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,3)POSBUS3:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS3:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,3)POSBUS3:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS3:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,3)POSBUS3:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS3:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,3)POSBUS3:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS4") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,4)POSBUS4")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS4:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,4)POSBUS4:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS4:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,4)POSBUS4:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS4:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,4)POSBUS4:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS4:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,4)POSBUS4:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS4:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,4)POSBUS4:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS4:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,4)POSBUS4:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS4:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,4)POSBUS4:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS4:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,4)POSBUS4:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS4:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,4)POSBUS4:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS4:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,4)POSBUS4:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS5") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,5)POSBUS5")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS5:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,5)POSBUS5:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS5:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,5)POSBUS5:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS5:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,5)POSBUS5:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS5:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,5)POSBUS5:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS5:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,5)POSBUS5:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS5:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,5)POSBUS5:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS5:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,5)POSBUS5:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS5:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,5)POSBUS5:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS5:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,5)POSBUS5:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS5:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,5)POSBUS5:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS6") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,6)POSBUS6")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS6:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,6)POSBUS6:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS6:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,6)POSBUS6:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS6:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,6)POSBUS6:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS6:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,6)POSBUS6:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS6:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,6)POSBUS6:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS6:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,6)POSBUS6:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS6:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,6)POSBUS6:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS6:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,6)POSBUS6:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS6:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,6)POSBUS6:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS6:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,6)POSBUS6:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS7") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,7)POSBUS7")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS7:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,7)POSBUS7:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS7:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,7)POSBUS7:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS7:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,7)POSBUS7:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS7:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,7)POSBUS7:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS7:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,7)POSBUS7:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS7:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,7)POSBUS7:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS7:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,7)POSBUS7:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS7:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,7)POSBUS7:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS7:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,7)POSBUS7:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS7:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,7)POSBUS7:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS8") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,8)POSBUS8")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS8:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,8)POSBUS8:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS8:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,8)POSBUS8:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS8:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,8)POSBUS8:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS8:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,8)POSBUS8:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS8:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,8)POSBUS8:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS8:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,8)POSBUS8:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS8:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,8)POSBUS8:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS8:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,8)POSBUS8:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS8:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,8)POSBUS8:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS8:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,8)POSBUS8:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS9") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,9)POSBUS9")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS9:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,9)POSBUS9:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS9:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,9)POSBUS9:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS9:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,9)POSBUS9:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS9:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,9)POSBUS9:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS9:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,9)POSBUS9:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS9:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,9)POSBUS9:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS9:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,9)POSBUS9:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS9:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,9)POSBUS9:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS9:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,9)POSBUS9:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS9:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,9)POSBUS9:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS10") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,10)POSBUS10")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS10:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,10)POSBUS10:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS10:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,10)POSBUS10:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS10:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,10)POSBUS10:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS10:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,10)POSBUS10:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS10:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,10)POSBUS10:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS10:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,10)POSBUS10:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS10:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,10)POSBUS10:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS10:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,10)POSBUS10:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS10:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,10)POSBUS10:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS10:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,10)POSBUS10:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS11") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,11)POSBUS11")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS11:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,11)POSBUS11:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS11:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,11)POSBUS11:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS11:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,11)POSBUS11:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS11:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,11)POSBUS11:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS11:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,11)POSBUS11:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS11:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,11)POSBUS11:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS11:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,11)POSBUS11:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS11:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,11)POSBUS11:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS11:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,11)POSBUS11:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS11:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,11)POSBUS11:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS12") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,12)POSBUS12")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS12:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,12)POSBUS12:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS12:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,12)POSBUS12:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS12:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,12)POSBUS12:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS12:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,12)POSBUS12:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS12:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,12)POSBUS12:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS12:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,12)POSBUS12:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS12:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,12)POSBUS12:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS12:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,12)POSBUS12:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS12:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,12)POSBUS12:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS12:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,12)POSBUS12:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS13") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,13)POSBUS13")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS13:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,13)POSBUS13:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS13:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,13)POSBUS13:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS13:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,13)POSBUS13:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS13:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,13)POSBUS13:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS13:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,13)POSBUS13:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS13:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,13)POSBUS13:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS13:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,13)POSBUS13:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS13:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,13)POSBUS13:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS13:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,13)POSBUS13:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS13:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,13)POSBUS13:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS14") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,14)POSBUS14")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS14:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,14)POSBUS14:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS14:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,14)POSBUS14:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS14:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,14)POSBUS14:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS14:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,14)POSBUS14:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS14:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,14)POSBUS14:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS14:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,14)POSBUS14:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS14:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,14)POSBUS14:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS14:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,14)POSBUS14:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS14:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,14)POSBUS14:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS14:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,14)POSBUS14:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS15") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,15)POSBUS15")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS15:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,15)POSBUS15:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS15:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,15)POSBUS15:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS15:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,15)POSBUS15:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS15:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,15)POSBUS15:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS15:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,15)POSBUS15:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS15:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,15)POSBUS15:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS15:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,15)POSBUS15:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS15:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,15)POSBUS15:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS15:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,15)POSBUS15:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS15:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,15)POSBUS15:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS16") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,16)POSBUS16")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS16:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,16)POSBUS16:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS16:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,16)POSBUS16:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS16:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,16)POSBUS16:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS16:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,16)POSBUS16:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS16:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,16)POSBUS16:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS16:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,16)POSBUS16:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS16:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,16)POSBUS16:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS16:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,16)POSBUS16:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS16:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,16)POSBUS16:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS16:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,16)POSBUS16:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS17") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,17)POSBUS17")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS17:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,17)POSBUS17:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS17:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,17)POSBUS17:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS17:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,17)POSBUS17:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS17:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,17)POSBUS17:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS17:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,17)POSBUS17:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS17:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,17)POSBUS17:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS17:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,17)POSBUS17:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS17:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,17)POSBUS17:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS17:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,17)POSBUS17:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS17:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,17)POSBUS17:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS18") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,18)POSBUS18")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS18:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,18)POSBUS18:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS18:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,18)POSBUS18:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS18:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,18)POSBUS18:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS18:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,18)POSBUS18:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS18:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,18)POSBUS18:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS18:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,18)POSBUS18:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS18:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,18)POSBUS18:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS18:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,18)POSBUS18:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS18:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,18)POSBUS18:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS18:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,18)POSBUS18:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS19") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,19)POSBUS19")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS19:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,19)POSBUS19:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS19:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,19)POSBUS19:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS19:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,19)POSBUS19:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS19:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,19)POSBUS19:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS19:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,19)POSBUS19:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS19:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,19)POSBUS19:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS19:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,19)POSBUS19:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS19:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,19)POSBUS19:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS19:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,19)POSBUS19:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS19:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,19)POSBUS19:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS20") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,20)POSBUS20")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS20:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,20)POSBUS20:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS20:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,20)POSBUS20:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS20:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,20)POSBUS20:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS20:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,20)POSBUS20:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS20:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,20)POSBUS20:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS20:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,20)POSBUS20:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS20:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,20)POSBUS20:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS20:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,20)POSBUS20:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS20:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,20)POSBUS20:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS20:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,20)POSBUS20:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS21") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,21)POSBUS21")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS21:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,21)POSBUS21:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS21:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,21)POSBUS21:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS21:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,21)POSBUS21:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS21:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,21)POSBUS21:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS21:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,21)POSBUS21:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS21:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,21)POSBUS21:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS21:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,21)POSBUS21:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS21:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,21)POSBUS21:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS21:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,21)POSBUS21:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS21:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,21)POSBUS21:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS22") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,22)POSBUS22")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS22:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,22)POSBUS22:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS22:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,22)POSBUS22:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS22:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,22)POSBUS22:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS22:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,22)POSBUS22:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS22:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,22)POSBUS22:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS22:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,22)POSBUS22:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS22:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,22)POSBUS22:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS22:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,22)POSBUS22:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS22:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,22)POSBUS22:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS22:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,22)POSBUS22:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS23") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,23)POSBUS23")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS23:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,23)POSBUS23:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS23:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,23)POSBUS23:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS23:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,23)POSBUS23:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS23:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,23)POSBUS23:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS23:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,23)POSBUS23:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS23:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,23)POSBUS23:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS23:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,23)POSBUS23:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS23:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,23)POSBUS23:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS23:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,23)POSBUS23:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS23:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,23)POSBUS23:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS24") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,24)POSBUS24")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS24:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,24)POSBUS24:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS24:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,24)POSBUS24:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS24:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,24)POSBUS24:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS24:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,24)POSBUS24:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS24:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,24)POSBUS24:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS24:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,24)POSBUS24:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS24:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,24)POSBUS24:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS24:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,24)POSBUS24:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS24:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,24)POSBUS24:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS24:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,24)POSBUS24:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS25") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,25)POSBUS25")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS25:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,25)POSBUS25:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS25:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,25)POSBUS25:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS25:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,25)POSBUS25:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS25:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,25)POSBUS25:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS25:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,25)POSBUS25:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS25:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,25)POSBUS25:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS25:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,25)POSBUS25:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS25:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,25)POSBUS25:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS25:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,25)POSBUS25:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS25:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,25)POSBUS25:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS26") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,26)POSBUS26")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS26:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,26)POSBUS26:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS26:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,26)POSBUS26:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS26:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,26)POSBUS26:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS26:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,26)POSBUS26:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS26:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,26)POSBUS26:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS26:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,26)POSBUS26:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS26:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,26)POSBUS26:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS26:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,26)POSBUS26:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS26:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,26)POSBUS26:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS26:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,26)POSBUS26:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS27") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,27)POSBUS27")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS27:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,27)POSBUS27:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS27:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,27)POSBUS27:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS27:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,27)POSBUS27:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS27:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,27)POSBUS27:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS27:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,27)POSBUS27:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS27:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,27)POSBUS27:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS27:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,27)POSBUS27:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS27:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,27)POSBUS27:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS27:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,27)POSBUS27:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS27:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,27)POSBUS27:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS28") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,28)POSBUS28")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS28:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,28)POSBUS28:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS28:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,28)POSBUS28:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS28:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,28)POSBUS28:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS28:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,28)POSBUS28:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS28:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,28)POSBUS28:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS28:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,28)POSBUS28:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS28:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,28)POSBUS28:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS28:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,28)POSBUS28:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS28:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,28)POSBUS28:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS28:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,28)POSBUS28:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS29") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,29)POSBUS29")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS29:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,29)POSBUS29:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS29:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,29)POSBUS29:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS29:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,29)POSBUS29:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS29:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,29)POSBUS29:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS29:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,29)POSBUS29:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS29:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,29)POSBUS29:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS29:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,29)POSBUS29:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS29:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,29)POSBUS29:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS29:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,29)POSBUS29:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS29:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,29)POSBUS29:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS30") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,30)POSBUS30")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS30:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,30)POSBUS30:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS30:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,30)POSBUS30:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS30:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,30)POSBUS30:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS30:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,30)POSBUS30:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS30:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,30)POSBUS30:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS30:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,30)POSBUS30:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS30:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,30)POSBUS30:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS30:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,30)POSBUS30:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS30:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,30)POSBUS30:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS30:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,30)POSBUS30:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-01:DRV:POSBUS31") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA01.DRV,31)POSBUS31")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-01:DRV:POSBUS31:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,31)POSBUS31:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS31:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,31)POSBUS31:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS31:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,31)POSBUS31:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:POSBUS31:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,31)POSBUS31:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:POSBUS31:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,31)POSBUS31:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS31:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,31)POSBUS31:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS31:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,31)POSBUS31:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-01:DRV:POSBUS31:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,31)POSBUS31:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-01:DRV:POSBUS31:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,31)POSBUS31:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-01:DRV:POSBUS31:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,31)POSBUS31:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS0") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,0)POSBUS0")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS0:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,0)POSBUS0:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS0:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,0)POSBUS0:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS0:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,0)POSBUS0:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS0:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,0)POSBUS0:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS0:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,0)POSBUS0:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS0:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,0)POSBUS0:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS0:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,0)POSBUS0:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS0:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,0)POSBUS0:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS0:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,0)POSBUS0:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS0:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,0)POSBUS0:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS1") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,1)POSBUS1")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS1:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,1)POSBUS1:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS1:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,1)POSBUS1:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS1:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,1)POSBUS1:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS1:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,1)POSBUS1:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS1:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,1)POSBUS1:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS1:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,1)POSBUS1:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS1:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,1)POSBUS1:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS1:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,1)POSBUS1:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS1:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,1)POSBUS1:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS1:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,1)POSBUS1:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS2") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,2)POSBUS2")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS2:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,2)POSBUS2:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS2:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,2)POSBUS2:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS2:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,2)POSBUS2:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS2:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,2)POSBUS2:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS2:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,2)POSBUS2:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS2:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,2)POSBUS2:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS2:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,2)POSBUS2:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS2:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,2)POSBUS2:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS2:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,2)POSBUS2:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS2:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,2)POSBUS2:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS3") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,3)POSBUS3")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS3:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,3)POSBUS3:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS3:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,3)POSBUS3:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS3:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,3)POSBUS3:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS3:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,3)POSBUS3:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS3:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,3)POSBUS3:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS3:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,3)POSBUS3:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS3:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,3)POSBUS3:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS3:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,3)POSBUS3:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS3:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,3)POSBUS3:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS3:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,3)POSBUS3:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS4") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,4)POSBUS4")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS4:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,4)POSBUS4:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS4:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,4)POSBUS4:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS4:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,4)POSBUS4:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS4:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,4)POSBUS4:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS4:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,4)POSBUS4:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS4:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,4)POSBUS4:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS4:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,4)POSBUS4:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS4:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,4)POSBUS4:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS4:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,4)POSBUS4:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS4:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,4)POSBUS4:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS5") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,5)POSBUS5")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS5:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,5)POSBUS5:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS5:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,5)POSBUS5:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS5:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,5)POSBUS5:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS5:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,5)POSBUS5:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS5:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,5)POSBUS5:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS5:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,5)POSBUS5:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS5:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,5)POSBUS5:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS5:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,5)POSBUS5:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS5:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,5)POSBUS5:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS5:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,5)POSBUS5:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS6") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,6)POSBUS6")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS6:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,6)POSBUS6:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS6:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,6)POSBUS6:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS6:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,6)POSBUS6:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS6:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,6)POSBUS6:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS6:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,6)POSBUS6:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS6:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,6)POSBUS6:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS6:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,6)POSBUS6:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS6:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,6)POSBUS6:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS6:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,6)POSBUS6:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS6:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,6)POSBUS6:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS7") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,7)POSBUS7")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS7:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,7)POSBUS7:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS7:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,7)POSBUS7:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS7:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,7)POSBUS7:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS7:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,7)POSBUS7:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS7:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,7)POSBUS7:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS7:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,7)POSBUS7:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS7:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,7)POSBUS7:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS7:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,7)POSBUS7:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS7:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,7)POSBUS7:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS7:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,7)POSBUS7:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS8") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,8)POSBUS8")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS8:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,8)POSBUS8:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS8:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,8)POSBUS8:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS8:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,8)POSBUS8:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS8:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,8)POSBUS8:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS8:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,8)POSBUS8:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS8:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,8)POSBUS8:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS8:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,8)POSBUS8:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS8:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,8)POSBUS8:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS8:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,8)POSBUS8:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS8:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,8)POSBUS8:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS9") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,9)POSBUS9")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS9:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,9)POSBUS9:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS9:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,9)POSBUS9:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS9:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,9)POSBUS9:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS9:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,9)POSBUS9:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS9:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,9)POSBUS9:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS9:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,9)POSBUS9:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS9:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,9)POSBUS9:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS9:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,9)POSBUS9:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS9:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,9)POSBUS9:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS9:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,9)POSBUS9:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS10") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,10)POSBUS10")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS10:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,10)POSBUS10:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS10:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,10)POSBUS10:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS10:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,10)POSBUS10:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS10:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,10)POSBUS10:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS10:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,10)POSBUS10:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS10:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,10)POSBUS10:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS10:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,10)POSBUS10:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS10:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,10)POSBUS10:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS10:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,10)POSBUS10:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS10:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,10)POSBUS10:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS11") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,11)POSBUS11")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS11:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,11)POSBUS11:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS11:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,11)POSBUS11:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS11:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,11)POSBUS11:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS11:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,11)POSBUS11:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS11:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,11)POSBUS11:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS11:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,11)POSBUS11:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS11:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,11)POSBUS11:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS11:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,11)POSBUS11:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS11:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,11)POSBUS11:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS11:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,11)POSBUS11:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS12") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,12)POSBUS12")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS12:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,12)POSBUS12:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS12:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,12)POSBUS12:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS12:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,12)POSBUS12:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS12:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,12)POSBUS12:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS12:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,12)POSBUS12:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS12:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,12)POSBUS12:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS12:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,12)POSBUS12:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS12:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,12)POSBUS12:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS12:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,12)POSBUS12:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS12:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,12)POSBUS12:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS13") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,13)POSBUS13")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS13:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,13)POSBUS13:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS13:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,13)POSBUS13:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS13:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,13)POSBUS13:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS13:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,13)POSBUS13:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS13:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,13)POSBUS13:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS13:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,13)POSBUS13:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS13:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,13)POSBUS13:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS13:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,13)POSBUS13:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS13:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,13)POSBUS13:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS13:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,13)POSBUS13:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS14") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,14)POSBUS14")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS14:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,14)POSBUS14:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS14:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,14)POSBUS14:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS14:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,14)POSBUS14:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS14:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,14)POSBUS14:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS14:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,14)POSBUS14:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS14:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,14)POSBUS14:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS14:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,14)POSBUS14:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS14:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,14)POSBUS14:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS14:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,14)POSBUS14:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS14:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,14)POSBUS14:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS15") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,15)POSBUS15")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS15:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,15)POSBUS15:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS15:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,15)POSBUS15:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS15:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,15)POSBUS15:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS15:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,15)POSBUS15:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS15:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,15)POSBUS15:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS15:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,15)POSBUS15:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS15:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,15)POSBUS15:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS15:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,15)POSBUS15:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS15:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,15)POSBUS15:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS15:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,15)POSBUS15:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS16") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,16)POSBUS16")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS16:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,16)POSBUS16:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS16:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,16)POSBUS16:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS16:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,16)POSBUS16:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS16:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,16)POSBUS16:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS16:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,16)POSBUS16:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS16:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,16)POSBUS16:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS16:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,16)POSBUS16:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS16:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,16)POSBUS16:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS16:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,16)POSBUS16:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS16:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,16)POSBUS16:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS17") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,17)POSBUS17")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS17:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,17)POSBUS17:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS17:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,17)POSBUS17:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS17:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,17)POSBUS17:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS17:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,17)POSBUS17:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS17:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,17)POSBUS17:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS17:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,17)POSBUS17:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS17:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,17)POSBUS17:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS17:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,17)POSBUS17:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS17:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,17)POSBUS17:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS17:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,17)POSBUS17:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS18") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,18)POSBUS18")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS18:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,18)POSBUS18:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS18:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,18)POSBUS18:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS18:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,18)POSBUS18:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS18:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,18)POSBUS18:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS18:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,18)POSBUS18:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS18:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,18)POSBUS18:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS18:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,18)POSBUS18:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS18:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,18)POSBUS18:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS18:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,18)POSBUS18:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS18:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,18)POSBUS18:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS19") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,19)POSBUS19")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS19:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,19)POSBUS19:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS19:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,19)POSBUS19:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS19:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,19)POSBUS19:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS19:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,19)POSBUS19:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS19:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,19)POSBUS19:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS19:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,19)POSBUS19:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS19:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,19)POSBUS19:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS19:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,19)POSBUS19:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS19:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,19)POSBUS19:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS19:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,19)POSBUS19:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS20") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,20)POSBUS20")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS20:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,20)POSBUS20:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS20:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,20)POSBUS20:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS20:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,20)POSBUS20:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS20:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,20)POSBUS20:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS20:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,20)POSBUS20:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS20:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,20)POSBUS20:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS20:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,20)POSBUS20:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS20:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,20)POSBUS20:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS20:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,20)POSBUS20:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS20:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,20)POSBUS20:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS21") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,21)POSBUS21")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS21:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,21)POSBUS21:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS21:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,21)POSBUS21:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS21:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,21)POSBUS21:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS21:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,21)POSBUS21:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS21:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,21)POSBUS21:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS21:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,21)POSBUS21:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS21:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,21)POSBUS21:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS21:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,21)POSBUS21:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS21:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,21)POSBUS21:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS21:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,21)POSBUS21:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS22") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,22)POSBUS22")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS22:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,22)POSBUS22:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS22:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,22)POSBUS22:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS22:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,22)POSBUS22:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS22:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,22)POSBUS22:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS22:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,22)POSBUS22:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS22:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,22)POSBUS22:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS22:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,22)POSBUS22:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS22:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,22)POSBUS22:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS22:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,22)POSBUS22:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS22:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,22)POSBUS22:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS23") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,23)POSBUS23")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS23:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,23)POSBUS23:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS23:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,23)POSBUS23:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS23:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,23)POSBUS23:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS23:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,23)POSBUS23:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS23:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,23)POSBUS23:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS23:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,23)POSBUS23:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS23:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,23)POSBUS23:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS23:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,23)POSBUS23:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS23:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,23)POSBUS23:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS23:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,23)POSBUS23:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS24") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,24)POSBUS24")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS24:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,24)POSBUS24:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS24:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,24)POSBUS24:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS24:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,24)POSBUS24:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS24:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,24)POSBUS24:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS24:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,24)POSBUS24:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS24:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,24)POSBUS24:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS24:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,24)POSBUS24:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS24:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,24)POSBUS24:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS24:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,24)POSBUS24:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS24:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,24)POSBUS24:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS25") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,25)POSBUS25")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS25:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,25)POSBUS25:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS25:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,25)POSBUS25:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS25:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,25)POSBUS25:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS25:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,25)POSBUS25:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS25:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,25)POSBUS25:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS25:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,25)POSBUS25:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS25:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,25)POSBUS25:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS25:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,25)POSBUS25:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS25:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,25)POSBUS25:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS25:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,25)POSBUS25:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS26") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,26)POSBUS26")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS26:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,26)POSBUS26:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS26:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,26)POSBUS26:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS26:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,26)POSBUS26:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS26:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,26)POSBUS26:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS26:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,26)POSBUS26:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS26:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,26)POSBUS26:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS26:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,26)POSBUS26:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS26:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,26)POSBUS26:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS26:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,26)POSBUS26:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS26:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,26)POSBUS26:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS27") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,27)POSBUS27")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS27:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,27)POSBUS27:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS27:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,27)POSBUS27:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS27:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,27)POSBUS27:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS27:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,27)POSBUS27:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS27:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,27)POSBUS27:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS27:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,27)POSBUS27:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS27:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,27)POSBUS27:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS27:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,27)POSBUS27:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS27:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,27)POSBUS27:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS27:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,27)POSBUS27:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS28") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,28)POSBUS28")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS28:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,28)POSBUS28:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS28:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,28)POSBUS28:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS28:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,28)POSBUS28:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS28:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,28)POSBUS28:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS28:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,28)POSBUS28:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS28:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,28)POSBUS28:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS28:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,28)POSBUS28:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS28:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,28)POSBUS28:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS28:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,28)POSBUS28:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS28:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,28)POSBUS28:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS29") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,29)POSBUS29")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS29:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,29)POSBUS29:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS29:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,29)POSBUS29:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS29:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,29)POSBUS29:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS29:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,29)POSBUS29:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS29:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,29)POSBUS29:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS29:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,29)POSBUS29:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS29:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,29)POSBUS29:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS29:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,29)POSBUS29:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS29:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,29)POSBUS29:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS29:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,29)POSBUS29:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS30") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,30)POSBUS30")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS30:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,30)POSBUS30:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS30:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,30)POSBUS30:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS30:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,30)POSBUS30:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS30:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,30)POSBUS30:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS30:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,30)POSBUS30:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS30:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,30)POSBUS30:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS30:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,30)POSBUS30:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS30:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,30)POSBUS30:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS30:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,30)POSBUS30:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS30:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,30)POSBUS30:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksPosBus.template
#
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index
#====================================================================#

record(stringin, "BL45P-EA-PANDA-02:DRV:POSBUS31") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn(PANDA02.DRV,31)POSBUS31")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "BL45P-EA-PANDA-02:DRV:POSBUS31:CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,31)POSBUS31:CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS31:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,31)POSBUS31:SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS31:OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,31)POSBUS31:OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:POSBUS31:UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,31)POSBUS31:UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:POSBUS31:VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,31)POSBUS31:VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS31:UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,31)POSBUS31:UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS31:SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,31)POSBUS31:SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "BL45P-EA-PANDA-02:DRV:POSBUS31:CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,31)POSBUS31:CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "BL45P-EA-PANDA-02:DRV:POSBUS31:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,31)POSBUS31:SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringout, "BL45P-EA-PANDA-02:DRV:POSBUS31:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,31)POSBUS31:MOTORNAME")
  info(asyn:READBACK, "1")
}
#====================================================================#
# Template file: ADPandABlocksEnc.template
#
# Macros:
# % macro, MOTOR, pv of motor record
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, PORT, asyn port
# % macro, ENC_IND, index for motor
# % macro, DIR, motor direction + for positive - for negative
# % macro, MULT, scale factor multiply
# % macro, READONLY, Should screen be read-only
# % macro, HOMESETTLE, Delay after home for calibrating motor position
#====================================================================#


record(calcout, "BL45P-EA-PANDA-01:DRV:INENC1:SCALECALC") {
  field(CALC, "(B=0?A:-A)*(C>0?C:1)*D")
  field(INPA, "BL45P-MO-CHOP-01:HOR.ERES CP")
  field(INPB, "BL45P-MO-CHOP-01:HOR.DIR CP")
  field(INPC, "BL45P-MO-CHOP-01:HOR:SCALE CP")
  field(INPD, "+0.000043")
  field(OUT,  "BL45P-EA-PANDA-01:DRV:INENC1:SCALE PP")
  field(PREC, "4")
}

record(calcout, "BL45P-EA-PANDA-01:DRV:INENC1:OFFCALC") {
  field(CALC, "A")
  field(INPA, "BL45P-MO-CHOP-01:HOR.OFF CP")
  field(OUT,  "BL45P-EA-PANDA-01:DRV:INENC1:OFF PP")
  field(PREC, "4")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:INENC1:UNITSCALC") {
  field(OUT,  "BL45P-EA-PANDA-01:DRV:INENC1:UNITS PP")
  field(DOL, "BL45P-MO-CHOP-01:HOR.EGU CP")
  field(OMSL, "closed_loop")
}

record(calcout, "BL45P-EA-PANDA-01:DRV:INENC1:ONHOMED") {
  field(DESC, "Trigger seq when motor has been homed")
  field(CALC, "A=0")
  field(INPA, "BL45P-MO-CHOP-01:HOR:HOMING CP")
  field(OOPT, "Transition To Non-zero")
  field(OUT, "BL45P-EA-PANDA-01:DRV:INENC1:ONENABLE.PROC")
  field(VAL, "1")
}

record(seq, "BL45P-EA-PANDA-01:DRV:INENC1:ONENABLE") {
  field(DESC, "Calibrate pos after home with delay")
  field(DOL1, "1")
  field(LNK1, "BL45P-EA-PANDA-01:DRV:INENC1:SETPOSCALC.PROC PP")
  field(DLY1, "5")
}

# % archiver 10 Monitor
record(calcout, "BL45P-EA-PANDA-01:DRV:INENC1:SETPOSCALC") {
  field(CALC, "A*(B>0?B:1)*C")
  field(INPA, "BL45P-MO-CHOP-01:HOR.REP") #WRITES TO THE MOTOR RECORD VAL IN COUNTS INSTEAD OF :RBV
  field(INPB, "BL45P-MO-CHOP-01:HOR:SCALE")
  field(INPC, "+1")
  field(OUT, "BL45P-EA-PANDA-01:DRV:INENC1:SETPOS PP")
}

record(longout, "BL45P-EA-PANDA-01:DRV:INENC1:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,0)INENC1:SETPOS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:INENC1:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,0)INENC1:SCALE")
}

record(ao, "BL45P-EA-PANDA-01:DRV:INENC1:OFF") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,0)INENC1:OFF")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:INENC1:UNITS") {
  field(DESC, "INENC units")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,0)INENC1:UNITS")
}

# Set embedded screen type to read-only
record(longout, "BL45P-EA-PANDA-01:DRV:INENC1:SCREENTYPE") {
  field(DESC, "INENC screen type")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,0)INENC1:SCREENTYPE")
  field(VAL, "1")
  field(PINI, "YES")
}

# Trigger manual calibration of encoder position
record(longout, "BL45P-EA-PANDA-01:DRV:INENC1:CALIBRATE") {
  field(DESC, "Trigger encoder calibration")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,0)INENC1:CALIBRATE")
  field(FLNK, "BL45P-EA-PANDA-01:DRV:INENC1:SETPOSCALC.PROC PP")
  info(asyn:READBACK, "1")
 }

 # Underlying motor name
record (stringout, "BL45P-EA-PANDA-01:DRV:INENC1:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,0)INENC1:MOTORNAME")
  field(VAL, "BL45P-MO-CHOP-01:HOR")
  field(PINI, "YES")
}#====================================================================#
# Template file: ADPandABlocksEnc.template
#
# Macros:
# % macro, MOTOR, pv of motor record
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, PORT, asyn port
# % macro, ENC_IND, index for motor
# % macro, DIR, motor direction + for positive - for negative
# % macro, MULT, scale factor multiply
# % macro, READONLY, Should screen be read-only
# % macro, HOMESETTLE, Delay after home for calibrating motor position
#====================================================================#


record(calcout, "BL45P-EA-PANDA-01:DRV:INENC4:SCALECALC") {
  field(CALC, "(B=0?A:-A)*(C>0?C:1)*D")
  field(INPA, "BL45P-MO-CHOP-01:VER.ERES CP")
  field(INPB, "BL45P-MO-CHOP-01:VER.DIR CP")
  field(INPC, "BL45P-MO-CHOP-01:VER:SCALE CP")
  field(INPD, "+0.000687")
  field(OUT,  "BL45P-EA-PANDA-01:DRV:INENC4:SCALE PP")
  field(PREC, "4")
}

record(calcout, "BL45P-EA-PANDA-01:DRV:INENC4:OFFCALC") {
  field(CALC, "A")
  field(INPA, "BL45P-MO-CHOP-01:VER.OFF CP")
  field(OUT,  "BL45P-EA-PANDA-01:DRV:INENC4:OFF PP")
  field(PREC, "4")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:INENC4:UNITSCALC") {
  field(OUT,  "BL45P-EA-PANDA-01:DRV:INENC4:UNITS PP")
  field(DOL, "BL45P-MO-CHOP-01:VER.EGU CP")
  field(OMSL, "closed_loop")
}

record(calcout, "BL45P-EA-PANDA-01:DRV:INENC4:ONHOMED") {
  field(DESC, "Trigger seq when motor has been homed")
  field(CALC, "A=0")
  field(INPA, "BL45P-MO-CHOP-01:VER:HOMING CP")
  field(OOPT, "Transition To Non-zero")
  field(OUT, "BL45P-EA-PANDA-01:DRV:INENC4:ONENABLE.PROC")
  field(VAL, "1")
}

record(seq, "BL45P-EA-PANDA-01:DRV:INENC4:ONENABLE") {
  field(DESC, "Calibrate pos after home with delay")
  field(DOL1, "1")
  field(LNK1, "BL45P-EA-PANDA-01:DRV:INENC4:SETPOSCALC.PROC PP")
  field(DLY1, "5")
}

# % archiver 10 Monitor
record(calcout, "BL45P-EA-PANDA-01:DRV:INENC4:SETPOSCALC") {
  field(CALC, "A*(B>0?B:1)*C")
  field(INPA, "BL45P-MO-CHOP-01:VER.REP") #WRITES TO THE MOTOR RECORD VAL IN COUNTS INSTEAD OF :RBV
  field(INPB, "BL45P-MO-CHOP-01:VER:SCALE")
  field(INPC, "+1")
  field(OUT, "BL45P-EA-PANDA-01:DRV:INENC4:SETPOS PP")
}

record(longout, "BL45P-EA-PANDA-01:DRV:INENC4:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,0)INENC4:SETPOS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-01:DRV:INENC4:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,0)INENC4:SCALE")
}

record(ao, "BL45P-EA-PANDA-01:DRV:INENC4:OFF") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA01.DRV,0)INENC4:OFF")
}

record(stringout, "BL45P-EA-PANDA-01:DRV:INENC4:UNITS") {
  field(DESC, "INENC units")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,0)INENC4:UNITS")
}

# Set embedded screen type to read-only
record(longout, "BL45P-EA-PANDA-01:DRV:INENC4:SCREENTYPE") {
  field(DESC, "INENC screen type")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,0)INENC4:SCREENTYPE")
  field(VAL, "1")
  field(PINI, "YES")
}

# Trigger manual calibration of encoder position
record(longout, "BL45P-EA-PANDA-01:DRV:INENC4:CALIBRATE") {
  field(DESC, "Trigger encoder calibration")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA01.DRV,0)INENC4:CALIBRATE")
  field(FLNK, "BL45P-EA-PANDA-01:DRV:INENC4:SETPOSCALC.PROC PP")
  info(asyn:READBACK, "1")
 }

 # Underlying motor name
record (stringout, "BL45P-EA-PANDA-01:DRV:INENC4:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA01.DRV,0)INENC4:MOTORNAME")
  field(VAL, "BL45P-MO-CHOP-01:VER")
  field(PINI, "YES")
}#====================================================================#
# Template file: ADPandABlocksEnc.template
#
# Macros:
# % macro, MOTOR, pv of motor record
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, PORT, asyn port
# % macro, ENC_IND, index for motor
# % macro, DIR, motor direction + for positive - for negative
# % macro, MULT, scale factor multiply
# % macro, READONLY, Should screen be read-only
# % macro, HOMESETTLE, Delay after home for calibrating motor position
#====================================================================#


record(calcout, "BL45P-EA-PANDA-02:DRV:INENC1:SCALECALC") {
  field(CALC, "(B=0?A:-A)*(C>0?C:1)*D")
  field(INPA, "BL45P-MO-STAGE-01:X.ERES CP")
  field(INPB, "BL45P-MO-STAGE-01:X.DIR CP")
  field(INPC, "BL45P-MO-STAGE-01:X:SCALE CP")
  field(INPD, "-0.0001")
  field(OUT,  "BL45P-EA-PANDA-02:DRV:INENC1:SCALE PP")
  field(PREC, "4")
}

record(calcout, "BL45P-EA-PANDA-02:DRV:INENC1:OFFCALC") {
  field(CALC, "A")
  field(INPA, "BL45P-MO-STAGE-01:X.OFF CP")
  field(OUT,  "BL45P-EA-PANDA-02:DRV:INENC1:OFF PP")
  field(PREC, "4")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:INENC1:UNITSCALC") {
  field(OUT,  "BL45P-EA-PANDA-02:DRV:INENC1:UNITS PP")
  field(DOL, "BL45P-MO-STAGE-01:X.EGU CP")
  field(OMSL, "closed_loop")
}

record(calcout, "BL45P-EA-PANDA-02:DRV:INENC1:ONHOMED") {
  field(DESC, "Trigger seq when motor has been homed")
  field(CALC, "A=0")
  field(INPA, "BL45P-MO-STAGE-01:X:HOMING CP")
  field(OOPT, "Transition To Non-zero")
  field(OUT, "BL45P-EA-PANDA-02:DRV:INENC1:ONENABLE.PROC")
  field(VAL, "1")
}

record(seq, "BL45P-EA-PANDA-02:DRV:INENC1:ONENABLE") {
  field(DESC, "Calibrate pos after home with delay")
  field(DOL1, "1")
  field(LNK1, "BL45P-EA-PANDA-02:DRV:INENC1:SETPOSCALC.PROC PP")
  field(DLY1, "5")
}

# % archiver 10 Monitor
record(calcout, "BL45P-EA-PANDA-02:DRV:INENC1:SETPOSCALC") {
  field(CALC, "A*(B>0?B:1)*C")
  field(INPA, "BL45P-MO-STAGE-01:X.REP") #WRITES TO THE MOTOR RECORD VAL IN COUNTS INSTEAD OF :RBV
  field(INPB, "BL45P-MO-STAGE-01:X:SCALE")
  field(INPC, "-1")
  field(OUT, "BL45P-EA-PANDA-02:DRV:INENC1:SETPOS PP")
}

record(longout, "BL45P-EA-PANDA-02:DRV:INENC1:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC1:SETPOS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:INENC1:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC1:SCALE")
}

record(ao, "BL45P-EA-PANDA-02:DRV:INENC1:OFF") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC1:OFF")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:INENC1:UNITS") {
  field(DESC, "INENC units")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC1:UNITS")
}

# Set embedded screen type to read-only
record(longout, "BL45P-EA-PANDA-02:DRV:INENC1:SCREENTYPE") {
  field(DESC, "INENC screen type")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC1:SCREENTYPE")
  field(VAL, "1")
  field(PINI, "YES")
}

# Trigger manual calibration of encoder position
record(longout, "BL45P-EA-PANDA-02:DRV:INENC1:CALIBRATE") {
  field(DESC, "Trigger encoder calibration")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC1:CALIBRATE")
  field(FLNK, "BL45P-EA-PANDA-02:DRV:INENC1:SETPOSCALC.PROC PP")
  info(asyn:READBACK, "1")
 }

 # Underlying motor name
record (stringout, "BL45P-EA-PANDA-02:DRV:INENC1:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC1:MOTORNAME")
  field(VAL, "BL45P-MO-STAGE-01:X")
  field(PINI, "YES")
}#====================================================================#
# Template file: ADPandABlocksEnc.template
#
# Macros:
# % macro, MOTOR, pv of motor record
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, PORT, asyn port
# % macro, ENC_IND, index for motor
# % macro, DIR, motor direction + for positive - for negative
# % macro, MULT, scale factor multiply
# % macro, READONLY, Should screen be read-only
# % macro, HOMESETTLE, Delay after home for calibrating motor position
#====================================================================#


record(calcout, "BL45P-EA-PANDA-02:DRV:INENC2:SCALECALC") {
  field(CALC, "(B=0?A:-A)*(C>0?C:1)*D")
  field(INPA, "BL45P-MO-STAGE-01:Y.ERES CP")
  field(INPB, "BL45P-MO-STAGE-01:Y.DIR CP")
  field(INPC, "BL45P-MO-STAGE-01:Y:SCALE CP")
  field(INPD, "+0.0005")
  field(OUT,  "BL45P-EA-PANDA-02:DRV:INENC2:SCALE PP")
  field(PREC, "4")
}

record(calcout, "BL45P-EA-PANDA-02:DRV:INENC2:OFFCALC") {
  field(CALC, "A")
  field(INPA, "BL45P-MO-STAGE-01:Y.OFF CP")
  field(OUT,  "BL45P-EA-PANDA-02:DRV:INENC2:OFF PP")
  field(PREC, "4")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:INENC2:UNITSCALC") {
  field(OUT,  "BL45P-EA-PANDA-02:DRV:INENC2:UNITS PP")
  field(DOL, "BL45P-MO-STAGE-01:Y.EGU CP")
  field(OMSL, "closed_loop")
}

record(calcout, "BL45P-EA-PANDA-02:DRV:INENC2:ONHOMED") {
  field(DESC, "Trigger seq when motor has been homed")
  field(CALC, "A=0")
  field(INPA, "BL45P-MO-STAGE-01:Y:HOMING CP")
  field(OOPT, "Transition To Non-zero")
  field(OUT, "BL45P-EA-PANDA-02:DRV:INENC2:ONENABLE.PROC")
  field(VAL, "1")
}

record(seq, "BL45P-EA-PANDA-02:DRV:INENC2:ONENABLE") {
  field(DESC, "Calibrate pos after home with delay")
  field(DOL1, "1")
  field(LNK1, "BL45P-EA-PANDA-02:DRV:INENC2:SETPOSCALC.PROC PP")
  field(DLY1, "5")
}

# % archiver 10 Monitor
record(calcout, "BL45P-EA-PANDA-02:DRV:INENC2:SETPOSCALC") {
  field(CALC, "A*(B>0?B:1)*C")
  field(INPA, "BL45P-MO-STAGE-01:Y.REP") #WRITES TO THE MOTOR RECORD VAL IN COUNTS INSTEAD OF :RBV
  field(INPB, "BL45P-MO-STAGE-01:Y:SCALE")
  field(INPC, "+1")
  field(OUT, "BL45P-EA-PANDA-02:DRV:INENC2:SETPOS PP")
}

record(longout, "BL45P-EA-PANDA-02:DRV:INENC2:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC2:SETPOS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:INENC2:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC2:SCALE")
}

record(ao, "BL45P-EA-PANDA-02:DRV:INENC2:OFF") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC2:OFF")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:INENC2:UNITS") {
  field(DESC, "INENC units")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC2:UNITS")
}

# Set embedded screen type to read-only
record(longout, "BL45P-EA-PANDA-02:DRV:INENC2:SCREENTYPE") {
  field(DESC, "INENC screen type")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC2:SCREENTYPE")
  field(VAL, "1")
  field(PINI, "YES")
}

# Trigger manual calibration of encoder position
record(longout, "BL45P-EA-PANDA-02:DRV:INENC2:CALIBRATE") {
  field(DESC, "Trigger encoder calibration")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC2:CALIBRATE")
  field(FLNK, "BL45P-EA-PANDA-02:DRV:INENC2:SETPOSCALC.PROC PP")
  info(asyn:READBACK, "1")
 }

 # Underlying motor name
record (stringout, "BL45P-EA-PANDA-02:DRV:INENC2:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC2:MOTORNAME")
  field(VAL, "BL45P-MO-STAGE-01:Y")
  field(PINI, "YES")
}#====================================================================#
# Template file: ADPandABlocksEnc.template
#
# Macros:
# % macro, MOTOR, pv of motor record
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, PORT, asyn port
# % macro, ENC_IND, index for motor
# % macro, DIR, motor direction + for positive - for negative
# % macro, MULT, scale factor multiply
# % macro, READONLY, Should screen be read-only
# % macro, HOMESETTLE, Delay after home for calibrating motor position
#====================================================================#


record(calcout, "BL45P-EA-PANDA-02:DRV:INENC3:SCALECALC") {
  field(CALC, "(B=0?A:-A)*(C>0?C:1)*D")
  field(INPA, "BL45P-MO-STAGE-01:Z.ERES CP")
  field(INPB, "BL45P-MO-STAGE-01:Z.DIR CP")
  field(INPC, "BL45P-MO-STAGE-01:Z:SCALE CP")
  field(INPD, "+0.0005")
  field(OUT,  "BL45P-EA-PANDA-02:DRV:INENC3:SCALE PP")
  field(PREC, "4")
}

record(calcout, "BL45P-EA-PANDA-02:DRV:INENC3:OFFCALC") {
  field(CALC, "A")
  field(INPA, "BL45P-MO-STAGE-01:Z.OFF CP")
  field(OUT,  "BL45P-EA-PANDA-02:DRV:INENC3:OFF PP")
  field(PREC, "4")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:INENC3:UNITSCALC") {
  field(OUT,  "BL45P-EA-PANDA-02:DRV:INENC3:UNITS PP")
  field(DOL, "BL45P-MO-STAGE-01:Z.EGU CP")
  field(OMSL, "closed_loop")
}

record(calcout, "BL45P-EA-PANDA-02:DRV:INENC3:ONHOMED") {
  field(DESC, "Trigger seq when motor has been homed")
  field(CALC, "A=0")
  field(INPA, "BL45P-MO-STAGE-01:Z:HOMING CP")
  field(OOPT, "Transition To Non-zero")
  field(OUT, "BL45P-EA-PANDA-02:DRV:INENC3:ONENABLE.PROC")
  field(VAL, "1")
}

record(seq, "BL45P-EA-PANDA-02:DRV:INENC3:ONENABLE") {
  field(DESC, "Calibrate pos after home with delay")
  field(DOL1, "1")
  field(LNK1, "BL45P-EA-PANDA-02:DRV:INENC3:SETPOSCALC.PROC PP")
  field(DLY1, "5")
}

# % archiver 10 Monitor
record(calcout, "BL45P-EA-PANDA-02:DRV:INENC3:SETPOSCALC") {
  field(CALC, "A*(B>0?B:1)*C")
  field(INPA, "BL45P-MO-STAGE-01:Z.REP") #WRITES TO THE MOTOR RECORD VAL IN COUNTS INSTEAD OF :RBV
  field(INPB, "BL45P-MO-STAGE-01:Z:SCALE")
  field(INPC, "+1")
  field(OUT, "BL45P-EA-PANDA-02:DRV:INENC3:SETPOS PP")
}

record(longout, "BL45P-EA-PANDA-02:DRV:INENC3:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC3:SETPOS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:INENC3:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC3:SCALE")
}

record(ao, "BL45P-EA-PANDA-02:DRV:INENC3:OFF") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC3:OFF")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:INENC3:UNITS") {
  field(DESC, "INENC units")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC3:UNITS")
}

# Set embedded screen type to read-only
record(longout, "BL45P-EA-PANDA-02:DRV:INENC3:SCREENTYPE") {
  field(DESC, "INENC screen type")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC3:SCREENTYPE")
  field(VAL, "1")
  field(PINI, "YES")
}

# Trigger manual calibration of encoder position
record(longout, "BL45P-EA-PANDA-02:DRV:INENC3:CALIBRATE") {
  field(DESC, "Trigger encoder calibration")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC3:CALIBRATE")
  field(FLNK, "BL45P-EA-PANDA-02:DRV:INENC3:SETPOSCALC.PROC PP")
  info(asyn:READBACK, "1")
 }

 # Underlying motor name
record (stringout, "BL45P-EA-PANDA-02:DRV:INENC3:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC3:MOTORNAME")
  field(VAL, "BL45P-MO-STAGE-01:Z")
  field(PINI, "YES")
}#====================================================================#
# Template file: ADPandABlocksEnc.template
#
# Macros:
# % macro, MOTOR, pv of motor record
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, PORT, asyn port
# % macro, ENC_IND, index for motor
# % macro, DIR, motor direction + for positive - for negative
# % macro, MULT, scale factor multiply
# % macro, READONLY, Should screen be read-only
# % macro, HOMESETTLE, Delay after home for calibrating motor position
#====================================================================#


record(calcout, "BL45P-EA-PANDA-02:DRV:INENC4:SCALECALC") {
  field(CALC, "(B=0?A:-A)*(C>0?C:1)*D")
  field(INPA, "BL45P-MO-SAMP-01:THETA.ERES CP")
  field(INPB, "BL45P-MO-SAMP-01:THETA.DIR CP")
  field(INPC, "BL45P-MO-SAMP-01:THETA:SCALE CP")
  field(INPD, "-0.036")
  field(OUT,  "BL45P-EA-PANDA-02:DRV:INENC4:SCALE PP")
  field(PREC, "4")
}

record(calcout, "BL45P-EA-PANDA-02:DRV:INENC4:OFFCALC") {
  field(CALC, "A")
  field(INPA, "BL45P-MO-SAMP-01:THETA.OFF CP")
  field(OUT,  "BL45P-EA-PANDA-02:DRV:INENC4:OFF PP")
  field(PREC, "4")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:INENC4:UNITSCALC") {
  field(OUT,  "BL45P-EA-PANDA-02:DRV:INENC4:UNITS PP")
  field(DOL, "BL45P-MO-SAMP-01:THETA.EGU CP")
  field(OMSL, "closed_loop")
}

record(calcout, "BL45P-EA-PANDA-02:DRV:INENC4:ONHOMED") {
  field(DESC, "Trigger seq when motor has been homed")
  field(CALC, "A=0")
  field(INPA, "BL45P-MO-SAMP-01:THETA:HOMING CP")
  field(OOPT, "Transition To Non-zero")
  field(OUT, "BL45P-EA-PANDA-02:DRV:INENC4:ONENABLE.PROC")
  field(VAL, "1")
}

record(seq, "BL45P-EA-PANDA-02:DRV:INENC4:ONENABLE") {
  field(DESC, "Calibrate pos after home with delay")
  field(DOL1, "1")
  field(LNK1, "BL45P-EA-PANDA-02:DRV:INENC4:SETPOSCALC.PROC PP")
  field(DLY1, "5")
}

# % archiver 10 Monitor
record(calcout, "BL45P-EA-PANDA-02:DRV:INENC4:SETPOSCALC") {
  field(CALC, "A*(B>0?B:1)*C")
  field(INPA, "BL45P-MO-SAMP-01:THETA.REP") #WRITES TO THE MOTOR RECORD VAL IN COUNTS INSTEAD OF :RBV
  field(INPB, "BL45P-MO-SAMP-01:THETA:SCALE")
  field(INPC, "-1")
  field(OUT, "BL45P-EA-PANDA-02:DRV:INENC4:SETPOS PP")
}

record(longout, "BL45P-EA-PANDA-02:DRV:INENC4:SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC4:SETPOS")
  info(asyn:READBACK, "1")
}

record(ao, "BL45P-EA-PANDA-02:DRV:INENC4:SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC4:SCALE")
}

record(ao, "BL45P-EA-PANDA-02:DRV:INENC4:OFF") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC4:OFF")
}

record(stringout, "BL45P-EA-PANDA-02:DRV:INENC4:UNITS") {
  field(DESC, "INENC units")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC4:UNITS")
}

# Set embedded screen type to read-only
record(longout, "BL45P-EA-PANDA-02:DRV:INENC4:SCREENTYPE") {
  field(DESC, "INENC screen type")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC4:SCREENTYPE")
  field(VAL, "1")
  field(PINI, "YES")
}

# Trigger manual calibration of encoder position
record(longout, "BL45P-EA-PANDA-02:DRV:INENC4:CALIBRATE") {
  field(DESC, "Trigger encoder calibration")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC4:CALIBRATE")
  field(FLNK, "BL45P-EA-PANDA-02:DRV:INENC4:SETPOSCALC.PROC PP")
  info(asyn:READBACK, "1")
 }

 # Underlying motor name
record (stringout, "BL45P-EA-PANDA-02:DRV:INENC4:MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn(PANDA02.DRV,0)INENC4:MOTORNAME")
  field(VAL, "BL45P-MO-SAMP-01:THETA")
  field(PINI, "YES")
}#% macro, P, Device Prefix
#% macro, R, Device Suffix
#% macro, PORT, Asyn Port name
#% macro, ADDR, Asyn Port address
#% macro, TIMEOUT, Asyn timeout
#% macro, SCANRATE, Chosen Scan Rate for cpu intensive PVs

# This associates the template with an edm screen
# % gui, PANDA01.POS, edmtab, NDPosPlugin.edl, P=BL45P-EA-PANDA-01,R=:POS:

#=================================================================#
# Template file: NDPluginBase.template
# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

# Macros:
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, TIMEOUT, Timeout
# % macro, ADDR, Asyn Port address
# % macro, NDARRAY_PORT, Input Array Port
# % macro, NDARRAY_ADDR, Input Array Address
# % macro, ENABLED, Plugin Enabled at startup?
# % macro, SCANRATE, Chosen Scan Rate for cpu intensive PVs

#=================================================================#
# Template file: NDArrayBase.template
# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

###################################################################
#  This record contains the version of ADCore                     #
###################################################################

record(stringin, "BL45P-EA-PANDA-01:POS:ADCoreVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.POS,0,1)ADCORE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the version of the driver or plugin       #
###################################################################

record(stringin, "BL45P-EA-PANDA-01:POS:DriverVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.POS,0,1)DRIVER_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the asyn port name of this detector       #
###################################################################

record(stringin, "BL45P-EA-PANDA-01:POS:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.POS,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records contain basic information about the detector     # 
###################################################################

record(stringin, "BL45P-EA-PANDA-01:POS:Manufacturer_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.POS,0,1)MANUFACTURER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-01:POS:Model_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.POS,0,1)MODEL")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-01:POS:SerialNumber_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.POS,0,1)SERIAL_NUMBER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-01:POS:SDKVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.POS,0,1)SDK_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-01:POS:FirmwareVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.POS,0,1)FIRMWARE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control acquisition start and stop               #
###################################################################

record(bo, "BL45P-EA-PANDA-01:POS:Acquire") {
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(PANDA01.POS,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ONAM, "Acquire")
   field(VAL,  "0")
   field(FLNK, "BL45P-EA-PANDA-01:POS:SetAcquireBusy")
   info(asyn:READBACK, "1")
}

record(bi, "BL45P-EA-PANDA-01:POS:Acquire_RBV") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(PANDA01.POS,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "BL45P-EA-PANDA-01:POS:SetAcquireBusy")
{
    field(INPA, "BL45P-EA-PANDA-01:POS:Acquire NPP")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(OUT,  "BL45P-EA-PANDA-01:POS:AcquireBusy PP")
}

record(busy, "BL45P-EA-PANDA-01:POS:AcquireBusy") {
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(VAL,  "0")
}

record(bi, "BL45P-EA-PANDA-01:POS:AcquireBusyCB") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(PANDA01.POS,0,1)ACQUIRE_BUSY")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "BL45P-EA-PANDA-01:POS:ClearAcquireBusy") {
    field(INPA, "BL45P-EA-PANDA-01:POS:AcquireBusyCB CP")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(OUT,  "BL45P-EA-PANDA-01:POS:AcquireBusy PP")
}

record(bo, "BL45P-EA-PANDA-01:POS:WaitForPlugins") {
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(PANDA01.POS,0,1)WAIT_FOR_PLUGINS")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
}

###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longout, "BL45P-EA-PANDA-01:POS:NDimensions")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.POS,0,1)ARRAY_NDIMENSIONS")
}

record(longin, "BL45P-EA-PANDA-01:POS:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform records
record(waveform, "BL45P-EA-PANDA-01:POS:Dimensions")
{
    field(DTYP, "asynInt32ArrayOut")
    field(INP,  "@asyn(PANDA01.POS,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "BL45P-EA-PANDA-01:POS:Dim0SA")
}

record(subArray, "BL45P-EA-PANDA-01:POS:Dim0SA")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "BL45P-EA-PANDA-01:POS:ArraySize0")
}

record(longin, "BL45P-EA-PANDA-01:POS:ArraySize0")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dim0SA")
    field(FLNK, "BL45P-EA-PANDA-01:POS:Dim1SA")
}

record(subArray, "BL45P-EA-PANDA-01:POS:Dim1SA")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "BL45P-EA-PANDA-01:POS:ArraySize1")
}

record(longin, "BL45P-EA-PANDA-01:POS:ArraySize1")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dim1SA")
    field(FLNK, "BL45P-EA-PANDA-01:POS:Dim2SA")
}

record(subArray, "BL45P-EA-PANDA-01:POS:Dim2SA")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "BL45P-EA-PANDA-01:POS:ArraySize2")
}

record(longin, "BL45P-EA-PANDA-01:POS:ArraySize2")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dim2SA")
    field(FLNK, "BL45P-EA-PANDA-01:POS:Dim3SA")
}

record(subArray, "BL45P-EA-PANDA-01:POS:Dim3SA")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "BL45P-EA-PANDA-01:POS:ArraySize3")
}

record(longin, "BL45P-EA-PANDA-01:POS:ArraySize3")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dim3SA")
    field(FLNK, "BL45P-EA-PANDA-01:POS:Dim4SA")
}

record(subArray, "BL45P-EA-PANDA-01:POS:Dim4SA")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "BL45P-EA-PANDA-01:POS:ArraySize4")
}

record(longin, "BL45P-EA-PANDA-01:POS:ArraySize4")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dim4SA")
    field(FLNK, "BL45P-EA-PANDA-01:POS:Dim5SA")
}

record(subArray, "BL45P-EA-PANDA-01:POS:Dim5SA")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "BL45P-EA-PANDA-01:POS:ArraySize5")
}

record(longin, "BL45P-EA-PANDA-01:POS:ArraySize5")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dim5SA")
    field(FLNK, "BL45P-EA-PANDA-01:POS:Dim6SA")
}

record(subArray, "BL45P-EA-PANDA-01:POS:Dim6SA")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "BL45P-EA-PANDA-01:POS:ArraySize6")
}

record(longin, "BL45P-EA-PANDA-01:POS:ArraySize6")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dim6SA")
    field(FLNK, "BL45P-EA-PANDA-01:POS:Dim7SA")
}

record(subArray, "BL45P-EA-PANDA-01:POS:Dim7SA")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "BL45P-EA-PANDA-01:POS:ArraySize7")
}

record(longin, "BL45P-EA-PANDA-01:POS:ArraySize7")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dim7SA")
    field(FLNK, "BL45P-EA-PANDA-01:POS:Dim8SA")
}

record(subArray, "BL45P-EA-PANDA-01:POS:Dim8SA")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "BL45P-EA-PANDA-01:POS:ArraySize8")
}

record(longin, "BL45P-EA-PANDA-01:POS:ArraySize8")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dim8SA")
    field(FLNK, "BL45P-EA-PANDA-01:POS:Dim9SA")
}

record(subArray, "BL45P-EA-PANDA-01:POS:Dim9SA")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "BL45P-EA-PANDA-01:POS:ArraySize9")
}

record(longin, "BL45P-EA-PANDA-01:POS:ArraySize9")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dim9SA")
}


record(waveform, "BL45P-EA-PANDA-01:POS:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(PANDA01.POS,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "BL45P-EA-PANDA-01:POS:Dim0SA_RBV")
    field(SCAN, "I/O Intr")
}

record(subArray, "BL45P-EA-PANDA-01:POS:Dim0SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "BL45P-EA-PANDA-01:POS:ArraySize0_RBV")
}

record(longin, "BL45P-EA-PANDA-01:POS:ArraySize0_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dim0SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:POS:Dim1SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:POS:Dim1SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "BL45P-EA-PANDA-01:POS:ArraySize1_RBV")
}

record(longin, "BL45P-EA-PANDA-01:POS:ArraySize1_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dim1SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:POS:Dim2SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:POS:Dim2SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "BL45P-EA-PANDA-01:POS:ArraySize2_RBV")
}

record(longin, "BL45P-EA-PANDA-01:POS:ArraySize2_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dim2SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:POS:Dim3SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:POS:Dim3SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "BL45P-EA-PANDA-01:POS:ArraySize3_RBV")
}

record(longin, "BL45P-EA-PANDA-01:POS:ArraySize3_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dim3SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:POS:Dim4SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:POS:Dim4SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "BL45P-EA-PANDA-01:POS:ArraySize4_RBV")
}

record(longin, "BL45P-EA-PANDA-01:POS:ArraySize4_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dim4SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:POS:Dim5SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:POS:Dim5SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "BL45P-EA-PANDA-01:POS:ArraySize5_RBV")
}

record(longin, "BL45P-EA-PANDA-01:POS:ArraySize5_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dim5SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:POS:Dim6SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:POS:Dim6SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "BL45P-EA-PANDA-01:POS:ArraySize6_RBV")
}

record(longin, "BL45P-EA-PANDA-01:POS:ArraySize6_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dim6SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:POS:Dim7SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:POS:Dim7SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "BL45P-EA-PANDA-01:POS:ArraySize7_RBV")
}

record(longin, "BL45P-EA-PANDA-01:POS:ArraySize7_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dim7SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:POS:Dim8SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:POS:Dim8SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "BL45P-EA-PANDA-01:POS:ArraySize8_RBV")
}

record(longin, "BL45P-EA-PANDA-01:POS:ArraySize8_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dim8SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:POS:Dim9SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:POS:Dim9SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "BL45P-EA-PANDA-01:POS:ArraySize9_RBV")
}

record(longin, "BL45P-EA-PANDA-01:POS:ArraySize9_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:POS:Dim9SA_RBV")
}


record(mbbi, "BL45P-EA-PANDA-01:POS:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.POS,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:POS:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.POS,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:POS:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.POS,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:POS:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.POS,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:POS:ArraySize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.POS,0,1)ARRAY_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records have information on the compression              # 
###################################################################
record(stringin, "BL45P-EA-PANDA-01:POS:Codec_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.POS,0,1)CODEC")
   field(VAL,  "")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:POS:CompressedSize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.POS,0,1)COMPRESSED_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the data type                            # 
###################################################################

record(mbbo, "BL45P-EA-PANDA-01:POS:DataType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA01.POS,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-01:POS:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.POS,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the color mode                           #
#  These choices must agree with NDColorMode_t in NDArray.h       # 
###################################################################

record(mbbo, "BL45P-EA-PANDA-01:POS:ColorMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA01.POS,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-01:POS:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.POS,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamps of the array     #
###################################################################
record(longin, "BL45P-EA-PANDA-01:POS:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "BL45P-EA-PANDA-01:POS:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA01.POS,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:POS:EpicsTSSec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0,1)EPICS_TS_SEC")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:POS:EpicsTSNsec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0,1)EPICS_TS_NSEC")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "BL45P-EA-PANDA-01:POS:ArrayCounter")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.POS,0,1)ARRAY_COUNTER")
}

record(longin, "BL45P-EA-PANDA-01:POS:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# Updated rate calculation to use a smoothing factor w/ guard against negative values
record(calc, "BL45P-EA-PANDA-01:POS:ArrayRate_RBV")
{
    field(INPA, "BL45P-EA-PANDA-01:POS:ArrayRate_RBV.LB NPP NMS")   # Previous counter value
    field(INPB, "BL45P-EA-PANDA-01:POS:ArrayCounter_RBV NPP NMS")   # Current counter value
    field(INPC, "1.0")                                # Delta time in seconds
    field(INPD, "BL45P-EA-PANDA-01:POS:ArrayRate_RBV.VAL NPP NMS")  # Previous rate
    field(INPE, "0.0")                 # Smoothing factor
    field(CALC, "(D*E)/C+MAX(0,B-A)*(1-E)/C")
    field(PREC, "2" )
    field(EGU,  "Hz" )
    field(SCAN, "1 second")
}

###################################################################
#  These records control NDArray callacks                         # 
###################################################################
record(bo, "BL45P-EA-PANDA-01:POS:ArrayCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.POS,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(VAL, "1")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-01:POS:ArrayCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains macro definitions for the attributes      # 
###################################################################

record(waveform, "BL45P-EA-PANDA-01:POS:NDAttributesMacros")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(PANDA01.POS,0,1)ND_ATTRIBUTES_MACROS")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record is the name of a file defining attributes          # 
###################################################################

record(waveform, "BL45P-EA-PANDA-01:POS:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(PANDA01.POS,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record defines the status of reading attributes file      # 
###################################################################

record(mbbi, "BL45P-EA-PANDA-01:POS:NDAttributesStatus")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0,1)ND_ATTRIBUTES_STATUS")
    field(ZRVL, "0")
    field(ZRST, "Attributes file OK")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "File not found")
    field(ONSV, "MINOR")
    field(TWVL, "2")
    field(TWST, "XML syntax error")
    field(TWSV, "MAJOR")
    field(THVL, "3")
    field(THST, "Macro substitution error")
    field(THSV, "MAJOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
###################################################################

record(ai, "BL45P-EA-PANDA-01:POS:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA01.POS,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "BL45P-EA-PANDA-01:POS:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA01.POS,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "BL45P-EA-PANDA-01:POS:PoolAllocBuffers")
   info(autosaveFields, "SCAN")
}

record(longin, "BL45P-EA-PANDA-01:POS:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.POS,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "BL45P-EA-PANDA-01:POS:PoolFreeBuffers")
}

record(longin, "BL45P-EA-PANDA-01:POS:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.POS,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "BL45P-EA-PANDA-01:POS:PoolUsedBuffers")
}

record(calc, "BL45P-EA-PANDA-01:POS:PoolUsedBuffers")
{
    field(INPA, "BL45P-EA-PANDA-01:POS:PoolAllocBuffers NPP MS")
    field(INPB, "BL45P-EA-PANDA-01:POS:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

record(bo, "BL45P-EA-PANDA-01:POS:EmptyFreeList")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA01.POS,0,1)POOL_EMPTY_FREELIST")
}

record(longin, "BL45P-EA-PANDA-01:POS:NumQueuedArrays")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.POS,0,1)NUM_QUEUED_ARRAYS")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "BL45P-EA-PANDA-01:POS:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.POS,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "BL45P-EA-PANDA-01:POS:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(PANDA01.POS,0,1)NDARRAY_PORT")
    field(VAL,  "PANDA01.DRV")
    info(autosaveFields, "VAL")
}

record(stringin, "BL45P-EA-PANDA-01:POS:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA01.POS,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:POS:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.POS,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:POS:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "BL45P-EA-PANDA-01:POS:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.POS,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "1")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-01:POS:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "BL45P-EA-PANDA-01:POS:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(PANDA01.POS,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
    field(DRVL, "0")
    info(autosaveFields, "VAL")
}

record(ai, "BL45P-EA-PANDA-01:POS:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA01.POS,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(ao, "BL45P-EA-PANDA-01:POS:MaxArrayRate")
{
    field(DTYP, "Soft Channel")
    field(OUT,  "BL45P-EA-PANDA-01:POS:MaxArrayRate_COUT PP")
    field(EGU,  "Hz")
    field(PREC, "3")
    field(VAL,  "0.0")
    info(autosaveFields, "VAL")
}

record(calcout, "BL45P-EA-PANDA-01:POS:MaxArrayRate_COUT")
{
    field(INPA, "BL45P-EA-PANDA-01:POS:MaxArrayRate")
    field(CALC, "A=0?0:1.0/A")
    field(OUT,  "BL45P-EA-PANDA-01:POS:MinCallbackTime PP")
}

record(calc, "BL45P-EA-PANDA-01:POS:MaxArrayRate_RBV")
{
    field(INPA, "BL45P-EA-PANDA-01:POS:MinCallbackTime_RBV CP")
    field(CALC, "A=0?0:1.0/A")
    field(EGU,  "Hz")
    field(PREC, "3")
    field(SCAN, "Passive")
}

record(ao, "BL45P-EA-PANDA-01:POS:MaxByteRate")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(PANDA01.POS,0,1)MAX_BYTE_RATE")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
    field(DRVL, "0")
    info(autosaveFields, "VAL")
}

record(ai, "BL45P-EA-PANDA-01:POS:MaxByteRate_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA01.POS,0,1)MAX_BYTE_RATE")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the last execution time of the plugin     #
###################################################################
record(ai, "BL45P-EA-PANDA-01:POS:ExecutionTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA01.POS,0,1)EXECUTION_TIME")
    field(EGU,  "ms")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record requests that the plugin execute again with the    #
#  same NDArray                                                   #
###################################################################
record(bo, "BL45P-EA-PANDA-01:POS:ProcessPlugin")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.POS,0,1)PROCESS_PLUGIN")
    field(VAL,  "1")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "BL45P-EA-PANDA-01:POS:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.POS,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-01:POS:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


record(longout, "BL45P-EA-PANDA-01:POS:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.POS,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "BL45P-EA-PANDA-01:POS:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:POS:QueueSize")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.POS,0,1)QUEUE_SIZE")
    field(PINI, "YES")
}

record(longin, "BL45P-EA-PANDA-01:POS:QueueSize_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0,1)QUEUE_SIZE")
    field(FLNK, "BL45P-EA-PANDA-01:POS:QueueFreeLow")
    field(SCAN, "I/O Intr")
}

record(calcout, "BL45P-EA-PANDA-01:POS:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "BL45P-EA-PANDA-01:POS:QueueSize")
    field(OUT,  "BL45P-EA-PANDA-01:POS:QueueFree.LOW")
    field(FLNK, "BL45P-EA-PANDA-01:POS:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "BL45P-EA-PANDA-01:POS:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "BL45P-EA-PANDA-01:POS:QueueSize")
   field(OUT,  "BL45P-EA-PANDA-01:POS:QueueUse.HIGH")
   field(FLNK, "BL45P-EA-PANDA-01:POS:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "BL45P-EA-PANDA-01:POS:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "BL45P-EA-PANDA-01:POS:QueueSize")
   field(OUT,  "BL45P-EA-PANDA-01:POS:QueueUse.HIHI")
}

record(longin, "BL45P-EA-PANDA-01:POS:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "BL45P-EA-PANDA-01:POS:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "BL45P-EA-PANDA-01:POS:QueueSize")
    field(INPB, "BL45P-EA-PANDA-01:POS:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}

record(longout, "BL45P-EA-PANDA-01:POS:NumThreads")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.POS,0,1)NUM_THREADS")
    field(VAL,  "1")
    field(PINI, "YES")
}

record(longin, "BL45P-EA-PANDA-01:POS:NumThreads_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0,1)NUM_THREADS")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:POS:MaxThreads_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0,1)MAX_THREADS")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control output array sorting                     #
###################################################################
record(mbbo, "BL45P-EA-PANDA-01:POS:SortMode") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.POS,0,1)SORT_MODE")
    field(ZRVL, "0")
    field(ZRST, "Unsorted")
    field(ONVL, "1")
    field(ONST, "Sorted")
}

record(mbbi, "BL45P-EA-PANDA-01:POS:SortMode_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0,1)SORT_MODE")
    field(ZRVL, "0")
    field(ZRST, "Unsorted")
    field(ONVL, "1")
    field(ONST, "Sorted")
    field(SCAN, "I/O Intr")
}

record(ao, "BL45P-EA-PANDA-01:POS:SortTime") {
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(PANDA01.POS,0,1)SORT_TIME")
    field(PREC, "3")
    field(VAL, "0.1")
}

record(ai, "BL45P-EA-PANDA-01:POS:SortTime_RBV") {
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA01.POS,0,1)SORT_TIME")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:POS:SortSize")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.POS,0,1)SORT_SIZE")
    field(VAL,  "20")
    field(PINI, "YES")
}

record(longin, "BL45P-EA-PANDA-01:POS:SortSize_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0,1)SORT_SIZE")
    field(FLNK, "BL45P-EA-PANDA-01:POS:SortFreeLow")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:POS:SortFree") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0,1)SORT_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

record(calcout, "BL45P-EA-PANDA-01:POS:SortFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "BL45P-EA-PANDA-01:POS:SortSize")
    field(OUT,  "BL45P-EA-PANDA-01:POS:SortFree.LOW")
}

record(longout, "BL45P-EA-PANDA-01:POS:DroppedOutputArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.POS,0,1)DROPPED_OUTPUT_ARRAYS")
    field(VAL,  "0")
}

record(longin, "BL45P-EA-PANDA-01:POS:DroppedOutputArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0,1)DROPPED_OUTPUT_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:POS:DisorderedArrays")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.POS,0,1)DISORDERED_ARRAYS")
    field(PINI, "YES")
}

record(longin, "BL45P-EA-PANDA-01:POS:DisorderedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0,1)DISORDERED_ARRAYS")
    field(SCAN, "I/O Intr")
}



###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"BL45P-EA-PANDA-01:POS:AsynIO")
{
    field(PORT, "PANDA01.POS")
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}


# File path.
record(waveform, "BL45P-EA-PANDA-01:POS:Filename")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(PANDA01.POS,0,1)NDPos_Filename")
    field(FTVL, "CHAR")
    field(NELM, "1000000")
}

record(waveform, "BL45P-EA-PANDA-01:POS:Filename_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA01.POS,0)NDPos_Filename")
    field(FTVL, "CHAR")
    field(NELM, "1000000")
    field(SCAN, "I/O Intr")
}

record(bi, "BL45P-EA-PANDA-01:POS:FileValid_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0)NDPos_FileValid")
    field(ZNAM, "No")
    field(ZSV,  "MAJOR")
    field(ONAM, "Yes")
    field(OSV,  "NO_ALARM")
    field(SCAN, "I/O Intr")
}

record(busy, "BL45P-EA-PANDA-01:POS:Running")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.POS,0)NDPos_Running")
    field(ZNAM, "Idle")
    field(ONAM, "Running")
    field(VAL,  "0")
}

record(bi, "BL45P-EA-PANDA-01:POS:Running_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0)NDPos_Running")
    field(ZNAM, "Idle")
    field(ONAM, "Running")
    field(SCAN, "I/O Intr")
}

record(bo, "BL45P-EA-PANDA-01:POS:Reset")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.POS,0)NDPos_Restart")
}

record(bo, "BL45P-EA-PANDA-01:POS:Delete")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.POS,0)NDPos_Delete")
}

record(bo, "BL45P-EA-PANDA-01:POS:Mode")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.POS,0)NDPos_Mode")
    field(ZNAM, "Discard")
    field(ONAM, "Keep")
}

record(bi, "BL45P-EA-PANDA-01:POS:Mode_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0)NDPos_Mode")
    field(ZNAM, "Discard")
    field(ONAM, "Keep")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:POS:Qty_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0)NDPos_CurrentQty")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:POS:Index_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0)NDPos_CurrentIndex")
    field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-01:POS:Position_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA01.POS,0)NDPos_CurrentPos")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:POS:Missing")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.POS,0)NDPos_MissingFrames")
    field(PINI, "NO")
}

record(longin, "BL45P-EA-PANDA-01:POS:Missing_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0)NDPos_MissingFrames")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:POS:Duplicate")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.POS,0)NDPos_DuplicateFrames")
    field(PINI, "NO")
}

record(longin, "BL45P-EA-PANDA-01:POS:Duplicate_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0)NDPos_DuplicateFrames")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:POS:ExpectedID_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0)NDPos_ExpectedID")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-01:POS:IDName")
{
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(PANDA01.POS,0)NDPos_IDName")
    field(PINI, "NO")
}

record(stringin, "BL45P-EA-PANDA-01:POS:IDName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA01.POS,0)NDPos_IDName")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:POS:IDStart")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.POS,0)NDPos_IDStart")
    field(PINI, "NO")
}

record(longin, "BL45P-EA-PANDA-01:POS:IDStart_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0)NDPos_IDStart")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:POS:IDDifference")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.POS,0)NDPos_IDDifference")
    field(PINI, "NO")
}

record(longin, "BL45P-EA-PANDA-01:POS:IDDifference_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.POS,0)NDPos_IDDifference")
    field(SCAN, "I/O Intr")
}

#% macro, P, Device Prefix
#% macro, R, Device Suffix
#% macro, PORT, Asyn Port name
#% macro, ADDR, Asyn Port address
#% macro, TIMEOUT, Asyn timeout
#% macro, SCANRATE, Chosen Scan Rate for cpu intensive PVs

# This associates the template with an edm screen
# % gui, PANDA02.POS, edmtab, NDPosPlugin.edl, P=BL45P-EA-PANDA-02,R=:POS:

#=================================================================#
# Template file: NDPluginBase.template
# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

# Macros:
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, TIMEOUT, Timeout
# % macro, ADDR, Asyn Port address
# % macro, NDARRAY_PORT, Input Array Port
# % macro, NDARRAY_ADDR, Input Array Address
# % macro, ENABLED, Plugin Enabled at startup?
# % macro, SCANRATE, Chosen Scan Rate for cpu intensive PVs

#=================================================================#
# Template file: NDArrayBase.template
# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

###################################################################
#  This record contains the version of ADCore                     #
###################################################################

record(stringin, "BL45P-EA-PANDA-02:POS:ADCoreVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.POS,0,1)ADCORE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the version of the driver or plugin       #
###################################################################

record(stringin, "BL45P-EA-PANDA-02:POS:DriverVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.POS,0,1)DRIVER_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the asyn port name of this detector       #
###################################################################

record(stringin, "BL45P-EA-PANDA-02:POS:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.POS,0,1)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records contain basic information about the detector     # 
###################################################################

record(stringin, "BL45P-EA-PANDA-02:POS:Manufacturer_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.POS,0,1)MANUFACTURER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-02:POS:Model_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.POS,0,1)MODEL")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-02:POS:SerialNumber_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.POS,0,1)SERIAL_NUMBER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-02:POS:SDKVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.POS,0,1)SDK_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-02:POS:FirmwareVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.POS,0,1)FIRMWARE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control acquisition start and stop               #
###################################################################

record(bo, "BL45P-EA-PANDA-02:POS:Acquire") {
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(PANDA02.POS,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ONAM, "Acquire")
   field(VAL,  "0")
   field(FLNK, "BL45P-EA-PANDA-02:POS:SetAcquireBusy")
   info(asyn:READBACK, "1")
}

record(bi, "BL45P-EA-PANDA-02:POS:Acquire_RBV") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(PANDA02.POS,0,1)ACQUIRE")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "BL45P-EA-PANDA-02:POS:SetAcquireBusy")
{
    field(INPA, "BL45P-EA-PANDA-02:POS:Acquire NPP")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(OUT,  "BL45P-EA-PANDA-02:POS:AcquireBusy PP")
}

record(busy, "BL45P-EA-PANDA-02:POS:AcquireBusy") {
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(VAL,  "0")
}

record(bi, "BL45P-EA-PANDA-02:POS:AcquireBusyCB") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(PANDA02.POS,0,1)ACQUIRE_BUSY")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "BL45P-EA-PANDA-02:POS:ClearAcquireBusy") {
    field(INPA, "BL45P-EA-PANDA-02:POS:AcquireBusyCB CP")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(OUT,  "BL45P-EA-PANDA-02:POS:AcquireBusy PP")
}

record(bo, "BL45P-EA-PANDA-02:POS:WaitForPlugins") {
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(PANDA02.POS,0,1)WAIT_FOR_PLUGINS")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
}

###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longout, "BL45P-EA-PANDA-02:POS:NDimensions")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.POS,0,1)ARRAY_NDIMENSIONS")
}

record(longin, "BL45P-EA-PANDA-02:POS:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0,1)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform records
record(waveform, "BL45P-EA-PANDA-02:POS:Dimensions")
{
    field(DTYP, "asynInt32ArrayOut")
    field(INP,  "@asyn(PANDA02.POS,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "BL45P-EA-PANDA-02:POS:Dim0SA")
}

record(subArray, "BL45P-EA-PANDA-02:POS:Dim0SA")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "BL45P-EA-PANDA-02:POS:ArraySize0")
}

record(longin, "BL45P-EA-PANDA-02:POS:ArraySize0")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dim0SA")
    field(FLNK, "BL45P-EA-PANDA-02:POS:Dim1SA")
}

record(subArray, "BL45P-EA-PANDA-02:POS:Dim1SA")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "BL45P-EA-PANDA-02:POS:ArraySize1")
}

record(longin, "BL45P-EA-PANDA-02:POS:ArraySize1")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dim1SA")
    field(FLNK, "BL45P-EA-PANDA-02:POS:Dim2SA")
}

record(subArray, "BL45P-EA-PANDA-02:POS:Dim2SA")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "BL45P-EA-PANDA-02:POS:ArraySize2")
}

record(longin, "BL45P-EA-PANDA-02:POS:ArraySize2")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dim2SA")
    field(FLNK, "BL45P-EA-PANDA-02:POS:Dim3SA")
}

record(subArray, "BL45P-EA-PANDA-02:POS:Dim3SA")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "BL45P-EA-PANDA-02:POS:ArraySize3")
}

record(longin, "BL45P-EA-PANDA-02:POS:ArraySize3")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dim3SA")
    field(FLNK, "BL45P-EA-PANDA-02:POS:Dim4SA")
}

record(subArray, "BL45P-EA-PANDA-02:POS:Dim4SA")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "BL45P-EA-PANDA-02:POS:ArraySize4")
}

record(longin, "BL45P-EA-PANDA-02:POS:ArraySize4")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dim4SA")
    field(FLNK, "BL45P-EA-PANDA-02:POS:Dim5SA")
}

record(subArray, "BL45P-EA-PANDA-02:POS:Dim5SA")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "BL45P-EA-PANDA-02:POS:ArraySize5")
}

record(longin, "BL45P-EA-PANDA-02:POS:ArraySize5")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dim5SA")
    field(FLNK, "BL45P-EA-PANDA-02:POS:Dim6SA")
}

record(subArray, "BL45P-EA-PANDA-02:POS:Dim6SA")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "BL45P-EA-PANDA-02:POS:ArraySize6")
}

record(longin, "BL45P-EA-PANDA-02:POS:ArraySize6")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dim6SA")
    field(FLNK, "BL45P-EA-PANDA-02:POS:Dim7SA")
}

record(subArray, "BL45P-EA-PANDA-02:POS:Dim7SA")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "BL45P-EA-PANDA-02:POS:ArraySize7")
}

record(longin, "BL45P-EA-PANDA-02:POS:ArraySize7")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dim7SA")
    field(FLNK, "BL45P-EA-PANDA-02:POS:Dim8SA")
}

record(subArray, "BL45P-EA-PANDA-02:POS:Dim8SA")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "BL45P-EA-PANDA-02:POS:ArraySize8")
}

record(longin, "BL45P-EA-PANDA-02:POS:ArraySize8")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dim8SA")
    field(FLNK, "BL45P-EA-PANDA-02:POS:Dim9SA")
}

record(subArray, "BL45P-EA-PANDA-02:POS:Dim9SA")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "BL45P-EA-PANDA-02:POS:ArraySize9")
}

record(longin, "BL45P-EA-PANDA-02:POS:ArraySize9")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dim9SA")
}


record(waveform, "BL45P-EA-PANDA-02:POS:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(PANDA02.POS,0,1)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "BL45P-EA-PANDA-02:POS:Dim0SA_RBV")
    field(SCAN, "I/O Intr")
}

record(subArray, "BL45P-EA-PANDA-02:POS:Dim0SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "BL45P-EA-PANDA-02:POS:ArraySize0_RBV")
}

record(longin, "BL45P-EA-PANDA-02:POS:ArraySize0_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dim0SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:POS:Dim1SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:POS:Dim1SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "BL45P-EA-PANDA-02:POS:ArraySize1_RBV")
}

record(longin, "BL45P-EA-PANDA-02:POS:ArraySize1_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dim1SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:POS:Dim2SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:POS:Dim2SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "BL45P-EA-PANDA-02:POS:ArraySize2_RBV")
}

record(longin, "BL45P-EA-PANDA-02:POS:ArraySize2_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dim2SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:POS:Dim3SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:POS:Dim3SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "BL45P-EA-PANDA-02:POS:ArraySize3_RBV")
}

record(longin, "BL45P-EA-PANDA-02:POS:ArraySize3_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dim3SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:POS:Dim4SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:POS:Dim4SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "BL45P-EA-PANDA-02:POS:ArraySize4_RBV")
}

record(longin, "BL45P-EA-PANDA-02:POS:ArraySize4_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dim4SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:POS:Dim5SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:POS:Dim5SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "BL45P-EA-PANDA-02:POS:ArraySize5_RBV")
}

record(longin, "BL45P-EA-PANDA-02:POS:ArraySize5_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dim5SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:POS:Dim6SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:POS:Dim6SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "BL45P-EA-PANDA-02:POS:ArraySize6_RBV")
}

record(longin, "BL45P-EA-PANDA-02:POS:ArraySize6_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dim6SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:POS:Dim7SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:POS:Dim7SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "BL45P-EA-PANDA-02:POS:ArraySize7_RBV")
}

record(longin, "BL45P-EA-PANDA-02:POS:ArraySize7_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dim7SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:POS:Dim8SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:POS:Dim8SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "BL45P-EA-PANDA-02:POS:ArraySize8_RBV")
}

record(longin, "BL45P-EA-PANDA-02:POS:ArraySize8_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dim8SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:POS:Dim9SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:POS:Dim9SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "BL45P-EA-PANDA-02:POS:ArraySize9_RBV")
}

record(longin, "BL45P-EA-PANDA-02:POS:ArraySize9_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:POS:Dim9SA_RBV")
}


record(mbbi, "BL45P-EA-PANDA-02:POS:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.POS,0,1)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:POS:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.POS,0,1)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:POS:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.POS,0,1)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:POS:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.POS,0,1)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:POS:ArraySize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.POS,0,1)ARRAY_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records have information on the compression              # 
###################################################################
record(stringin, "BL45P-EA-PANDA-02:POS:Codec_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.POS,0,1)CODEC")
   field(VAL,  "")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:POS:CompressedSize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.POS,0,1)COMPRESSED_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the data type                            # 
###################################################################

record(mbbo, "BL45P-EA-PANDA-02:POS:DataType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA02.POS,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-02:POS:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.POS,0,1)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the color mode                           #
#  These choices must agree with NDColorMode_t in NDArray.h       # 
###################################################################

record(mbbo, "BL45P-EA-PANDA-02:POS:ColorMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA02.POS,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-02:POS:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.POS,0,1)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamps of the array     #
###################################################################
record(longin, "BL45P-EA-PANDA-02:POS:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0,1)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "BL45P-EA-PANDA-02:POS:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA02.POS,0,1)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:POS:EpicsTSSec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0,1)EPICS_TS_SEC")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:POS:EpicsTSNsec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0,1)EPICS_TS_NSEC")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "BL45P-EA-PANDA-02:POS:ArrayCounter")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.POS,0,1)ARRAY_COUNTER")
}

record(longin, "BL45P-EA-PANDA-02:POS:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0,1)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# Updated rate calculation to use a smoothing factor w/ guard against negative values
record(calc, "BL45P-EA-PANDA-02:POS:ArrayRate_RBV")
{
    field(INPA, "BL45P-EA-PANDA-02:POS:ArrayRate_RBV.LB NPP NMS")   # Previous counter value
    field(INPB, "BL45P-EA-PANDA-02:POS:ArrayCounter_RBV NPP NMS")   # Current counter value
    field(INPC, "1.0")                                # Delta time in seconds
    field(INPD, "BL45P-EA-PANDA-02:POS:ArrayRate_RBV.VAL NPP NMS")  # Previous rate
    field(INPE, "0.0")                 # Smoothing factor
    field(CALC, "(D*E)/C+MAX(0,B-A)*(1-E)/C")
    field(PREC, "2" )
    field(EGU,  "Hz" )
    field(SCAN, "1 second")
}

###################################################################
#  These records control NDArray callacks                         # 
###################################################################
record(bo, "BL45P-EA-PANDA-02:POS:ArrayCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.POS,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(VAL, "1")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-02:POS:ArrayCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0,1)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains macro definitions for the attributes      # 
###################################################################

record(waveform, "BL45P-EA-PANDA-02:POS:NDAttributesMacros")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(PANDA02.POS,0,1)ND_ATTRIBUTES_MACROS")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record is the name of a file defining attributes          # 
###################################################################

record(waveform, "BL45P-EA-PANDA-02:POS:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(PANDA02.POS,0,1)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record defines the status of reading attributes file      # 
###################################################################

record(mbbi, "BL45P-EA-PANDA-02:POS:NDAttributesStatus")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0,1)ND_ATTRIBUTES_STATUS")
    field(ZRVL, "0")
    field(ZRST, "Attributes file OK")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "File not found")
    field(ONSV, "MINOR")
    field(TWVL, "2")
    field(TWST, "XML syntax error")
    field(TWSV, "MAJOR")
    field(THVL, "3")
    field(THST, "Macro substitution error")
    field(THSV, "MAJOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
###################################################################

record(ai, "BL45P-EA-PANDA-02:POS:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA02.POS,0,1)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "BL45P-EA-PANDA-02:POS:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA02.POS,0,1)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "BL45P-EA-PANDA-02:POS:PoolAllocBuffers")
   info(autosaveFields, "SCAN")
}

record(longin, "BL45P-EA-PANDA-02:POS:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.POS,0,1)POOL_ALLOC_BUFFERS")
   field(FLNK, "BL45P-EA-PANDA-02:POS:PoolFreeBuffers")
}

record(longin, "BL45P-EA-PANDA-02:POS:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.POS,0,1)POOL_FREE_BUFFERS")
   field(FLNK, "BL45P-EA-PANDA-02:POS:PoolUsedBuffers")
}

record(calc, "BL45P-EA-PANDA-02:POS:PoolUsedBuffers")
{
    field(INPA, "BL45P-EA-PANDA-02:POS:PoolAllocBuffers NPP MS")
    field(INPB, "BL45P-EA-PANDA-02:POS:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

record(bo, "BL45P-EA-PANDA-02:POS:EmptyFreeList")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA02.POS,0,1)POOL_EMPTY_FREELIST")
}

record(longin, "BL45P-EA-PANDA-02:POS:NumQueuedArrays")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.POS,0,1)NUM_QUEUED_ARRAYS")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "BL45P-EA-PANDA-02:POS:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.POS,0,1)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "BL45P-EA-PANDA-02:POS:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(PANDA02.POS,0,1)NDARRAY_PORT")
    field(VAL,  "PANDA02.DRV")
    info(autosaveFields, "VAL")
}

record(stringin, "BL45P-EA-PANDA-02:POS:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA02.POS,0,1)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:POS:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.POS,0,1)NDARRAY_ADDR")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:POS:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0,1)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "BL45P-EA-PANDA-02:POS:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.POS,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "1")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-02:POS:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0,1)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "BL45P-EA-PANDA-02:POS:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(PANDA02.POS,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
    field(DRVL, "0")
    info(autosaveFields, "VAL")
}

record(ai, "BL45P-EA-PANDA-02:POS:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA02.POS,0,1)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(ao, "BL45P-EA-PANDA-02:POS:MaxArrayRate")
{
    field(DTYP, "Soft Channel")
    field(OUT,  "BL45P-EA-PANDA-02:POS:MaxArrayRate_COUT PP")
    field(EGU,  "Hz")
    field(PREC, "3")
    field(VAL,  "0.0")
    info(autosaveFields, "VAL")
}

record(calcout, "BL45P-EA-PANDA-02:POS:MaxArrayRate_COUT")
{
    field(INPA, "BL45P-EA-PANDA-02:POS:MaxArrayRate")
    field(CALC, "A=0?0:1.0/A")
    field(OUT,  "BL45P-EA-PANDA-02:POS:MinCallbackTime PP")
}

record(calc, "BL45P-EA-PANDA-02:POS:MaxArrayRate_RBV")
{
    field(INPA, "BL45P-EA-PANDA-02:POS:MinCallbackTime_RBV CP")
    field(CALC, "A=0?0:1.0/A")
    field(EGU,  "Hz")
    field(PREC, "3")
    field(SCAN, "Passive")
}

record(ao, "BL45P-EA-PANDA-02:POS:MaxByteRate")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(PANDA02.POS,0,1)MAX_BYTE_RATE")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
    field(DRVL, "0")
    info(autosaveFields, "VAL")
}

record(ai, "BL45P-EA-PANDA-02:POS:MaxByteRate_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA02.POS,0,1)MAX_BYTE_RATE")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the last execution time of the plugin     #
###################################################################
record(ai, "BL45P-EA-PANDA-02:POS:ExecutionTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA02.POS,0,1)EXECUTION_TIME")
    field(EGU,  "ms")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record requests that the plugin execute again with the    #
#  same NDArray                                                   #
###################################################################
record(bo, "BL45P-EA-PANDA-02:POS:ProcessPlugin")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.POS,0,1)PROCESS_PLUGIN")
    field(VAL,  "1")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "BL45P-EA-PANDA-02:POS:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.POS,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-02:POS:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0,1)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


record(longout, "BL45P-EA-PANDA-02:POS:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.POS,0,1)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "BL45P-EA-PANDA-02:POS:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0,1)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:POS:QueueSize")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.POS,0,1)QUEUE_SIZE")
    field(PINI, "YES")
}

record(longin, "BL45P-EA-PANDA-02:POS:QueueSize_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0,1)QUEUE_SIZE")
    field(FLNK, "BL45P-EA-PANDA-02:POS:QueueFreeLow")
    field(SCAN, "I/O Intr")
}

record(calcout, "BL45P-EA-PANDA-02:POS:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "BL45P-EA-PANDA-02:POS:QueueSize")
    field(OUT,  "BL45P-EA-PANDA-02:POS:QueueFree.LOW")
    field(FLNK, "BL45P-EA-PANDA-02:POS:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "BL45P-EA-PANDA-02:POS:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "BL45P-EA-PANDA-02:POS:QueueSize")
   field(OUT,  "BL45P-EA-PANDA-02:POS:QueueUse.HIGH")
   field(FLNK, "BL45P-EA-PANDA-02:POS:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "BL45P-EA-PANDA-02:POS:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "BL45P-EA-PANDA-02:POS:QueueSize")
   field(OUT,  "BL45P-EA-PANDA-02:POS:QueueUse.HIHI")
}

record(longin, "BL45P-EA-PANDA-02:POS:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0,1)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "BL45P-EA-PANDA-02:POS:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "BL45P-EA-PANDA-02:POS:QueueSize")
    field(INPB, "BL45P-EA-PANDA-02:POS:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}

record(longout, "BL45P-EA-PANDA-02:POS:NumThreads")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.POS,0,1)NUM_THREADS")
    field(VAL,  "1")
    field(PINI, "YES")
}

record(longin, "BL45P-EA-PANDA-02:POS:NumThreads_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0,1)NUM_THREADS")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:POS:MaxThreads_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0,1)MAX_THREADS")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control output array sorting                     #
###################################################################
record(mbbo, "BL45P-EA-PANDA-02:POS:SortMode") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.POS,0,1)SORT_MODE")
    field(ZRVL, "0")
    field(ZRST, "Unsorted")
    field(ONVL, "1")
    field(ONST, "Sorted")
}

record(mbbi, "BL45P-EA-PANDA-02:POS:SortMode_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0,1)SORT_MODE")
    field(ZRVL, "0")
    field(ZRST, "Unsorted")
    field(ONVL, "1")
    field(ONST, "Sorted")
    field(SCAN, "I/O Intr")
}

record(ao, "BL45P-EA-PANDA-02:POS:SortTime") {
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(PANDA02.POS,0,1)SORT_TIME")
    field(PREC, "3")
    field(VAL, "0.1")
}

record(ai, "BL45P-EA-PANDA-02:POS:SortTime_RBV") {
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA02.POS,0,1)SORT_TIME")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:POS:SortSize")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.POS,0,1)SORT_SIZE")
    field(VAL,  "20")
    field(PINI, "YES")
}

record(longin, "BL45P-EA-PANDA-02:POS:SortSize_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0,1)SORT_SIZE")
    field(FLNK, "BL45P-EA-PANDA-02:POS:SortFreeLow")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:POS:SortFree") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0,1)SORT_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

record(calcout, "BL45P-EA-PANDA-02:POS:SortFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "BL45P-EA-PANDA-02:POS:SortSize")
    field(OUT,  "BL45P-EA-PANDA-02:POS:SortFree.LOW")
}

record(longout, "BL45P-EA-PANDA-02:POS:DroppedOutputArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.POS,0,1)DROPPED_OUTPUT_ARRAYS")
    field(VAL,  "0")
}

record(longin, "BL45P-EA-PANDA-02:POS:DroppedOutputArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0,1)DROPPED_OUTPUT_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:POS:DisorderedArrays")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.POS,0,1)DISORDERED_ARRAYS")
    field(PINI, "YES")
}

record(longin, "BL45P-EA-PANDA-02:POS:DisorderedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0,1)DISORDERED_ARRAYS")
    field(SCAN, "I/O Intr")
}



###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"BL45P-EA-PANDA-02:POS:AsynIO")
{
    field(PORT, "PANDA02.POS")
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}


# File path.
record(waveform, "BL45P-EA-PANDA-02:POS:Filename")
{
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(PANDA02.POS,0,1)NDPos_Filename")
    field(FTVL, "CHAR")
    field(NELM, "1000000")
}

record(waveform, "BL45P-EA-PANDA-02:POS:Filename_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA02.POS,0)NDPos_Filename")
    field(FTVL, "CHAR")
    field(NELM, "1000000")
    field(SCAN, "I/O Intr")
}

record(bi, "BL45P-EA-PANDA-02:POS:FileValid_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0)NDPos_FileValid")
    field(ZNAM, "No")
    field(ZSV,  "MAJOR")
    field(ONAM, "Yes")
    field(OSV,  "NO_ALARM")
    field(SCAN, "I/O Intr")
}

record(busy, "BL45P-EA-PANDA-02:POS:Running")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.POS,0)NDPos_Running")
    field(ZNAM, "Idle")
    field(ONAM, "Running")
    field(VAL,  "0")
}

record(bi, "BL45P-EA-PANDA-02:POS:Running_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0)NDPos_Running")
    field(ZNAM, "Idle")
    field(ONAM, "Running")
    field(SCAN, "I/O Intr")
}

record(bo, "BL45P-EA-PANDA-02:POS:Reset")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.POS,0)NDPos_Restart")
}

record(bo, "BL45P-EA-PANDA-02:POS:Delete")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.POS,0)NDPos_Delete")
}

record(bo, "BL45P-EA-PANDA-02:POS:Mode")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.POS,0)NDPos_Mode")
    field(ZNAM, "Discard")
    field(ONAM, "Keep")
}

record(bi, "BL45P-EA-PANDA-02:POS:Mode_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0)NDPos_Mode")
    field(ZNAM, "Discard")
    field(ONAM, "Keep")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:POS:Qty_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0)NDPos_CurrentQty")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:POS:Index_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0)NDPos_CurrentIndex")
    field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-02:POS:Position_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA02.POS,0)NDPos_CurrentPos")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:POS:Missing")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.POS,0)NDPos_MissingFrames")
    field(PINI, "NO")
}

record(longin, "BL45P-EA-PANDA-02:POS:Missing_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0)NDPos_MissingFrames")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:POS:Duplicate")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.POS,0)NDPos_DuplicateFrames")
    field(PINI, "NO")
}

record(longin, "BL45P-EA-PANDA-02:POS:Duplicate_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0)NDPos_DuplicateFrames")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:POS:ExpectedID_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0)NDPos_ExpectedID")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-02:POS:IDName")
{
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(PANDA02.POS,0)NDPos_IDName")
    field(PINI, "NO")
}

record(stringin, "BL45P-EA-PANDA-02:POS:IDName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA02.POS,0)NDPos_IDName")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:POS:IDStart")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.POS,0)NDPos_IDStart")
    field(PINI, "NO")
}

record(longin, "BL45P-EA-PANDA-02:POS:IDStart_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0)NDPos_IDStart")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:POS:IDDifference")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.POS,0)NDPos_IDDifference")
    field(PINI, "NO")
}

record(longin, "BL45P-EA-PANDA-02:POS:IDDifference_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.POS,0)NDPos_IDDifference")
    field(SCAN, "I/O Intr")
}

#=================================================================#
# Template file: NDFileHDF5.template
# Database for NDFileHDF5 driver, which saves files for NDArray data.

# Macros:
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Asyn Port timeout
# % macro, XMLSIZE, Number of elements of the XML layout waveform record

# This associates the template with an edm screen
# % gui, PANDA01.HDF, edmtab, NDFileHDF5.edl, P=BL45P-EA-PANDA-01,R=:HDF5:

# This associates a BOY screen with the template
# % gui, PANDA01.HDF, boydetail,ADApp_opi/dls/hdf5_detail.opi, P=BL45P-EA-PANDA-01, R=:HDF5:, DESC=HDF5 File Test
# % gui, PANDA01.HDF, boyembed, ADApp_opi/dls/hdf5_embed_box.opi, P=BL45P-EA-PANDA-01, R=:HDF5:, DESC=HDF5 File Test
# % gui, PANDA01.HDF, boyembed, ADApp_opi/dls/hdf5_embed.opi, P=BL45P-EA-PANDA-01, R=:HDF5:, DESC=HDF5 File Test

# Info
# % gui, PANDA01.HDF, groupHeading, Info
# % gui, PANDA01.HDF, readback, Port name,   BL45P-EA-PANDA-01:HDF5:PortName_RBV
# % gui, PANDA01.HDF, readback, Plugin type,   BL45P-EA-PANDA-01:HDF5:PluginType_RBV
# Input
# % gui, PANDA01.HDF, demandString, Input,   BL45P-EA-PANDA-01:HDF5:NDArrayPort
# % gui, PANDA01.HDF, readback, Input,   BL45P-EA-PANDA-01:HDF5:NDArrayPort_RBV

# % gui, PANDA01.HDF, groupHeading, Callback
# % gui, PANDA01.HDF, enum, Callbacks,   BL45P-EA-PANDA-01:HDF5:EnableCallbacks
# % gui, PANDA01.HDF, statusbits, Callbacks,   BL45P-EA-PANDA-01:HDF5:EnableCallbacks_RBV
# % gui, PANDA01.HDF, demand, Min Callback Time,   BL45P-EA-PANDA-01:HDF5:MinCallbackTime
# % gui, PANDA01.HDF, readback, Min Callback Time,   BL45P-EA-PANDA-01:HDF5:MinCallbackTime_RBV
# % gui, PANDA01.HDF, enum, Block Callbacks,   BL45P-EA-PANDA-01:HDF5:BlockingCallbacks
# % gui, PANDA01.HDF, statusbits, Block Callbacks,   BL45P-EA-PANDA-01:HDF5:BlockingCallbacks_RBV

# % gui, PANDA01.HDF, groupHeading, Counters
# % gui, PANDA01.HDF, demand, Array Counter,   BL45P-EA-PANDA-01:HDF5:ArrayCounter
# % gui, PANDA01.HDF, readback, Array Counter,   BL45P-EA-PANDA-01:HDF5:ArrayCounter_RBV
# % gui, PANDA01.HDF, readback, Array Rate (fps),   BL45P-EA-PANDA-01:HDF5:ArrayRate_RBV
# % gui, PANDA01.HDF, readback, Queue Use,   BL45P-EA-PANDA-01:HDF5:QueueUse
# % gui, PANDA01.HDF, readback, Queue Size,   BL45P-EA-PANDA-01:HDF5:QueueSize
# % gui, PANDA01.HDF, demand, Dropped Arrays,   BL45P-EA-PANDA-01:HDF5:DroppedArrays
# % gui, PANDA01.HDF, readback, Dropped Arrays,   BL45P-EA-PANDA-01:HDF5:DroppedArrays_RBV

# % gui, PANDA01.HDF, groupHeading, Array Settings
# % gui, PANDA01.HDF, readback, Num Dimensions,   BL45P-EA-PANDA-01:HDF5:NDimensions_RBV
# % gui, PANDA01.HDF, readback, Dim 0 Size,   BL45P-EA-PANDA-01:HDF5:ArraySize0_RBV
# % gui, PANDA01.HDF, readback, Dim 1 Size,   BL45P-EA-PANDA-01:HDF5:ArraySize1_RBV
# % gui, PANDA01.HDF, readback, Dim 2 Size,   BL45P-EA-PANDA-01:HDF5:ArraySize2_RBV
# % gui, PANDA01.HDF, readback, Input Data Type,   BL45P-EA-PANDA-01:HDF5:DataType_RBV
# % gui, PANDA01.HDF, readback, Colour Mode,   BL45P-EA-PANDA-01:HDF5:ColorMode_RBV
# % gui, PANDA01.HDF, readback, Bayer Pattern,   BL45P-EA-PANDA-01:HDF5:BayerPattern_RBV
# % gui, PANDA01.HDF, readback, Unique id,   BL45P-EA-PANDA-01:HDF5:UniqueId_RBV
# % gui, PANDA01.HDF, readback, Timestamp,   BL45P-EA-PANDA-01:HDF5:TimeStamp_RBV
# File
# % gui, PANDA01.HDF, groupHeading, File
# % gui, PANDA01.HDF, demandString, File Path,   BL45P-EA-PANDA-01:HDF5:FilePath
# % gui, PANDA01.HDF, readback, File Path,   BL45P-EA-PANDA-01:HDF5:FilePath_RBV
# % gui, PANDA01.HDF, statusbits, File Path Exists,   BL45P-EA-PANDA-01:HDF5:FilePathExists_RBV
# % gui, PANDA01.HDF, demand, File Name,   BL45P-EA-PANDA-01:HDF5:FileName
# % gui, PANDA01.HDF, readback, File Name,   BL45P-EA-PANDA-01:HDF5:FileName_RBV
# % gui, PANDA01.HDF, demand, File Number,   BL45P-EA-PANDA-01:HDF5:FileNumber
# % gui, PANDA01.HDF, readback, File Number,   BL45P-EA-PANDA-01:HDF5:FileNumber_RBV
# % gui, PANDA01.HDF, enum, Auto Increment,   BL45P-EA-PANDA-01:HDF5:AutoIncrement
# % gui, PANDA01.HDF, statusbits, Auto Increment,   BL45P-EA-PANDA-01:HDF5:AutoIncrement_RBV
# % gui, PANDA01.HDF, demand, File Format,   BL45P-EA-PANDA-01:HDF5:FileTemplate
# % gui, PANDA01.HDF, readback, File Format,   BL45P-EA-PANDA-01:HDF5:FileTemplate_RBV
# % gui, PANDA01.HDF, demand, N to Capture,   BL45P-EA-PANDA-01:HDF5:NumCapture
# % gui, PANDA01.HDF, readback, N to Capture,   BL45P-EA-PANDA-01:HDF5:NumCapture_RBV
# % gui, PANDA01.HDF, readback, N Captured,   BL45P-EA-PANDA-01:HDF5:NumCaptured_RBV
# % gui, PANDA01.HDF, enum, Auto Save,   BL45P-EA-PANDA-01:HDF5:AutoSave
# % gui, PANDA01.HDF, statusbits, Auto Save ,   BL45P-EA-PANDA-01:HDF5:AutoSave_RBV
# % gui, PANDA01.HDF, enum, Capture mode,   BL45P-EA-PANDA-01:HDF5:FileWriteMode
# % gui, PANDA01.HDF, readback, Capture mode,   BL45P-EA-PANDA-01:HDF5:FileWriteMode_RBV
# % gui, PANDA01.HDF, enum, Capture,   BL45P-EA-PANDA-01:HDF5:Capture
# % gui, PANDA01.HDF, readback, Capture,   BL45P-EA-PANDA-01:HDF5:Capture_RBV
# % gui, PANDA01.HDF, readback, Write Message,   BL45P-EA-PANDA-01:HDF5:WriteMessage
# % gui, PANDA01.HDF, readback, Write Status,   BL45P-EA-PANDA-01:HDF5:WriteStatus
# % gui, PANDA01.HDF, readback, Write Filename,   BL45P-EA-PANDA-01:HDF5:FullFileName_RBV
# % gui, PANDA01.HDF, enum, Lazy Open,   BL45P-EA-PANDA-01:HDF5:LazyOpen
# % gui, PANDA01.HDF, readback, Lazy Open,   BL45P-EA-PANDA-01:HDF5:LazyOpen_RBV
# % gui, PANDA01.HDF, demand, Temporary Suffix,   BL45P-EA-PANDA-01:HDF5:TempSuffix
# % gui, PANDA01.HDF, readback, Temporary Suffix,   BL45P-EA-PANDA-01:HDF5:TempSuffix_RBV
# % gui, PANDA01.HDF, demand, Create Directories,   BL45P-EA-PANDA-01:HDF5:CreateDirectory
# % gui, PANDA01.HDF, readback, Create Directories,   BL45P-EA-PANDA-01:HDF5:CreateDirectory_RBV
# HDF5
# % gui, PANDA01.HDF, groupHeading, HDF5
# % gui, PANDA01.HDF, demand, Extra Dimensions,   BL45P-EA-PANDA-01:HDF5:NumExtraDims
# % gui, PANDA01.HDF, readback, Extra Dimensions,   BL45P-EA-PANDA-01:HDF5:NumExtraDims_RBV
# % gui, PANDA01.HDF, demand, Rows per Chunk,   BL45P-EA-PANDA-01:HDF5:NumRowChunks
# % gui, PANDA01.HDF, readback, Rows per Chunk,   BL45P-EA-PANDA-01:HDF5:NumRowChunks_RBV
# % gui, PANDA01.HDF, demand, Cols per Chunk,   BL45P-EA-PANDA-01:HDF5:NumColChunks
# % gui, PANDA01.HDF, readback, Cols per Chunk,   BL45P-EA-PANDA-01:HDF5:NumColChunks_RBV
# % gui, PANDA01.HDF, demand, Frames per Chunk,   BL45P-EA-PANDA-01:HDF5:NumFramesChunks
# % gui, PANDA01.HDF, readback, Frames per Chunk,   BL45P-EA-PANDA-01:HDF5:NumFramesChunks_RBV
# % gui, PANDA01.HDF, demand, Boundary Alignment,   BL45P-EA-PANDA-01:HDF5:BoundaryAlign
# % gui, PANDA01.HDF, readback, Boundary Alignment,   BL45P-EA-PANDA-01:HDF5:BoundaryAlign_RBV
# % gui, PANDA01.HDF, demand, Boundary Threshold,   BL45P-EA-PANDA-01:HDF5:BoundaryThreshold
# % gui, PANDA01.HDF, readback, Boundary Threshold,   BL45P-EA-PANDA-01:HDF5:BoundaryThreshold_RBV
# % gui, PANDA01.HDF, demand, Flush on Nth Frame,   BL45P-EA-PANDA-01:HDF5:NumFramesFlush
# % gui, PANDA01.HDF, readback, Flush on Nth Frame,   BL45P-EA-PANDA-01:HDF5:NumFramesFlush_RBV
# % gui, PANDA01.HDF, enum, Store Attribute Data,   BL45P-EA-PANDA-01:HDF5:StoreAttr
# % gui, PANDA01.HDF, readback, Store Attribute Data,   BL45P-EA-PANDA-01:HDF5:StoreAttr_RBV
# % gui, PANDA01.HDF, enum, Store Performance Data,   BL45P-EA-PANDA-01:HDF5:StorePerform
# % gui, PANDA01.HDF, readback, Store Performance Data,   BL45P-EA-PANDA-01:HDF5:StorePerform_RBV
# % gui, PANDA01.HDF, readback, Total Write Time,   BL45P-EA-PANDA-01:HDF5:RunTime
# % gui, PANDA01.HDF, readback, Total Write Speed,   BL45P-EA-PANDA-01:HDF5:IOSpeed
# % gui, PANDA01.HDF, enum, Compression Type,   BL45P-EA-PANDA-01:HDF5:Compression
# % gui, PANDA01.HDF, readback, Compression Type,   BL45P-EA-PANDA-01:HDF5:Compression_RBV
# % gui, PANDA01.HDF, demand, N-bit bits per Pixel,   BL45P-EA-PANDA-01:HDF5:NumDataBits
# % gui, PANDA01.HDF, readback, N-bit bits per Pixel,   BL45P-EA-PANDA-01:HDF5:NumDataBits_RBV
# % gui, PANDA01.HDF, demand, N-bit Offset,   BL45P-EA-PANDA-01:HDF5:DataBitsOffset
# % gui, PANDA01.HDF, readback, N-bit Offset,   BL45P-EA-PANDA-01:HDF5:DataBitsOffset_RBV
# % gui, PANDA01.HDF, demand, Szip Filter Size,   BL45P-EA-PANDA-01:HDF5:SZipNumPixels
# % gui, PANDA01.HDF, readback, Szip Filter Size,   BL45P-EA-PANDA-01:HDF5:SZipNumPixels_RBV
# % gui, PANDA01.HDF, demand, Zlib Deflate Level,   BL45P-EA-PANDA-01:HDF5:ZLevel
# % gui, PANDA01.HDF, readback, Zlib Deflate Level,   BL45P-EA-PANDA-01:HDF5:ZLevel_RBV

# Memory
# % gui, PANDA01.HDF, groupHeading, Memory
# % gui, PANDA01.HDF, readback, Max memory,   BL45P-EA-PANDA-01:HDF5:PoolMaxMem
# % gui, PANDA01.HDF, readback, Max buffers,   BL45P-EA-PANDA-01:HDF5:PoolMaxBuffers
# % gui, PANDA01.HDF, readback, Used memory,   BL45P-EA-PANDA-01:HDF5:PoolUsedMem
# % gui, PANDA01.HDF, readback, Allocated buffers,   BL45P-EA-PANDA-01:HDF5:PoolAllocBuffers
# % gui, PANDA01.HDF, readback, Free buffers,   BL45P-EA-PANDA-01:HDF5:PoolFreeBuffers

#=================================================================#
# Template file: NDFile.template
# Database for NDFile driver, which saves files for NDArray data.
# Mark Rivers
# April 7, 2008

# Macros:
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, TIMEOUT, Timeout
# % macro, ADDR, Asyn Port address
# % macro, SCANRATE, Chosen Scan Rate for cpu intensive PVs

###################################################################
#  These records control file I/O                                 # 
###################################################################

# File path.
record(waveform, "BL45P-EA-PANDA-01:HDF5:FilePath")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(PANDA01.HDF,0,5)FILE_PATH")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

record(waveform, "BL45P-EA-PANDA-01:HDF5:FilePath_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA01.HDF,0,5)FILE_PATH")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(bi, "BL45P-EA-PANDA-01:HDF5:FilePathExists_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)FILE_PATH_EXISTS")
    field(ZNAM, "No")
    field(ZSV,  "MAJOR")
    field(ONAM, "Yes")
    field(OSV,  "NO_ALARM")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:CreateDirectory")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)CREATE_DIR")
    field(VAL,  "0" )
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:CreateDirectory_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)CREATE_DIR")
    field(VAL,  "")
    field(SCAN, "I/O Intr")
}

# Filename
record(waveform, "BL45P-EA-PANDA-01:HDF5:FileName")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(PANDA01.HDF,0,5)FILE_NAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

record(waveform, "BL45P-EA-PANDA-01:HDF5:FileName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA01.HDF,0,5)FILE_NAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:FileNumber")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)FILE_NUMBER")
    field(VAL,  "1")
    info(asyn:READBACK, "1")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:FileNumber_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)FILE_NUMBER")
    field(SCAN, "I/O Intr")
}

# Autoincrement flag
record(bo, "BL45P-EA-PANDA-01:HDF5:AutoIncrement")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)AUTO_INCREMENT")
    field(VAL,  "1")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-01:HDF5:AutoIncrement_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)AUTO_INCREMENT")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}

# File template
record(waveform, "BL45P-EA-PANDA-01:HDF5:FileTemplate")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(PANDA01.HDF,0,5)FILE_TEMPLATE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

record(waveform, "BL45P-EA-PANDA-01:HDF5:FileTemplate_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA01.HDF,0,5)FILE_TEMPLATE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

# Full filename, including path
record(waveform, "BL45P-EA-PANDA-01:HDF5:FullFileName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA01.HDF,0,5)FULL_FILE_NAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

# Autosave flag
record(bo, "BL45P-EA-PANDA-01:HDF5:AutoSave")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)AUTO_SAVE")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-01:HDF5:AutoSave_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)AUTO_SAVE")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}

# Write file
record(busy, "BL45P-EA-PANDA-01:HDF5:WriteFile")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)WRITE_FILE")
    field(ZNAM, "Done")
    field(ONAM, "Write")
}

record(bi, "BL45P-EA-PANDA-01:HDF5:WriteFile_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)WRITE_FILE")
    field(ZNAM, "Done")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Writing")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}


# Read file
record(busy, "BL45P-EA-PANDA-01:HDF5:ReadFile")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)READ_FILE")
    field(ZNAM, "Done")
    field(ONAM, "Read")
}

record(bi, "BL45P-EA-PANDA-01:HDF5:ReadFile_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)READ_FILE")
    field(ZNAM, "Done")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Reading")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

# File data format 
record(mbbo, "BL45P-EA-PANDA-01:HDF5:FileFormat")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)FILE_FORMAT")
    field(VAL,  "0")
    field(ZRST, "Undefined")
    field(ZRVL, "0")
    field(ONST, "Invalid")
    field(ONVL, "1")
    info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-01:HDF5:FileFormat_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)FILE_FORMAT")
    field(ZRST, "netCDF")
    field(ZRVL, "0")
    field(ONST, "Undefined")
    field(ONVL, "1")
    field(SCAN, "I/O Intr")
}

# File save mode 
record(mbbo, "BL45P-EA-PANDA-01:HDF5:FileWriteMode")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)WRITE_MODE")
    field(VAL,  "0")
    field(ZRST, "Single")
    field(ZRVL, "0")
    field(ONST, "Capture")
    field(ONVL, "1")
    field(TWST, "Stream")
    field(TWVL, "2")
    info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-01:HDF5:FileWriteMode_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)WRITE_MODE")
    field(ZRST, "Single")
    field(ZRVL, "0")
    field(ONST, "Capture")
    field(ONVL, "1")
    field(TWST, "Stream")
    field(TWVL, "2")
    field(SCAN, "I/O Intr")
}

# Capture data
record(busy, "BL45P-EA-PANDA-01:HDF5:Capture")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)CAPTURE")
    field(ZNAM, "Done")
    field(ONAM, "Capture")
}

record(bi, "BL45P-EA-PANDA-01:HDF5:Capture_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)CAPTURE")
    field(ZNAM, "Done")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Capturing")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:NumCapture")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)NUM_CAPTURE")
    field(VAL,  "1")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:NumCapture_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)NUM_CAPTURE")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:NumCaptured_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)NUM_CAPTURED")
    field(SCAN, "I/O Intr")
}

# Delete driver file flag
record(bo, "BL45P-EA-PANDA-01:HDF5:DeleteDriverFile")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)DELETE_DRIVER_FILE")
    field(VAL,  "0")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-01:HDF5:DeleteDriverFile_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)DELETE_DRIVER_FILE")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}

record(bi, "BL45P-EA-PANDA-01:HDF5:WriteStatus")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)WRITE_STATUS")
    field(ZNAM, "Write OK")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Write error")
    field(OSV,  "MAJOR")
    field(SCAN, "I/O Intr")
}

record(waveform, "BL45P-EA-PANDA-01:HDF5:WriteMessage")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA01.HDF,0,5)WRITE_MESSAGE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(bo, "BL45P-EA-PANDA-01:HDF5:LazyOpen")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)FILE_LAZY_OPEN")
    field(VAL,  "0")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-01:HDF5:LazyOpen_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)FILE_LAZY_OPEN")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-01:HDF5:TempSuffix")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)FILE_TEMP_SUFFIX")
    field(VAL,  "")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:TempSuffix_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA01.HDF,0,5)FILE_TEMP_SUFFIX")
    field(VAL,  "")
    field(SCAN, "I/O Intr")
}
#=================================================================#
# Template file: NDPluginBase.template
# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

# Macros:
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, TIMEOUT, Timeout
# % macro, ADDR, Asyn Port address
# % macro, NDARRAY_PORT, Input Array Port
# % macro, NDARRAY_ADDR, Input Array Address
# % macro, ENABLED, Plugin Enabled at startup?
# % macro, SCANRATE, Chosen Scan Rate for cpu intensive PVs

#=================================================================#
# Template file: NDArrayBase.template
# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

###################################################################
#  This record contains the version of ADCore                     #
###################################################################

record(stringin, "BL45P-EA-PANDA-01:HDF5:ADCoreVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.HDF,0,5)ADCORE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the version of the driver or plugin       #
###################################################################

record(stringin, "BL45P-EA-PANDA-01:HDF5:DriverVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.HDF,0,5)DRIVER_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the asyn port name of this detector       #
###################################################################

record(stringin, "BL45P-EA-PANDA-01:HDF5:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.HDF,0,5)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records contain basic information about the detector     # 
###################################################################

record(stringin, "BL45P-EA-PANDA-01:HDF5:Manufacturer_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.HDF,0,5)MANUFACTURER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:Model_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.HDF,0,5)MODEL")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:SerialNumber_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.HDF,0,5)SERIAL_NUMBER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:SDKVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.HDF,0,5)SDK_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:FirmwareVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.HDF,0,5)FIRMWARE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control acquisition start and stop               #
###################################################################

record(bo, "BL45P-EA-PANDA-01:HDF5:Acquire") {
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(PANDA01.HDF,0,5)ACQUIRE")
   field(ZNAM, "Done")
   field(ONAM, "Acquire")
   field(VAL,  "0")
   field(FLNK, "BL45P-EA-PANDA-01:HDF5:SetAcquireBusy")
   info(asyn:READBACK, "1")
}

record(bi, "BL45P-EA-PANDA-01:HDF5:Acquire_RBV") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(PANDA01.HDF,0,5)ACQUIRE")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "BL45P-EA-PANDA-01:HDF5:SetAcquireBusy")
{
    field(INPA, "BL45P-EA-PANDA-01:HDF5:Acquire NPP")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(OUT,  "BL45P-EA-PANDA-01:HDF5:AcquireBusy PP")
}

record(busy, "BL45P-EA-PANDA-01:HDF5:AcquireBusy") {
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(VAL,  "0")
}

record(bi, "BL45P-EA-PANDA-01:HDF5:AcquireBusyCB") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(PANDA01.HDF,0,5)ACQUIRE_BUSY")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "BL45P-EA-PANDA-01:HDF5:ClearAcquireBusy") {
    field(INPA, "BL45P-EA-PANDA-01:HDF5:AcquireBusyCB CP")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(OUT,  "BL45P-EA-PANDA-01:HDF5:AcquireBusy PP")
}

record(bo, "BL45P-EA-PANDA-01:HDF5:WaitForPlugins") {
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(PANDA01.HDF,0,5)WAIT_FOR_PLUGINS")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
}

###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longout, "BL45P-EA-PANDA-01:HDF5:NDimensions")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)ARRAY_NDIMENSIONS")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform records
record(waveform, "BL45P-EA-PANDA-01:HDF5:Dimensions")
{
    field(DTYP, "asynInt32ArrayOut")
    field(INP,  "@asyn(PANDA01.HDF,0,5)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:Dim0SA")
}

record(subArray, "BL45P-EA-PANDA-01:HDF5:Dim0SA")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:ArraySize0")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ArraySize0")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dim0SA")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:Dim1SA")
}

record(subArray, "BL45P-EA-PANDA-01:HDF5:Dim1SA")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:ArraySize1")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ArraySize1")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dim1SA")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:Dim2SA")
}

record(subArray, "BL45P-EA-PANDA-01:HDF5:Dim2SA")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:ArraySize2")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ArraySize2")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dim2SA")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:Dim3SA")
}

record(subArray, "BL45P-EA-PANDA-01:HDF5:Dim3SA")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:ArraySize3")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ArraySize3")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dim3SA")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:Dim4SA")
}

record(subArray, "BL45P-EA-PANDA-01:HDF5:Dim4SA")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:ArraySize4")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ArraySize4")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dim4SA")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:Dim5SA")
}

record(subArray, "BL45P-EA-PANDA-01:HDF5:Dim5SA")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:ArraySize5")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ArraySize5")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dim5SA")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:Dim6SA")
}

record(subArray, "BL45P-EA-PANDA-01:HDF5:Dim6SA")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:ArraySize6")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ArraySize6")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dim6SA")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:Dim7SA")
}

record(subArray, "BL45P-EA-PANDA-01:HDF5:Dim7SA")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:ArraySize7")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ArraySize7")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dim7SA")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:Dim8SA")
}

record(subArray, "BL45P-EA-PANDA-01:HDF5:Dim8SA")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:ArraySize8")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ArraySize8")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dim8SA")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:Dim9SA")
}

record(subArray, "BL45P-EA-PANDA-01:HDF5:Dim9SA")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:ArraySize9")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ArraySize9")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dim9SA")
}


record(waveform, "BL45P-EA-PANDA-01:HDF5:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(PANDA01.HDF,0,5)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:Dim0SA_RBV")
    field(SCAN, "I/O Intr")
}

record(subArray, "BL45P-EA-PANDA-01:HDF5:Dim0SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:ArraySize0_RBV")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ArraySize0_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dim0SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:Dim1SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:HDF5:Dim1SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:ArraySize1_RBV")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ArraySize1_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dim1SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:Dim2SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:HDF5:Dim2SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:ArraySize2_RBV")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ArraySize2_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dim2SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:Dim3SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:HDF5:Dim3SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:ArraySize3_RBV")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ArraySize3_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dim3SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:Dim4SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:HDF5:Dim4SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:ArraySize4_RBV")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ArraySize4_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dim4SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:Dim5SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:HDF5:Dim5SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:ArraySize5_RBV")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ArraySize5_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dim5SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:Dim6SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:HDF5:Dim6SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:ArraySize6_RBV")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ArraySize6_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dim6SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:Dim7SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:HDF5:Dim7SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:ArraySize7_RBV")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ArraySize7_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dim7SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:Dim8SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:HDF5:Dim8SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:ArraySize8_RBV")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ArraySize8_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dim8SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:Dim9SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-01:HDF5:Dim9SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:ArraySize9_RBV")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ArraySize9_RBV")
{
    field(INP,  "BL45P-EA-PANDA-01:HDF5:Dim9SA_RBV")
}


record(mbbi, "BL45P-EA-PANDA-01:HDF5:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.HDF,0,5)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.HDF,0,5)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.HDF,0,5)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.HDF,0,5)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ArraySize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.HDF,0,5)ARRAY_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records have information on the compression              # 
###################################################################
record(stringin, "BL45P-EA-PANDA-01:HDF5:Codec_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.HDF,0,5)CODEC")
   field(VAL,  "")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:CompressedSize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.HDF,0,5)COMPRESSED_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the data type                            # 
###################################################################

record(mbbo, "BL45P-EA-PANDA-01:HDF5:DataType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA01.HDF,0,5)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-01:HDF5:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.HDF,0,5)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the color mode                           #
#  These choices must agree with NDColorMode_t in NDArray.h       # 
###################################################################

record(mbbo, "BL45P-EA-PANDA-01:HDF5:ColorMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA01.HDF,0,5)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-01:HDF5:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.HDF,0,5)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamps of the array     #
###################################################################
record(longin, "BL45P-EA-PANDA-01:HDF5:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "BL45P-EA-PANDA-01:HDF5:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA01.HDF,0,5)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:EpicsTSSec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)EPICS_TS_SEC")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:EpicsTSNsec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)EPICS_TS_NSEC")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "BL45P-EA-PANDA-01:HDF5:ArrayCounter")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)ARRAY_COUNTER")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# Updated rate calculation to use a smoothing factor w/ guard against negative values
record(calc, "BL45P-EA-PANDA-01:HDF5:ArrayRate_RBV")
{
    field(INPA, "BL45P-EA-PANDA-01:HDF5:ArrayRate_RBV.LB NPP NMS")   # Previous counter value
    field(INPB, "BL45P-EA-PANDA-01:HDF5:ArrayCounter_RBV NPP NMS")   # Current counter value
    field(INPC, "1.0")                                # Delta time in seconds
    field(INPD, "BL45P-EA-PANDA-01:HDF5:ArrayRate_RBV.VAL NPP NMS")  # Previous rate
    field(INPE, "0.0")                 # Smoothing factor
    field(CALC, "(D*E)/C+MAX(0,B-A)*(1-E)/C")
    field(PREC, "2" )
    field(EGU,  "Hz" )
    field(SCAN, "1 second")
}

###################################################################
#  These records control NDArray callacks                         # 
###################################################################
record(bo, "BL45P-EA-PANDA-01:HDF5:ArrayCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(VAL, "1")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-01:HDF5:ArrayCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains macro definitions for the attributes      # 
###################################################################

record(waveform, "BL45P-EA-PANDA-01:HDF5:NDAttributesMacros")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(PANDA01.HDF,0,5)ND_ATTRIBUTES_MACROS")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record is the name of a file defining attributes          # 
###################################################################

record(waveform, "BL45P-EA-PANDA-01:HDF5:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(PANDA01.HDF,0,5)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record defines the status of reading attributes file      # 
###################################################################

record(mbbi, "BL45P-EA-PANDA-01:HDF5:NDAttributesStatus")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)ND_ATTRIBUTES_STATUS")
    field(ZRVL, "0")
    field(ZRST, "Attributes file OK")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "File not found")
    field(ONSV, "MINOR")
    field(TWVL, "2")
    field(TWST, "XML syntax error")
    field(TWSV, "MAJOR")
    field(THVL, "3")
    field(THST, "Macro substitution error")
    field(THSV, "MAJOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
###################################################################

record(ai, "BL45P-EA-PANDA-01:HDF5:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA01.HDF,0,5)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "BL45P-EA-PANDA-01:HDF5:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA01.HDF,0,5)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "BL45P-EA-PANDA-01:HDF5:PoolAllocBuffers")
   info(autosaveFields, "SCAN")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.HDF,0,5)POOL_ALLOC_BUFFERS")
   field(FLNK, "BL45P-EA-PANDA-01:HDF5:PoolFreeBuffers")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.HDF,0,5)POOL_FREE_BUFFERS")
   field(FLNK, "BL45P-EA-PANDA-01:HDF5:PoolUsedBuffers")
}

record(calc, "BL45P-EA-PANDA-01:HDF5:PoolUsedBuffers")
{
    field(INPA, "BL45P-EA-PANDA-01:HDF5:PoolAllocBuffers NPP MS")
    field(INPB, "BL45P-EA-PANDA-01:HDF5:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

record(bo, "BL45P-EA-PANDA-01:HDF5:EmptyFreeList")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA01.HDF,0,5)POOL_EMPTY_FREELIST")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:NumQueuedArrays")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA01.HDF,0,5)NUM_QUEUED_ARRAYS")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "BL45P-EA-PANDA-01:HDF5:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA01.HDF,0,5)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "BL45P-EA-PANDA-01:HDF5:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)NDARRAY_PORT")
    field(VAL,  "PANDA01.POS")
    info(autosaveFields, "VAL")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA01.HDF,0,5)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)NDARRAY_ADDR")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "BL45P-EA-PANDA-01:HDF5:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "1")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-01:HDF5:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "BL45P-EA-PANDA-01:HDF5:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
    field(DRVL, "0")
    info(autosaveFields, "VAL")
}

record(ai, "BL45P-EA-PANDA-01:HDF5:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA01.HDF,0,5)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(ao, "BL45P-EA-PANDA-01:HDF5:MaxArrayRate")
{
    field(DTYP, "Soft Channel")
    field(OUT,  "BL45P-EA-PANDA-01:HDF5:MaxArrayRate_COUT PP")
    field(EGU,  "Hz")
    field(PREC, "3")
    field(VAL,  "0.0")
    info(autosaveFields, "VAL")
}

record(calcout, "BL45P-EA-PANDA-01:HDF5:MaxArrayRate_COUT")
{
    field(INPA, "BL45P-EA-PANDA-01:HDF5:MaxArrayRate")
    field(CALC, "A=0?0:1.0/A")
    field(OUT,  "BL45P-EA-PANDA-01:HDF5:MinCallbackTime PP")
}

record(calc, "BL45P-EA-PANDA-01:HDF5:MaxArrayRate_RBV")
{
    field(INPA, "BL45P-EA-PANDA-01:HDF5:MinCallbackTime_RBV CP")
    field(CALC, "A=0?0:1.0/A")
    field(EGU,  "Hz")
    field(PREC, "3")
    field(SCAN, "Passive")
}

record(ao, "BL45P-EA-PANDA-01:HDF5:MaxByteRate")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)MAX_BYTE_RATE")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
    field(DRVL, "0")
    info(autosaveFields, "VAL")
}

record(ai, "BL45P-EA-PANDA-01:HDF5:MaxByteRate_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA01.HDF,0,5)MAX_BYTE_RATE")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the last execution time of the plugin     #
###################################################################
record(ai, "BL45P-EA-PANDA-01:HDF5:ExecutionTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA01.HDF,0,5)EXECUTION_TIME")
    field(EGU,  "ms")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record requests that the plugin execute again with the    #
#  same NDArray                                                   #
###################################################################
record(bo, "BL45P-EA-PANDA-01:HDF5:ProcessPlugin")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)PROCESS_PLUGIN")
    field(VAL,  "1")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "BL45P-EA-PANDA-01:HDF5:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-01:HDF5:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


record(longout, "BL45P-EA-PANDA-01:HDF5:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:QueueSize")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)QUEUE_SIZE")
    field(PINI, "YES")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:QueueSize_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)QUEUE_SIZE")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:QueueFreeLow")
    field(SCAN, "I/O Intr")
}

record(calcout, "BL45P-EA-PANDA-01:HDF5:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "BL45P-EA-PANDA-01:HDF5:QueueSize")
    field(OUT,  "BL45P-EA-PANDA-01:HDF5:QueueFree.LOW")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "BL45P-EA-PANDA-01:HDF5:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "BL45P-EA-PANDA-01:HDF5:QueueSize")
   field(OUT,  "BL45P-EA-PANDA-01:HDF5:QueueUse.HIGH")
   field(FLNK, "BL45P-EA-PANDA-01:HDF5:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "BL45P-EA-PANDA-01:HDF5:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "BL45P-EA-PANDA-01:HDF5:QueueSize")
   field(OUT,  "BL45P-EA-PANDA-01:HDF5:QueueUse.HIHI")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "BL45P-EA-PANDA-01:HDF5:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "BL45P-EA-PANDA-01:HDF5:QueueSize")
    field(INPB, "BL45P-EA-PANDA-01:HDF5:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:NumThreads")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)NUM_THREADS")
    field(VAL,  "1")
    field(PINI, "YES")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:NumThreads_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)NUM_THREADS")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:MaxThreads_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)MAX_THREADS")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control output array sorting                     #
###################################################################
record(mbbo, "BL45P-EA-PANDA-01:HDF5:SortMode") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)SORT_MODE")
    field(ZRVL, "0")
    field(ZRST, "Unsorted")
    field(ONVL, "1")
    field(ONST, "Sorted")
}

record(mbbi, "BL45P-EA-PANDA-01:HDF5:SortMode_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)SORT_MODE")
    field(ZRVL, "0")
    field(ZRST, "Unsorted")
    field(ONVL, "1")
    field(ONST, "Sorted")
    field(SCAN, "I/O Intr")
}

record(ao, "BL45P-EA-PANDA-01:HDF5:SortTime") {
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)SORT_TIME")
    field(PREC, "3")
    field(VAL, "0.1")
}

record(ai, "BL45P-EA-PANDA-01:HDF5:SortTime_RBV") {
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA01.HDF,0,5)SORT_TIME")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:SortSize")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)SORT_SIZE")
    field(VAL,  "20")
    field(PINI, "YES")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:SortSize_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)SORT_SIZE")
    field(FLNK, "BL45P-EA-PANDA-01:HDF5:SortFreeLow")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:SortFree") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)SORT_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

record(calcout, "BL45P-EA-PANDA-01:HDF5:SortFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "BL45P-EA-PANDA-01:HDF5:SortSize")
    field(OUT,  "BL45P-EA-PANDA-01:HDF5:SortFree.LOW")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:DroppedOutputArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)DROPPED_OUTPUT_ARRAYS")
    field(VAL,  "0")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:DroppedOutputArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)DROPPED_OUTPUT_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:DisorderedArrays")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)DISORDERED_ARRAYS")
    field(PINI, "YES")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:DisorderedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)DISORDERED_ARRAYS")
    field(SCAN, "I/O Intr")
}



###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"BL45P-EA-PANDA-01:HDF5:AsynIO")
{
    field(PORT, "PANDA01.HDF")
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}


# Flush data to file
record(busy, "BL45P-EA-PANDA-01:HDF5:FlushNow")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)HDF5_SWMRFlushNow")
    field(ZNAM, "Done")
    field(ONAM, "Flush")
}

# We replace some fields in records defined in NDFile.template
# File data format 
record(mbbo, "BL45P-EA-PANDA-01:HDF5:FileFormat")
{
    field(ZRST, "HDF5")
    field(ZRVL, "0")
    field(ONST, "Invalid")
    field(ONVL, "1")
}

record(mbbi, "BL45P-EA-PANDA-01:HDF5:FileFormat_RBV")
{
    field(ZRST, "HDF5")
    field(ZRVL, "0")
    field(ONST, "Undefined")
    field(ONVL, "1")
}

record(bo, "BL45P-EA-PANDA-01:HDF5:ChunkSizeAuto")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_chunkSizeAuto")
    field(PINI, "YES")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "1")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-01:HDF5:ChunkSizeAuto_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_chunkSizeAuto")
    field(SCAN, "I/O Intr")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:NumRowChunks")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_nRowChunks")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:NumRowChunks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_nRowChunks")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:NumColChunks")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_nColChunks")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:NumColChunks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_nColChunks")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ChunkSize2")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_chunkSize2")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ChunkSize2_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_chunkSize2")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ChunkSize3")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_chunkSize3")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ChunkSize3_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_chunkSize3")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ChunkSize4")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_chunkSize4")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ChunkSize4_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_chunkSize4")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ChunkSize5")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_chunkSize5")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ChunkSize5_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_chunkSize5")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ChunkSize6")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_chunkSize6")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ChunkSize6_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_chunkSize6")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ChunkSize7")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_chunkSize7")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ChunkSize7_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_chunkSize7")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ChunkSize8")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_chunkSize8")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ChunkSize8_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_chunkSize8")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ChunkSize9")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_chunkSize9")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ChunkSize9_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_chunkSize9")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:NumFramesChunks")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_nFramesChunks")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:NumFramesChunks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_nFramesChunks")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:NDAttributeChunk")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_NDAttributeChunk")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:NDAttributeChunk_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_NDAttributeChunk")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:BoundaryAlign")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_chunkBoundaryAlign")
    field(PINI, "YES")
    field(VAL, "0")
    field(EGU, "bytes")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:BoundaryAlign_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_chunkBoundaryAlign")
    field(SCAN, "I/O Intr")
    field(EGU, "bytes")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:BoundaryThreshold")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_chunkBoundaryThreshold")
    field(PINI, "YES")
    field(VAL, "1")
    field(EGU, "bytes")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:BoundaryThreshold_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_chunkBoundaryThreshold")
    field(SCAN, "I/O Intr")
    field(EGU, "bytes")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:NumExtraDims")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_nExtraDims")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:NumExtraDims_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_nExtraDims")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ExtraDimSizeN")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimSizeN")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ExtraDimSizeN_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimSizeN")
    field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:ExtraDimNameN_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimNameN")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ExtraDimSizeX")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimSizeX")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ExtraDimSizeX_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimSizeX")
    field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:ExtraDimNameX_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimNameX")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ExtraDimSizeY")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimSizeY")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ExtraDimSizeY_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimSizeY")
    field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:ExtraDimNameY_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimNameY")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ExtraDimSize3")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimSize3")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ExtraDimSize3_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimSize3")
    field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:ExtraDimName3_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimName3")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ExtraDimSize4")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimSize4")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ExtraDimSize4_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimSize4")
    field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:ExtraDimName4_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimName4")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ExtraDimSize5")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimSize5")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ExtraDimSize5_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimSize5")
    field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:ExtraDimName5_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimName5")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ExtraDimSize6")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimSize6")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ExtraDimSize6_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimSize6")
    field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:ExtraDimName6_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimName6")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ExtraDimSize7")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimSize7")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ExtraDimSize7_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimSize7")
    field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:ExtraDimName7_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimName7")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ExtraDimSize8")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimSize8")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ExtraDimSize8_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimSize8")
    field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:ExtraDimName8_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimName8")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ExtraDimSize9")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimSize9")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ExtraDimSize9_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimSize9")
    field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:ExtraDimName9_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimName9")
    field(SCAN, "I/O Intr")
}

record(bo, "BL45P-EA-PANDA-01:HDF5:StoreAttr")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_storeAttributes")
    field(PINI, "YES")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-01:HDF5:StoreAttr_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_storeAttributes")
    field(SCAN, "I/O Intr")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

record(bo, "BL45P-EA-PANDA-01:HDF5:StorePerform")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_storePerformance")
    field(PINI, "YES")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-01:HDF5:StorePerform_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_storePerformance")
    field(SCAN, "I/O Intr")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

record(ai, "BL45P-EA-PANDA-01:HDF5:RunTime")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA01.HDF,0,5)HDF5_totalRuntime")
    field(SCAN, "I/O Intr")
    field(PREC, "3")
    field(EGU,  "s")
}

record(ai, "BL45P-EA-PANDA-01:HDF5:IOSpeed")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA01.HDF,0,5)HDF5_totalIoSpeed")
    field(SCAN, "I/O Intr")
    field(PREC, "1")
    field(EGU,  "Mbit/s")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:NumFramesFlush")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_flushNthFrame")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:NumFramesFlush_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_flushNthFrame")
    field(SCAN, "I/O Intr")
}

record(mbbo, "BL45P-EA-PANDA-01:HDF5:Compression")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_compressionType")
    field(PINI, "YES")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "N-bit")
    field(ONVL, "1")
    field(TWST, "szip")
    field(TWVL, "2")
    field(THST, "zlib")
    field(THVL, "3")
    field(FRST, "Blosc")
    field(FRVL, "4")
    field(FVST, "BSLZ4")
    field(FVVL, "5")
    field(SXST, "LZ4")
    field(SXVL, "6")
    field(SVST, "JPEG")
    field(SVVL, "7")
    info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-01:HDF5:Compression_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_compressionType")
    field(SCAN, "I/O Intr")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "N-bit")
    field(ONVL, "1")
    field(TWST, "szip")
    field(TWVL, "2")
    field(THST, "zlib")
    field(THVL, "3")
    field(FRST, "Blosc")
    field(FRVL, "4")
    field(FVST, "BSLZ4")
    field(FVVL, "5")
    field(SXST, "LZ4")
    field(SXVL, "6")
    field(SVST, "JPEG")
    field(SVVL, "7")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:NumDataBits")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_nbitsPrecision")
    field(PINI, "YES")
    field(EGU,  "bit")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:NumDataBits_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_nbitsPrecision")
    field(SCAN, "I/O Intr")
    field(EGU,  "bit")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:DataBitsOffset")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_nbitsOffset")
    field(PINI, "YES")
    field(EGU,  "bit")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:DataBitsOffset_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_nbitsOffset")
    field(SCAN, "I/O Intr")
    field(EGU,  "bit")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:SZipNumPixels")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_szipNumPixels")
    field(PINI, "YES")
    field(EGU,  "bit")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:SZipNumPixels_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_szipNumPixels")
    field(SCAN, "I/O Intr")
    field(EGU,  "bit")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ZLevel")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_zCompressLevel")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ZLevel_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_zCompressLevel")
    field(SCAN, "I/O Intr")
}

record(mbbo, "BL45P-EA-PANDA-01:HDF5:BloscShuffle")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_bloscShuffleType")
    field(PINI, "YES")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "Byte")
    field(ONVL, "1")
    field(TWST, "Bit")
    field(TWVL, "2")
    info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-01:HDF5:BloscShuffle_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_bloscShuffleType")
    field(SCAN, "I/O Intr")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "Byte")
    field(ONVL, "1")
    field(TWST, "Bit")
    field(TWVL, "2")
}

record(mbbo, "BL45P-EA-PANDA-01:HDF5:BloscCompressor")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_bloscCompressor")
    field(PINI, "YES")
    field(ZRST, "BloscLZ")
    field(ZRVL, "0")
    field(ONST, "LZ4")
    field(ONVL, "1")
    field(TWST, "LZ4HC")
    field(TWVL, "2")
    field(THST, "SNAPPY")
    field(THVL, "3")
    field(FRST, "ZLIB")
    field(FRVL, "4")
    field(FVST, "ZSTD")
    field(FVVL, "5")
    info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-01:HDF5:BloscCompressor_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_bloscCompressor")
    field(SCAN, "I/O Intr")
    field(ZRST, "BloscLZ")
    field(ZRVL, "0")
    field(ONST, "LZ4")
    field(ONVL, "1")
    field(TWST, "LZ4HC")
    field(TWVL, "2")
    field(THST, "SNAPPY")
    field(THVL, "3")
    field(FRST, "ZLIB")
    field(FRVL, "4")
    field(FVST, "ZSTD")
    field(FVVL, "5")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:BloscLevel")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_bloscCompressLevel")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:BloscLevel_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_bloscCompressLevel")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:JPEGQuality")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_jpegQuality")
    field(VAL, "90")
    field(DRVL, "1")
    field(DRVH, "100")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:JPEGQuality_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_jpegQuality")
    field(SCAN, "I/O Intr")
}

record(bo, "BL45P-EA-PANDA-01:HDF5:DimAttDatasets")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_dimAttDatasets")
    field(PINI, "YES")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-01:HDF5:DimAttDatasets_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_dimAttDatasets")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}

# File path.
# % autosave 2 
#record(waveform, "BL45P-EA-PANDA-01:HDF5:XMLPath")
#{
#    field(PINI, "YES")
#    field(DTYP, "asynOctetWrite")
#    field(INP,  "@asyn(PANDA01.HDF,0,5)HDF5_layoutDirectory")
#    field(FTVL, "CHAR")
#    field(NELM, "256")
#}

record(waveform, "BL45P-EA-PANDA-01:HDF5:XMLErrorMsg_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA01.HDF,0,5)HDF5_layoutErrorMsg")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(bi, "BL45P-EA-PANDA-01:HDF5:XMLValid_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA01.HDF,0,5)HDF5_layoutValid")
    field(ZNAM, "No")
    field(ZSV,  "MAJOR")
    field(ONAM, "Yes")
    field(OSV,  "NO_ALARM")
    field(SCAN, "I/O Intr")
}

# Filename
# % autosave 2 
record(waveform, "BL45P-EA-PANDA-01:HDF5:XMLFileName")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(PANDA01.HDF,0,5)HDF5_layoutFilename")
    field(FTVL, "CHAR")
    field(NELM, "2048")
    info(autosaveFields, "VAL")
}

record(waveform, "BL45P-EA-PANDA-01:HDF5:XMLFileName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA01.HDF,0,5)HDF5_layoutFilename")
    field(FTVL, "CHAR")
    field(NELM, "2048")
    field(SCAN, "I/O Intr")
}

record(bi, "BL45P-EA-PANDA-01:HDF5:SWMRSupported_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_SWMRSupported")
    field(SCAN, "I/O Intr")
    field(ZNAM, "Not Supported")
    field(ONAM, "Supported")
}

record(bo, "BL45P-EA-PANDA-01:HDF5:SWMRMode")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_SWMRMode")
    field(PINI, "YES")
    field(ZNAM, "Off")
    field(ONAM, "On")
}

record(bi, "BL45P-EA-PANDA-01:HDF5:SWMRMode_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_SWMRMode")
    field(SCAN, "I/O Intr")
    field(ZNAM, "Off")
    field(ONAM, "On")
}

record(bi, "BL45P-EA-PANDA-01:HDF5:SWMRActive_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_SWMRRunning")
    field(SCAN, "I/O Intr")
    field(ZNAM, "Off")
    field(ONAM, "Active")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:SWMRCbCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_SWMRCbCounter")
    field(SCAN, "I/O Intr")
}

record(bo, "BL45P-EA-PANDA-01:HDF5:PositionMode")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_posRunning")
    field(PINI, "YES")
    field(ZNAM, "Off")
    field(ONAM, "On")
}

record(bi, "BL45P-EA-PANDA-01:HDF5:PositionMode_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_posRunning")
    field(SCAN, "I/O Intr")
    field(ZNAM, "Off")
    field(ONAM, "On")
}

record(stringout, "BL45P-EA-PANDA-01:HDF5:PosNameDimN")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_posNameDimN")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:PosNameDimN_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_posNameDimN")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-01:HDF5:PosNameDimX")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_posNameDimX")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:PosNameDimX_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_posNameDimX")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-01:HDF5:PosNameDimY")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_posNameDimY")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:PosNameDimY_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_posNameDimY")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-01:HDF5:PosNameDim3")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_posNameDim3")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:PosNameDim3_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_posNameDim3")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-01:HDF5:PosNameDim4")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_posNameDim4")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:PosNameDim4_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_posNameDim4")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-01:HDF5:PosNameDim5")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_posNameDim5")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:PosNameDim5_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_posNameDim5")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-01:HDF5:PosNameDim6")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_posNameDim6")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:PosNameDim6_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_posNameDim6")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-01:HDF5:PosNameDim7")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_posNameDim7")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:PosNameDim7_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_posNameDim7")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-01:HDF5:PosNameDim8")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_posNameDim8")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:PosNameDim8_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_posNameDim8")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-01:HDF5:PosNameDim9")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_posNameDim9")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:PosNameDim9_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_posNameDim9")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-01:HDF5:PosIndexDimN")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_posIndexDimN")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:PosIndexDimN_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_posIndexDimN")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-01:HDF5:PosIndexDimX")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_posIndexDimX")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:PosIndexDimX_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_posIndexDimX")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-01:HDF5:PosIndexDimY")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_posIndexDimY")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:PosIndexDimY_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_posIndexDimY")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-01:HDF5:PosIndexDim3")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_posIndexDim3")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:PosIndexDim3_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_posIndexDim3")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-01:HDF5:PosIndexDim4")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_posIndexDim4")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:PosIndexDim4_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_posIndexDim4")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-01:HDF5:PosIndexDim5")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_posIndexDim5")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:PosIndexDim5_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_posIndexDim5")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-01:HDF5:PosIndexDim6")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_posIndexDim6")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:PosIndexDim6_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_posIndexDim6")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-01:HDF5:PosIndexDim7")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_posIndexDim7")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:PosIndexDim7_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_posIndexDim7")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-01:HDF5:PosIndexDim8")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_posIndexDim8")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:PosIndexDim8_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_posIndexDim8")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-01:HDF5:PosIndexDim9")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_posIndexDim9")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-01:HDF5:PosIndexDim9_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_posIndexDim9")
    field(SCAN, "I/O Intr")
}

record(ao, "BL45P-EA-PANDA-01:HDF5:FillValue")
{
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(PANDA01.HDF,0,5)HDF5_fillValue")
    field(PINI, "YES")
    field(PREC, "1")
}

record(ai, "BL45P-EA-PANDA-01:HDF5:FillValue_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA01.HDF,0,5)HDF5_fillValue")
    field(SCAN, "I/O Intr")
    field(PREC, "1")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ExtraDimChunkX")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimChunkX")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ExtraDimChunkX_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimChunkX")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ExtraDimChunkY")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimChunkY")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ExtraDimChunkY_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimChunkY")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ExtraDimChunk3")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimChunk3")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ExtraDimChunk3_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimChunk3")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ExtraDimChunk4")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimChunk4")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ExtraDimChunk4_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimChunk4")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ExtraDimChunk5")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimChunk5")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ExtraDimChunk5_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimChunk5")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ExtraDimChunk6")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimChunk6")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ExtraDimChunk6_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimChunk6")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ExtraDimChunk7")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimChunk7")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ExtraDimChunk7_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimChunk7")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ExtraDimChunk8")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimChunk8")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ExtraDimChunk8_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimChunk8")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-01:HDF5:ExtraDimChunk9")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimChunk9")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-01:HDF5:ExtraDimChunk9_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA01.HDF,0,5)HDF5_extraDimChunk9")
    field(SCAN, "I/O Intr")
}
#=================================================================#
# Template file: NDFileHDF5.template
# Database for NDFileHDF5 driver, which saves files for NDArray data.

# Macros:
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, ADDR, Asyn Port address
# % macro, TIMEOUT, Asyn Port timeout
# % macro, XMLSIZE, Number of elements of the XML layout waveform record

# This associates the template with an edm screen
# % gui, PANDA02.HDF, edmtab, NDFileHDF5.edl, P=BL45P-EA-PANDA-02,R=:HDF5:

# This associates a BOY screen with the template
# % gui, PANDA02.HDF, boydetail,ADApp_opi/dls/hdf5_detail.opi, P=BL45P-EA-PANDA-02, R=:HDF5:, DESC=HDF5 File Test
# % gui, PANDA02.HDF, boyembed, ADApp_opi/dls/hdf5_embed_box.opi, P=BL45P-EA-PANDA-02, R=:HDF5:, DESC=HDF5 File Test
# % gui, PANDA02.HDF, boyembed, ADApp_opi/dls/hdf5_embed.opi, P=BL45P-EA-PANDA-02, R=:HDF5:, DESC=HDF5 File Test

# Info
# % gui, PANDA02.HDF, groupHeading, Info
# % gui, PANDA02.HDF, readback, Port name,   BL45P-EA-PANDA-02:HDF5:PortName_RBV
# % gui, PANDA02.HDF, readback, Plugin type,   BL45P-EA-PANDA-02:HDF5:PluginType_RBV
# Input
# % gui, PANDA02.HDF, demandString, Input,   BL45P-EA-PANDA-02:HDF5:NDArrayPort
# % gui, PANDA02.HDF, readback, Input,   BL45P-EA-PANDA-02:HDF5:NDArrayPort_RBV

# % gui, PANDA02.HDF, groupHeading, Callback
# % gui, PANDA02.HDF, enum, Callbacks,   BL45P-EA-PANDA-02:HDF5:EnableCallbacks
# % gui, PANDA02.HDF, statusbits, Callbacks,   BL45P-EA-PANDA-02:HDF5:EnableCallbacks_RBV
# % gui, PANDA02.HDF, demand, Min Callback Time,   BL45P-EA-PANDA-02:HDF5:MinCallbackTime
# % gui, PANDA02.HDF, readback, Min Callback Time,   BL45P-EA-PANDA-02:HDF5:MinCallbackTime_RBV
# % gui, PANDA02.HDF, enum, Block Callbacks,   BL45P-EA-PANDA-02:HDF5:BlockingCallbacks
# % gui, PANDA02.HDF, statusbits, Block Callbacks,   BL45P-EA-PANDA-02:HDF5:BlockingCallbacks_RBV

# % gui, PANDA02.HDF, groupHeading, Counters
# % gui, PANDA02.HDF, demand, Array Counter,   BL45P-EA-PANDA-02:HDF5:ArrayCounter
# % gui, PANDA02.HDF, readback, Array Counter,   BL45P-EA-PANDA-02:HDF5:ArrayCounter_RBV
# % gui, PANDA02.HDF, readback, Array Rate (fps),   BL45P-EA-PANDA-02:HDF5:ArrayRate_RBV
# % gui, PANDA02.HDF, readback, Queue Use,   BL45P-EA-PANDA-02:HDF5:QueueUse
# % gui, PANDA02.HDF, readback, Queue Size,   BL45P-EA-PANDA-02:HDF5:QueueSize
# % gui, PANDA02.HDF, demand, Dropped Arrays,   BL45P-EA-PANDA-02:HDF5:DroppedArrays
# % gui, PANDA02.HDF, readback, Dropped Arrays,   BL45P-EA-PANDA-02:HDF5:DroppedArrays_RBV

# % gui, PANDA02.HDF, groupHeading, Array Settings
# % gui, PANDA02.HDF, readback, Num Dimensions,   BL45P-EA-PANDA-02:HDF5:NDimensions_RBV
# % gui, PANDA02.HDF, readback, Dim 0 Size,   BL45P-EA-PANDA-02:HDF5:ArraySize0_RBV
# % gui, PANDA02.HDF, readback, Dim 1 Size,   BL45P-EA-PANDA-02:HDF5:ArraySize1_RBV
# % gui, PANDA02.HDF, readback, Dim 2 Size,   BL45P-EA-PANDA-02:HDF5:ArraySize2_RBV
# % gui, PANDA02.HDF, readback, Input Data Type,   BL45P-EA-PANDA-02:HDF5:DataType_RBV
# % gui, PANDA02.HDF, readback, Colour Mode,   BL45P-EA-PANDA-02:HDF5:ColorMode_RBV
# % gui, PANDA02.HDF, readback, Bayer Pattern,   BL45P-EA-PANDA-02:HDF5:BayerPattern_RBV
# % gui, PANDA02.HDF, readback, Unique id,   BL45P-EA-PANDA-02:HDF5:UniqueId_RBV
# % gui, PANDA02.HDF, readback, Timestamp,   BL45P-EA-PANDA-02:HDF5:TimeStamp_RBV
# File
# % gui, PANDA02.HDF, groupHeading, File
# % gui, PANDA02.HDF, demandString, File Path,   BL45P-EA-PANDA-02:HDF5:FilePath
# % gui, PANDA02.HDF, readback, File Path,   BL45P-EA-PANDA-02:HDF5:FilePath_RBV
# % gui, PANDA02.HDF, statusbits, File Path Exists,   BL45P-EA-PANDA-02:HDF5:FilePathExists_RBV
# % gui, PANDA02.HDF, demand, File Name,   BL45P-EA-PANDA-02:HDF5:FileName
# % gui, PANDA02.HDF, readback, File Name,   BL45P-EA-PANDA-02:HDF5:FileName_RBV
# % gui, PANDA02.HDF, demand, File Number,   BL45P-EA-PANDA-02:HDF5:FileNumber
# % gui, PANDA02.HDF, readback, File Number,   BL45P-EA-PANDA-02:HDF5:FileNumber_RBV
# % gui, PANDA02.HDF, enum, Auto Increment,   BL45P-EA-PANDA-02:HDF5:AutoIncrement
# % gui, PANDA02.HDF, statusbits, Auto Increment,   BL45P-EA-PANDA-02:HDF5:AutoIncrement_RBV
# % gui, PANDA02.HDF, demand, File Format,   BL45P-EA-PANDA-02:HDF5:FileTemplate
# % gui, PANDA02.HDF, readback, File Format,   BL45P-EA-PANDA-02:HDF5:FileTemplate_RBV
# % gui, PANDA02.HDF, demand, N to Capture,   BL45P-EA-PANDA-02:HDF5:NumCapture
# % gui, PANDA02.HDF, readback, N to Capture,   BL45P-EA-PANDA-02:HDF5:NumCapture_RBV
# % gui, PANDA02.HDF, readback, N Captured,   BL45P-EA-PANDA-02:HDF5:NumCaptured_RBV
# % gui, PANDA02.HDF, enum, Auto Save,   BL45P-EA-PANDA-02:HDF5:AutoSave
# % gui, PANDA02.HDF, statusbits, Auto Save ,   BL45P-EA-PANDA-02:HDF5:AutoSave_RBV
# % gui, PANDA02.HDF, enum, Capture mode,   BL45P-EA-PANDA-02:HDF5:FileWriteMode
# % gui, PANDA02.HDF, readback, Capture mode,   BL45P-EA-PANDA-02:HDF5:FileWriteMode_RBV
# % gui, PANDA02.HDF, enum, Capture,   BL45P-EA-PANDA-02:HDF5:Capture
# % gui, PANDA02.HDF, readback, Capture,   BL45P-EA-PANDA-02:HDF5:Capture_RBV
# % gui, PANDA02.HDF, readback, Write Message,   BL45P-EA-PANDA-02:HDF5:WriteMessage
# % gui, PANDA02.HDF, readback, Write Status,   BL45P-EA-PANDA-02:HDF5:WriteStatus
# % gui, PANDA02.HDF, readback, Write Filename,   BL45P-EA-PANDA-02:HDF5:FullFileName_RBV
# % gui, PANDA02.HDF, enum, Lazy Open,   BL45P-EA-PANDA-02:HDF5:LazyOpen
# % gui, PANDA02.HDF, readback, Lazy Open,   BL45P-EA-PANDA-02:HDF5:LazyOpen_RBV
# % gui, PANDA02.HDF, demand, Temporary Suffix,   BL45P-EA-PANDA-02:HDF5:TempSuffix
# % gui, PANDA02.HDF, readback, Temporary Suffix,   BL45P-EA-PANDA-02:HDF5:TempSuffix_RBV
# % gui, PANDA02.HDF, demand, Create Directories,   BL45P-EA-PANDA-02:HDF5:CreateDirectory
# % gui, PANDA02.HDF, readback, Create Directories,   BL45P-EA-PANDA-02:HDF5:CreateDirectory_RBV
# HDF5
# % gui, PANDA02.HDF, groupHeading, HDF5
# % gui, PANDA02.HDF, demand, Extra Dimensions,   BL45P-EA-PANDA-02:HDF5:NumExtraDims
# % gui, PANDA02.HDF, readback, Extra Dimensions,   BL45P-EA-PANDA-02:HDF5:NumExtraDims_RBV
# % gui, PANDA02.HDF, demand, Rows per Chunk,   BL45P-EA-PANDA-02:HDF5:NumRowChunks
# % gui, PANDA02.HDF, readback, Rows per Chunk,   BL45P-EA-PANDA-02:HDF5:NumRowChunks_RBV
# % gui, PANDA02.HDF, demand, Cols per Chunk,   BL45P-EA-PANDA-02:HDF5:NumColChunks
# % gui, PANDA02.HDF, readback, Cols per Chunk,   BL45P-EA-PANDA-02:HDF5:NumColChunks_RBV
# % gui, PANDA02.HDF, demand, Frames per Chunk,   BL45P-EA-PANDA-02:HDF5:NumFramesChunks
# % gui, PANDA02.HDF, readback, Frames per Chunk,   BL45P-EA-PANDA-02:HDF5:NumFramesChunks_RBV
# % gui, PANDA02.HDF, demand, Boundary Alignment,   BL45P-EA-PANDA-02:HDF5:BoundaryAlign
# % gui, PANDA02.HDF, readback, Boundary Alignment,   BL45P-EA-PANDA-02:HDF5:BoundaryAlign_RBV
# % gui, PANDA02.HDF, demand, Boundary Threshold,   BL45P-EA-PANDA-02:HDF5:BoundaryThreshold
# % gui, PANDA02.HDF, readback, Boundary Threshold,   BL45P-EA-PANDA-02:HDF5:BoundaryThreshold_RBV
# % gui, PANDA02.HDF, demand, Flush on Nth Frame,   BL45P-EA-PANDA-02:HDF5:NumFramesFlush
# % gui, PANDA02.HDF, readback, Flush on Nth Frame,   BL45P-EA-PANDA-02:HDF5:NumFramesFlush_RBV
# % gui, PANDA02.HDF, enum, Store Attribute Data,   BL45P-EA-PANDA-02:HDF5:StoreAttr
# % gui, PANDA02.HDF, readback, Store Attribute Data,   BL45P-EA-PANDA-02:HDF5:StoreAttr_RBV
# % gui, PANDA02.HDF, enum, Store Performance Data,   BL45P-EA-PANDA-02:HDF5:StorePerform
# % gui, PANDA02.HDF, readback, Store Performance Data,   BL45P-EA-PANDA-02:HDF5:StorePerform_RBV
# % gui, PANDA02.HDF, readback, Total Write Time,   BL45P-EA-PANDA-02:HDF5:RunTime
# % gui, PANDA02.HDF, readback, Total Write Speed,   BL45P-EA-PANDA-02:HDF5:IOSpeed
# % gui, PANDA02.HDF, enum, Compression Type,   BL45P-EA-PANDA-02:HDF5:Compression
# % gui, PANDA02.HDF, readback, Compression Type,   BL45P-EA-PANDA-02:HDF5:Compression_RBV
# % gui, PANDA02.HDF, demand, N-bit bits per Pixel,   BL45P-EA-PANDA-02:HDF5:NumDataBits
# % gui, PANDA02.HDF, readback, N-bit bits per Pixel,   BL45P-EA-PANDA-02:HDF5:NumDataBits_RBV
# % gui, PANDA02.HDF, demand, N-bit Offset,   BL45P-EA-PANDA-02:HDF5:DataBitsOffset
# % gui, PANDA02.HDF, readback, N-bit Offset,   BL45P-EA-PANDA-02:HDF5:DataBitsOffset_RBV
# % gui, PANDA02.HDF, demand, Szip Filter Size,   BL45P-EA-PANDA-02:HDF5:SZipNumPixels
# % gui, PANDA02.HDF, readback, Szip Filter Size,   BL45P-EA-PANDA-02:HDF5:SZipNumPixels_RBV
# % gui, PANDA02.HDF, demand, Zlib Deflate Level,   BL45P-EA-PANDA-02:HDF5:ZLevel
# % gui, PANDA02.HDF, readback, Zlib Deflate Level,   BL45P-EA-PANDA-02:HDF5:ZLevel_RBV

# Memory
# % gui, PANDA02.HDF, groupHeading, Memory
# % gui, PANDA02.HDF, readback, Max memory,   BL45P-EA-PANDA-02:HDF5:PoolMaxMem
# % gui, PANDA02.HDF, readback, Max buffers,   BL45P-EA-PANDA-02:HDF5:PoolMaxBuffers
# % gui, PANDA02.HDF, readback, Used memory,   BL45P-EA-PANDA-02:HDF5:PoolUsedMem
# % gui, PANDA02.HDF, readback, Allocated buffers,   BL45P-EA-PANDA-02:HDF5:PoolAllocBuffers
# % gui, PANDA02.HDF, readback, Free buffers,   BL45P-EA-PANDA-02:HDF5:PoolFreeBuffers

#=================================================================#
# Template file: NDFile.template
# Database for NDFile driver, which saves files for NDArray data.
# Mark Rivers
# April 7, 2008

# Macros:
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, TIMEOUT, Timeout
# % macro, ADDR, Asyn Port address
# % macro, SCANRATE, Chosen Scan Rate for cpu intensive PVs

###################################################################
#  These records control file I/O                                 # 
###################################################################

# File path.
record(waveform, "BL45P-EA-PANDA-02:HDF5:FilePath")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(PANDA02.HDF,0,5)FILE_PATH")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

record(waveform, "BL45P-EA-PANDA-02:HDF5:FilePath_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA02.HDF,0,5)FILE_PATH")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(bi, "BL45P-EA-PANDA-02:HDF5:FilePathExists_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)FILE_PATH_EXISTS")
    field(ZNAM, "No")
    field(ZSV,  "MAJOR")
    field(ONAM, "Yes")
    field(OSV,  "NO_ALARM")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:CreateDirectory")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)CREATE_DIR")
    field(VAL,  "0" )
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:CreateDirectory_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)CREATE_DIR")
    field(VAL,  "")
    field(SCAN, "I/O Intr")
}

# Filename
record(waveform, "BL45P-EA-PANDA-02:HDF5:FileName")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(PANDA02.HDF,0,5)FILE_NAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

record(waveform, "BL45P-EA-PANDA-02:HDF5:FileName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA02.HDF,0,5)FILE_NAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:FileNumber")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)FILE_NUMBER")
    field(VAL,  "1")
    info(asyn:READBACK, "1")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:FileNumber_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)FILE_NUMBER")
    field(SCAN, "I/O Intr")
}

# Autoincrement flag
record(bo, "BL45P-EA-PANDA-02:HDF5:AutoIncrement")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)AUTO_INCREMENT")
    field(VAL,  "1")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-02:HDF5:AutoIncrement_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)AUTO_INCREMENT")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}

# File template
record(waveform, "BL45P-EA-PANDA-02:HDF5:FileTemplate")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(PANDA02.HDF,0,5)FILE_TEMPLATE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

record(waveform, "BL45P-EA-PANDA-02:HDF5:FileTemplate_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA02.HDF,0,5)FILE_TEMPLATE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

# Full filename, including path
record(waveform, "BL45P-EA-PANDA-02:HDF5:FullFileName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA02.HDF,0,5)FULL_FILE_NAME")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

# Autosave flag
record(bo, "BL45P-EA-PANDA-02:HDF5:AutoSave")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)AUTO_SAVE")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-02:HDF5:AutoSave_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)AUTO_SAVE")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}

# Write file
record(busy, "BL45P-EA-PANDA-02:HDF5:WriteFile")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)WRITE_FILE")
    field(ZNAM, "Done")
    field(ONAM, "Write")
}

record(bi, "BL45P-EA-PANDA-02:HDF5:WriteFile_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)WRITE_FILE")
    field(ZNAM, "Done")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Writing")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}


# Read file
record(busy, "BL45P-EA-PANDA-02:HDF5:ReadFile")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)READ_FILE")
    field(ZNAM, "Done")
    field(ONAM, "Read")
}

record(bi, "BL45P-EA-PANDA-02:HDF5:ReadFile_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)READ_FILE")
    field(ZNAM, "Done")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Reading")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

# File data format 
record(mbbo, "BL45P-EA-PANDA-02:HDF5:FileFormat")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)FILE_FORMAT")
    field(VAL,  "0")
    field(ZRST, "Undefined")
    field(ZRVL, "0")
    field(ONST, "Invalid")
    field(ONVL, "1")
    info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-02:HDF5:FileFormat_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)FILE_FORMAT")
    field(ZRST, "netCDF")
    field(ZRVL, "0")
    field(ONST, "Undefined")
    field(ONVL, "1")
    field(SCAN, "I/O Intr")
}

# File save mode 
record(mbbo, "BL45P-EA-PANDA-02:HDF5:FileWriteMode")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)WRITE_MODE")
    field(VAL,  "0")
    field(ZRST, "Single")
    field(ZRVL, "0")
    field(ONST, "Capture")
    field(ONVL, "1")
    field(TWST, "Stream")
    field(TWVL, "2")
    info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-02:HDF5:FileWriteMode_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)WRITE_MODE")
    field(ZRST, "Single")
    field(ZRVL, "0")
    field(ONST, "Capture")
    field(ONVL, "1")
    field(TWST, "Stream")
    field(TWVL, "2")
    field(SCAN, "I/O Intr")
}

# Capture data
record(busy, "BL45P-EA-PANDA-02:HDF5:Capture")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)CAPTURE")
    field(ZNAM, "Done")
    field(ONAM, "Capture")
}

record(bi, "BL45P-EA-PANDA-02:HDF5:Capture_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)CAPTURE")
    field(ZNAM, "Done")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Capturing")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:NumCapture")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)NUM_CAPTURE")
    field(VAL,  "1")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:NumCapture_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)NUM_CAPTURE")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:NumCaptured_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)NUM_CAPTURED")
    field(SCAN, "I/O Intr")
}

# Delete driver file flag
record(bo, "BL45P-EA-PANDA-02:HDF5:DeleteDriverFile")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)DELETE_DRIVER_FILE")
    field(VAL,  "0")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-02:HDF5:DeleteDriverFile_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)DELETE_DRIVER_FILE")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}

record(bi, "BL45P-EA-PANDA-02:HDF5:WriteStatus")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)WRITE_STATUS")
    field(ZNAM, "Write OK")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Write error")
    field(OSV,  "MAJOR")
    field(SCAN, "I/O Intr")
}

record(waveform, "BL45P-EA-PANDA-02:HDF5:WriteMessage")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA02.HDF,0,5)WRITE_MESSAGE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(bo, "BL45P-EA-PANDA-02:HDF5:LazyOpen")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)FILE_LAZY_OPEN")
    field(VAL,  "0")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-02:HDF5:LazyOpen_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)FILE_LAZY_OPEN")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-02:HDF5:TempSuffix")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)FILE_TEMP_SUFFIX")
    field(VAL,  "")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:TempSuffix_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA02.HDF,0,5)FILE_TEMP_SUFFIX")
    field(VAL,  "")
    field(SCAN, "I/O Intr")
}
#=================================================================#
# Template file: NDPluginBase.template
# Database for NDPluginBase, i.e. records common to all plugins
# Mark Rivers
# April 25, 2008

# Macros:
# % macro, P, Device Prefix
# % macro, R, Device Suffix
# % macro, PORT, Asyn Port name
# % macro, TIMEOUT, Timeout
# % macro, ADDR, Asyn Port address
# % macro, NDARRAY_PORT, Input Array Port
# % macro, NDARRAY_ADDR, Input Array Address
# % macro, ENABLED, Plugin Enabled at startup?
# % macro, SCANRATE, Chosen Scan Rate for cpu intensive PVs

#=================================================================#
# Template file: NDArrayBase.template
# Database for area detector control using asyn driver and standard asyn device support
# Mark Rivers
# March 9, 2008

###################################################################
#  This record contains the version of ADCore                     #
###################################################################

record(stringin, "BL45P-EA-PANDA-02:HDF5:ADCoreVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.HDF,0,5)ADCORE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the version of the driver or plugin       #
###################################################################

record(stringin, "BL45P-EA-PANDA-02:HDF5:DriverVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.HDF,0,5)DRIVER_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the asyn port name of this detector       #
###################################################################

record(stringin, "BL45P-EA-PANDA-02:HDF5:PortName_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.HDF,0,5)PORT_NAME_SELF")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records contain basic information about the detector     # 
###################################################################

record(stringin, "BL45P-EA-PANDA-02:HDF5:Manufacturer_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.HDF,0,5)MANUFACTURER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:Model_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.HDF,0,5)MODEL")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:SerialNumber_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.HDF,0,5)SERIAL_NUMBER")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:SDKVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.HDF,0,5)SDK_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:FirmwareVersion_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.HDF,0,5)FIRMWARE_VERSION")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control acquisition start and stop               #
###################################################################

record(bo, "BL45P-EA-PANDA-02:HDF5:Acquire") {
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(PANDA02.HDF,0,5)ACQUIRE")
   field(ZNAM, "Done")
   field(ONAM, "Acquire")
   field(VAL,  "0")
   field(FLNK, "BL45P-EA-PANDA-02:HDF5:SetAcquireBusy")
   info(asyn:READBACK, "1")
}

record(bi, "BL45P-EA-PANDA-02:HDF5:Acquire_RBV") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(PANDA02.HDF,0,5)ACQUIRE")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "BL45P-EA-PANDA-02:HDF5:SetAcquireBusy")
{
    field(INPA, "BL45P-EA-PANDA-02:HDF5:Acquire NPP")
    field(CALC, "A")
    field(OOPT, "Transition To Non-zero")
    field(OUT,  "BL45P-EA-PANDA-02:HDF5:AcquireBusy PP")
}

record(busy, "BL45P-EA-PANDA-02:HDF5:AcquireBusy") {
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(VAL,  "0")
}

record(bi, "BL45P-EA-PANDA-02:HDF5:AcquireBusyCB") {
   field(DTYP, "asynInt32")
   field(INP, "@asyn(PANDA02.HDF,0,5)ACQUIRE_BUSY")
   field(ZNAM, "Done")
   field(ZSV,  "NO_ALARM")
   field(ONAM, "Acquiring")
   field(OSV,  "MINOR")
   field(SCAN, "I/O Intr")
}

record(calcout, "BL45P-EA-PANDA-02:HDF5:ClearAcquireBusy") {
    field(INPA, "BL45P-EA-PANDA-02:HDF5:AcquireBusyCB CP")
    field(CALC, "A")
    field(OOPT, "Transition To Zero")
    field(OUT,  "BL45P-EA-PANDA-02:HDF5:AcquireBusy PP")
}

record(bo, "BL45P-EA-PANDA-02:HDF5:WaitForPlugins") {
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT, "@asyn(PANDA02.HDF,0,5)WAIT_FOR_PLUGINS")
   field(ZNAM, "No")
   field(ONAM, "Yes")
   field(VAL,  "0")
}

###################################################################
#  These records are the array size and data type                 #
###################################################################
# The number of dimensions
record(longout, "BL45P-EA-PANDA-02:HDF5:NDimensions")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)ARRAY_NDIMENSIONS")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:NDimensions_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)ARRAY_NDIMENSIONS")
    field(SCAN, "I/O Intr")
}

# The array dimensions waveform records
record(waveform, "BL45P-EA-PANDA-02:HDF5:Dimensions")
{
    field(DTYP, "asynInt32ArrayOut")
    field(INP,  "@asyn(PANDA02.HDF,0,5)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:Dim0SA")
}

record(subArray, "BL45P-EA-PANDA-02:HDF5:Dim0SA")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:ArraySize0")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ArraySize0")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dim0SA")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:Dim1SA")
}

record(subArray, "BL45P-EA-PANDA-02:HDF5:Dim1SA")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:ArraySize1")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ArraySize1")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dim1SA")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:Dim2SA")
}

record(subArray, "BL45P-EA-PANDA-02:HDF5:Dim2SA")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:ArraySize2")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ArraySize2")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dim2SA")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:Dim3SA")
}

record(subArray, "BL45P-EA-PANDA-02:HDF5:Dim3SA")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:ArraySize3")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ArraySize3")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dim3SA")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:Dim4SA")
}

record(subArray, "BL45P-EA-PANDA-02:HDF5:Dim4SA")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:ArraySize4")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ArraySize4")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dim4SA")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:Dim5SA")
}

record(subArray, "BL45P-EA-PANDA-02:HDF5:Dim5SA")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:ArraySize5")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ArraySize5")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dim5SA")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:Dim6SA")
}

record(subArray, "BL45P-EA-PANDA-02:HDF5:Dim6SA")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:ArraySize6")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ArraySize6")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dim6SA")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:Dim7SA")
}

record(subArray, "BL45P-EA-PANDA-02:HDF5:Dim7SA")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:ArraySize7")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ArraySize7")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dim7SA")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:Dim8SA")
}

record(subArray, "BL45P-EA-PANDA-02:HDF5:Dim8SA")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:ArraySize8")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ArraySize8")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dim8SA")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:Dim9SA")
}

record(subArray, "BL45P-EA-PANDA-02:HDF5:Dim9SA")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dimensions NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:ArraySize9")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ArraySize9")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dim9SA")
}


record(waveform, "BL45P-EA-PANDA-02:HDF5:Dimensions_RBV")
{
    field(DTYP, "asynInt32ArrayIn")
    field(INP,  "@asyn(PANDA02.HDF,0,5)ARRAY_DIMENSIONS")
    field(FTVL, "LONG")
    field(NELM, "10")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:Dim0SA_RBV")
    field(SCAN, "I/O Intr")
}

record(subArray, "BL45P-EA-PANDA-02:HDF5:Dim0SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "0")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:ArraySize0_RBV")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ArraySize0_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dim0SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:Dim1SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:HDF5:Dim1SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "1")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:ArraySize1_RBV")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ArraySize1_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dim1SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:Dim2SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:HDF5:Dim2SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "2")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:ArraySize2_RBV")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ArraySize2_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dim2SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:Dim3SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:HDF5:Dim3SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "3")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:ArraySize3_RBV")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ArraySize3_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dim3SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:Dim4SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:HDF5:Dim4SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "4")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:ArraySize4_RBV")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ArraySize4_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dim4SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:Dim5SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:HDF5:Dim5SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "5")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:ArraySize5_RBV")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ArraySize5_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dim5SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:Dim6SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:HDF5:Dim6SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "6")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:ArraySize6_RBV")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ArraySize6_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dim6SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:Dim7SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:HDF5:Dim7SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "7")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:ArraySize7_RBV")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ArraySize7_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dim7SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:Dim8SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:HDF5:Dim8SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "8")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:ArraySize8_RBV")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ArraySize8_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dim8SA_RBV")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:Dim9SA_RBV")
}

record(subArray, "BL45P-EA-PANDA-02:HDF5:Dim9SA_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dimensions_RBV NPP NMS")
    field(FTVL, "LONG")
    field(MALM, "10")
    field(NELM, "1")
    field(INDX, "9")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:ArraySize9_RBV")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ArraySize9_RBV")
{
    field(INP,  "BL45P-EA-PANDA-02:HDF5:Dim9SA_RBV")
}


record(mbbi, "BL45P-EA-PANDA-02:HDF5:BayerPattern_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.HDF,0,5)BAYER_PATTERN")
   field(ZRST, "RGGB")
   field(ZRVL, "0")
   field(ONST, "GBRG")
   field(ONVL, "1")
   field(TWST, "GRBG")
   field(TWVL, "2")
   field(THST, "BGGR")
   field(THVL, "3")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ArraySizeX_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.HDF,0,5)ARRAY_SIZE_X")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ArraySizeY_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.HDF,0,5)ARRAY_SIZE_Y")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ArraySizeZ_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.HDF,0,5)ARRAY_SIZE_Z")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ArraySize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.HDF,0,5)ARRAY_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records have information on the compression              # 
###################################################################
record(stringin, "BL45P-EA-PANDA-02:HDF5:Codec_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.HDF,0,5)CODEC")
   field(VAL,  "")
   field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:CompressedSize_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.HDF,0,5)COMPRESSED_SIZE")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the data type                            # 
###################################################################

record(mbbo, "BL45P-EA-PANDA-02:HDF5:DataType")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA02.HDF,0,5)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(VAL,  "0")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-02:HDF5:DataType_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.HDF,0,5)DATA_TYPE")
   field(ZRST, "Int8")
   field(ZRVL, "0")
   field(ONST, "UInt8")
   field(ONVL, "1")
   field(TWST, "Int16")
   field(TWVL, "2")
   field(THST, "UInt16")
   field(THVL, "3")
   field(FRST, "Int32")
   field(FRVL, "4")
   field(FVST, "UInt32")
   field(FVVL, "5")
   field(SXST, "Int64")
   field(SXVL, "6")
   field(SVST, "UInt64")
   field(SVVL, "7")
   field(EIST, "Float32")
   field(EIVL, "8")
   field(NIST, "Float64")
   field(NIVL, "9")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the color mode                           #
#  These choices must agree with NDColorMode_t in NDArray.h       # 
###################################################################

record(mbbo, "BL45P-EA-PANDA-02:HDF5:ColorMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA02.HDF,0,5)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-02:HDF5:ColorMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.HDF,0,5)COLOR_MODE")
   field(ZRST, "Mono")
   field(ZRVL, "0")
   field(ONST, "Bayer")
   field(ONVL, "1")
   field(TWST, "RGB1")
   field(TWVL, "2")
   field(THST, "RGB2")
   field(THVL, "3")
   field(FRST, "RGB3")
   field(FRVL, "4")
   field(FVST, "YUV444")
   field(FVVL, "5")
   field(SXST, "YUV422")
   field(SXVL, "6")
   field(SVST, "YUV421")
   field(SVVL, "7")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the uniqueId and time stamps of the array     #
###################################################################
record(longin, "BL45P-EA-PANDA-02:HDF5:UniqueId_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)UNIQUE_ID")
    field(SCAN, "I/O Intr")
}

record(ai, "BL45P-EA-PANDA-02:HDF5:TimeStamp_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA02.HDF,0,5)TIME_STAMP")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:EpicsTSSec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)EPICS_TS_SEC")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:EpicsTSNsec_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)EPICS_TS_NSEC")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records provide statistics on array callbacks and        #
#  array callback rates                                           # 
###################################################################
record(longout, "BL45P-EA-PANDA-02:HDF5:ArrayCounter")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)ARRAY_COUNTER")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ArrayCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)ARRAY_COUNTER")
    field(SCAN, "I/O Intr")
}

# Updated rate calculation to use a smoothing factor w/ guard against negative values
record(calc, "BL45P-EA-PANDA-02:HDF5:ArrayRate_RBV")
{
    field(INPA, "BL45P-EA-PANDA-02:HDF5:ArrayRate_RBV.LB NPP NMS")   # Previous counter value
    field(INPB, "BL45P-EA-PANDA-02:HDF5:ArrayCounter_RBV NPP NMS")   # Current counter value
    field(INPC, "1.0")                                # Delta time in seconds
    field(INPD, "BL45P-EA-PANDA-02:HDF5:ArrayRate_RBV.VAL NPP NMS")  # Previous rate
    field(INPE, "0.0")                 # Smoothing factor
    field(CALC, "(D*E)/C+MAX(0,B-A)*(1-E)/C")
    field(PREC, "2" )
    field(EGU,  "Hz" )
    field(SCAN, "1 second")
}

###################################################################
#  These records control NDArray callacks                         # 
###################################################################
record(bo, "BL45P-EA-PANDA-02:HDF5:ArrayCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(VAL, "1")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-02:HDF5:ArrayCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Enable")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains macro definitions for the attributes      # 
###################################################################

record(waveform, "BL45P-EA-PANDA-02:HDF5:NDAttributesMacros")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(PANDA02.HDF,0,5)ND_ATTRIBUTES_MACROS")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record is the name of a file defining attributes          # 
###################################################################

record(waveform, "BL45P-EA-PANDA-02:HDF5:NDAttributesFile")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(PANDA02.HDF,0,5)ND_ATTRIBUTES_FILE")
    field(FTVL, "CHAR")
    field(NELM, "256")
    info(autosaveFields, "VAL")
}

###################################################################
#  This record defines the status of reading attributes file      # 
###################################################################

record(mbbi, "BL45P-EA-PANDA-02:HDF5:NDAttributesStatus")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)ND_ATTRIBUTES_STATUS")
    field(ZRVL, "0")
    field(ZRST, "Attributes file OK")
    field(ZRSV, "NO_ALARM")
    field(ONVL, "1")
    field(ONST, "File not found")
    field(ONSV, "MINOR")
    field(TWVL, "2")
    field(TWST, "XML syntax error")
    field(TWSV, "MAJOR")
    field(THVL, "3")
    field(THST, "Macro substitution error")
    field(THSV, "MAJOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Status of NDArrayPool - number of buffers, memory used etc.    # 
###################################################################

record(ai, "BL45P-EA-PANDA-02:HDF5:PoolMaxMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA02.HDF,0,5)POOL_MAX_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "Passive")
   field(PINI, "YES")
}

record(ai, "BL45P-EA-PANDA-02:HDF5:PoolUsedMem")
{
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn(PANDA02.HDF,0,5)POOL_USED_MEMORY")
   field(PREC, "1")
   field(EGU,  "MB")
   field(SCAN, "1 second")
   field(FLNK, "BL45P-EA-PANDA-02:HDF5:PoolAllocBuffers")
   info(autosaveFields, "SCAN")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:PoolAllocBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.HDF,0,5)POOL_ALLOC_BUFFERS")
   field(FLNK, "BL45P-EA-PANDA-02:HDF5:PoolFreeBuffers")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:PoolFreeBuffers")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.HDF,0,5)POOL_FREE_BUFFERS")
   field(FLNK, "BL45P-EA-PANDA-02:HDF5:PoolUsedBuffers")
}

record(calc, "BL45P-EA-PANDA-02:HDF5:PoolUsedBuffers")
{
    field(INPA, "BL45P-EA-PANDA-02:HDF5:PoolAllocBuffers NPP MS")
    field(INPB, "BL45P-EA-PANDA-02:HDF5:PoolFreeBuffers NPP MS")
    field(CALC, "A-B")
}

record(bo, "BL45P-EA-PANDA-02:HDF5:EmptyFreeList")
{
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn(PANDA02.HDF,0,5)POOL_EMPTY_FREELIST")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:NumQueuedArrays")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn(PANDA02.HDF,0,5)NUM_QUEUED_ARRAYS")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the type of plugin                        #
###################################################################

record(stringin, "BL45P-EA-PANDA-02:HDF5:PluginType_RBV")
{
   field(DTYP, "asynOctetRead")
   field(INP,  "@asyn(PANDA02.HDF,0,5)PLUGIN_TYPE")
   field(VAL,  "Unknown")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records control the connection of the server to          #
#  an NDArray driver port and address                             #
###################################################################
# Array port name
record(stringout, "BL45P-EA-PANDA-02:HDF5:NDArrayPort")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)NDARRAY_PORT")
    field(VAL,  "PANDA02.POS")
    info(autosaveFields, "VAL")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:NDArrayPort_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA02.HDF,0,5)NDARRAY_PORT")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:NDArrayAddress")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)NDARRAY_ADDR")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:NDArrayAddress_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)NDARRAY_ADDR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control whether callbacks are enabled and        #
#  minimum time between callbacks                                 #
###################################################################
record(bo, "BL45P-EA-PANDA-02:HDF5:EnableCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(VAL,  "1")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-02:HDF5:EnableCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)ENABLE_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

record(ao, "BL45P-EA-PANDA-02:HDF5:MinCallbackTime")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
    field(DRVL, "0")
    info(autosaveFields, "VAL")
}

record(ai, "BL45P-EA-PANDA-02:HDF5:MinCallbackTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA02.HDF,0,5)MIN_CALLBACK_TIME")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(ao, "BL45P-EA-PANDA-02:HDF5:MaxArrayRate")
{
    field(DTYP, "Soft Channel")
    field(OUT,  "BL45P-EA-PANDA-02:HDF5:MaxArrayRate_COUT PP")
    field(EGU,  "Hz")
    field(PREC, "3")
    field(VAL,  "0.0")
    info(autosaveFields, "VAL")
}

record(calcout, "BL45P-EA-PANDA-02:HDF5:MaxArrayRate_COUT")
{
    field(INPA, "BL45P-EA-PANDA-02:HDF5:MaxArrayRate")
    field(CALC, "A=0?0:1.0/A")
    field(OUT,  "BL45P-EA-PANDA-02:HDF5:MinCallbackTime PP")
}

record(calc, "BL45P-EA-PANDA-02:HDF5:MaxArrayRate_RBV")
{
    field(INPA, "BL45P-EA-PANDA-02:HDF5:MinCallbackTime_RBV CP")
    field(CALC, "A=0?0:1.0/A")
    field(EGU,  "Hz")
    field(PREC, "3")
    field(SCAN, "Passive")
}

record(ao, "BL45P-EA-PANDA-02:HDF5:MaxByteRate")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)MAX_BYTE_RATE")
    field(EGU,  "s")
    field(PREC, "3")
    field(VAL,  "0.0")
    field(DRVL, "0")
    info(autosaveFields, "VAL")
}

record(ai, "BL45P-EA-PANDA-02:HDF5:MaxByteRate_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA02.HDF,0,5)MAX_BYTE_RATE")
    field(EGU,  "s")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record contains the last execution time of the plugin     #
###################################################################
record(ai, "BL45P-EA-PANDA-02:HDF5:ExecutionTime_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA02.HDF,0,5)EXECUTION_TIME")
    field(EGU,  "ms")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record requests that the plugin execute again with the    #
#  same NDArray                                                   #
###################################################################
record(bo, "BL45P-EA-PANDA-02:HDF5:ProcessPlugin")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)PROCESS_PLUGIN")
    field(VAL,  "1")
}

###################################################################
#  These records control whether callbacks block or not           #
###################################################################
record(bo, "BL45P-EA-PANDA-02:HDF5:BlockingCallbacks")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "0")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-02:HDF5:BlockingCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)BLOCKING_CALLBACKS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}


record(longout, "BL45P-EA-PANDA-02:HDF5:DroppedArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)DROPPED_ARRAYS")
    field(VAL,  "0")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:DroppedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)DROPPED_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:QueueSize")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)QUEUE_SIZE")
    field(PINI, "YES")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:QueueSize_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)QUEUE_SIZE")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:QueueFreeLow")
    field(SCAN, "I/O Intr")
}

record(calcout, "BL45P-EA-PANDA-02:HDF5:QueueFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "BL45P-EA-PANDA-02:HDF5:QueueSize")
    field(OUT,  "BL45P-EA-PANDA-02:HDF5:QueueFree.LOW")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:QueueUseHIGH")
}

# Set a HIGH warning level for the input queue fill level to 75%
# of the full size of the queue
record(calcout, "BL45P-EA-PANDA-02:HDF5:QueueUseHIGH") {
   field(CALC, "A*0.75")
   field(INPA, "BL45P-EA-PANDA-02:HDF5:QueueSize")
   field(OUT,  "BL45P-EA-PANDA-02:HDF5:QueueUse.HIGH")
   field(FLNK, "BL45P-EA-PANDA-02:HDF5:QueueUseHIHI")
}

# Set a HIHI level for the input queue fill level to indicate an error
# (MAJOR alarm)  when it fills up to the full size of the queue (frames start dropping)
record(calcout, "BL45P-EA-PANDA-02:HDF5:QueueUseHIHI") {
   field(CALC, "A*1.0")
   field(INPA, "BL45P-EA-PANDA-02:HDF5:QueueSize")
   field(OUT,  "BL45P-EA-PANDA-02:HDF5:QueueUse.HIHI")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:QueueFree")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)QUEUE_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

# Display the fill level on the plugins input queue
record(calc, "BL45P-EA-PANDA-02:HDF5:QueueUse") {
    field(CALC, "A-B")
    field(INPA, "BL45P-EA-PANDA-02:HDF5:QueueSize")
    field(INPB, "BL45P-EA-PANDA-02:HDF5:QueueFree CP")
    field(SCAN, "Passive")
    field(HHSV, "MAJOR")
    field(HSV,  "MINOR")
    field(HYST, "1")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:NumThreads")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)NUM_THREADS")
    field(VAL,  "1")
    field(PINI, "YES")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:NumThreads_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)NUM_THREADS")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:MaxThreads_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)MAX_THREADS")
    field(SCAN, "I/O Intr")
}

###################################################################
#  These records control output array sorting                     #
###################################################################
record(mbbo, "BL45P-EA-PANDA-02:HDF5:SortMode") {
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)SORT_MODE")
    field(ZRVL, "0")
    field(ZRST, "Unsorted")
    field(ONVL, "1")
    field(ONST, "Sorted")
}

record(mbbi, "BL45P-EA-PANDA-02:HDF5:SortMode_RBV") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)SORT_MODE")
    field(ZRVL, "0")
    field(ZRST, "Unsorted")
    field(ONVL, "1")
    field(ONST, "Sorted")
    field(SCAN, "I/O Intr")
}

record(ao, "BL45P-EA-PANDA-02:HDF5:SortTime") {
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)SORT_TIME")
    field(PREC, "3")
    field(VAL, "0.1")
}

record(ai, "BL45P-EA-PANDA-02:HDF5:SortTime_RBV") {
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA02.HDF,0,5)SORT_TIME")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:SortSize")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)SORT_SIZE")
    field(VAL,  "20")
    field(PINI, "YES")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:SortSize_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)SORT_SIZE")
    field(FLNK, "BL45P-EA-PANDA-02:HDF5:SortFreeLow")
    field(SCAN, "I/O Intr")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:SortFree") {
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)SORT_FREE")
    field(LLSV, "MAJOR")
    field(LSV,  "MINOR")
    field(LOLO, "0")
    field(HYST, "1")
    field(SCAN, "I/O Intr")
}

record(calcout, "BL45P-EA-PANDA-02:HDF5:SortFreeLow") {
    field(CALC, "A*0.25")
    field(INPA, "BL45P-EA-PANDA-02:HDF5:SortSize")
    field(OUT,  "BL45P-EA-PANDA-02:HDF5:SortFree.LOW")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:DroppedOutputArrays")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)DROPPED_OUTPUT_ARRAYS")
    field(VAL,  "0")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:DroppedOutputArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)DROPPED_OUTPUT_ARRAYS")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:DisorderedArrays")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)DISORDERED_ARRAYS")
    field(PINI, "YES")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:DisorderedArrays_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)DISORDERED_ARRAYS")
    field(SCAN, "I/O Intr")
}



###################################################################
#  The asynRecord is used for mainly for trace mask               # 
###################################################################
 
# Set ASYN_TRACEIO_HEX bit by default
record(asyn,"BL45P-EA-PANDA-02:HDF5:AsynIO")
{
    field(PORT, "PANDA02.HDF")
    field(TIB2,"1")
    info("ADType", "ADPlugin")
}


# Flush data to file
record(busy, "BL45P-EA-PANDA-02:HDF5:FlushNow")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)HDF5_SWMRFlushNow")
    field(ZNAM, "Done")
    field(ONAM, "Flush")
}

# We replace some fields in records defined in NDFile.template
# File data format 
record(mbbo, "BL45P-EA-PANDA-02:HDF5:FileFormat")
{
    field(ZRST, "HDF5")
    field(ZRVL, "0")
    field(ONST, "Invalid")
    field(ONVL, "1")
}

record(mbbi, "BL45P-EA-PANDA-02:HDF5:FileFormat_RBV")
{
    field(ZRST, "HDF5")
    field(ZRVL, "0")
    field(ONST, "Undefined")
    field(ONVL, "1")
}

record(bo, "BL45P-EA-PANDA-02:HDF5:ChunkSizeAuto")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_chunkSizeAuto")
    field(PINI, "YES")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(VAL,  "1")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-02:HDF5:ChunkSizeAuto_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_chunkSizeAuto")
    field(SCAN, "I/O Intr")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:NumRowChunks")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_nRowChunks")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:NumRowChunks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_nRowChunks")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:NumColChunks")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_nColChunks")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:NumColChunks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_nColChunks")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ChunkSize2")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_chunkSize2")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ChunkSize2_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_chunkSize2")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ChunkSize3")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_chunkSize3")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ChunkSize3_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_chunkSize3")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ChunkSize4")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_chunkSize4")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ChunkSize4_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_chunkSize4")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ChunkSize5")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_chunkSize5")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ChunkSize5_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_chunkSize5")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ChunkSize6")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_chunkSize6")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ChunkSize6_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_chunkSize6")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ChunkSize7")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_chunkSize7")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ChunkSize7_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_chunkSize7")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ChunkSize8")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_chunkSize8")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ChunkSize8_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_chunkSize8")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ChunkSize9")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_chunkSize9")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ChunkSize9_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_chunkSize9")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:NumFramesChunks")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_nFramesChunks")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:NumFramesChunks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_nFramesChunks")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:NDAttributeChunk")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_NDAttributeChunk")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:NDAttributeChunk_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_NDAttributeChunk")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:BoundaryAlign")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_chunkBoundaryAlign")
    field(PINI, "YES")
    field(VAL, "0")
    field(EGU, "bytes")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:BoundaryAlign_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_chunkBoundaryAlign")
    field(SCAN, "I/O Intr")
    field(EGU, "bytes")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:BoundaryThreshold")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_chunkBoundaryThreshold")
    field(PINI, "YES")
    field(VAL, "1")
    field(EGU, "bytes")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:BoundaryThreshold_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_chunkBoundaryThreshold")
    field(SCAN, "I/O Intr")
    field(EGU, "bytes")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:NumExtraDims")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_nExtraDims")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:NumExtraDims_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_nExtraDims")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ExtraDimSizeN")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimSizeN")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ExtraDimSizeN_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimSizeN")
    field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:ExtraDimNameN_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimNameN")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ExtraDimSizeX")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimSizeX")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ExtraDimSizeX_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimSizeX")
    field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:ExtraDimNameX_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimNameX")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ExtraDimSizeY")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimSizeY")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ExtraDimSizeY_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimSizeY")
    field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:ExtraDimNameY_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimNameY")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ExtraDimSize3")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimSize3")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ExtraDimSize3_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimSize3")
    field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:ExtraDimName3_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimName3")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ExtraDimSize4")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimSize4")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ExtraDimSize4_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimSize4")
    field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:ExtraDimName4_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimName4")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ExtraDimSize5")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimSize5")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ExtraDimSize5_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimSize5")
    field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:ExtraDimName5_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimName5")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ExtraDimSize6")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimSize6")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ExtraDimSize6_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimSize6")
    field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:ExtraDimName6_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimName6")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ExtraDimSize7")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimSize7")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ExtraDimSize7_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimSize7")
    field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:ExtraDimName7_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimName7")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ExtraDimSize8")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimSize8")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ExtraDimSize8_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimSize8")
    field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:ExtraDimName8_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimName8")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ExtraDimSize9")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimSize9")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ExtraDimSize9_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimSize9")
    field(SCAN, "I/O Intr")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:ExtraDimName9_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimName9")
    field(SCAN, "I/O Intr")
}

record(bo, "BL45P-EA-PANDA-02:HDF5:StoreAttr")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_storeAttributes")
    field(PINI, "YES")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-02:HDF5:StoreAttr_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_storeAttributes")
    field(SCAN, "I/O Intr")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

record(bo, "BL45P-EA-PANDA-02:HDF5:StorePerform")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_storePerformance")
    field(PINI, "YES")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-02:HDF5:StorePerform_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_storePerformance")
    field(SCAN, "I/O Intr")
    field(ZNAM, "No")
    field(ONAM, "Yes")
}

record(ai, "BL45P-EA-PANDA-02:HDF5:RunTime")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA02.HDF,0,5)HDF5_totalRuntime")
    field(SCAN, "I/O Intr")
    field(PREC, "3")
    field(EGU,  "s")
}

record(ai, "BL45P-EA-PANDA-02:HDF5:IOSpeed")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA02.HDF,0,5)HDF5_totalIoSpeed")
    field(SCAN, "I/O Intr")
    field(PREC, "1")
    field(EGU,  "Mbit/s")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:NumFramesFlush")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_flushNthFrame")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:NumFramesFlush_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_flushNthFrame")
    field(SCAN, "I/O Intr")
}

record(mbbo, "BL45P-EA-PANDA-02:HDF5:Compression")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_compressionType")
    field(PINI, "YES")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "N-bit")
    field(ONVL, "1")
    field(TWST, "szip")
    field(TWVL, "2")
    field(THST, "zlib")
    field(THVL, "3")
    field(FRST, "Blosc")
    field(FRVL, "4")
    field(FVST, "BSLZ4")
    field(FVVL, "5")
    field(SXST, "LZ4")
    field(SXVL, "6")
    field(SVST, "JPEG")
    field(SVVL, "7")
    info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-02:HDF5:Compression_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_compressionType")
    field(SCAN, "I/O Intr")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "N-bit")
    field(ONVL, "1")
    field(TWST, "szip")
    field(TWVL, "2")
    field(THST, "zlib")
    field(THVL, "3")
    field(FRST, "Blosc")
    field(FRVL, "4")
    field(FVST, "BSLZ4")
    field(FVVL, "5")
    field(SXST, "LZ4")
    field(SXVL, "6")
    field(SVST, "JPEG")
    field(SVVL, "7")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:NumDataBits")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_nbitsPrecision")
    field(PINI, "YES")
    field(EGU,  "bit")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:NumDataBits_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_nbitsPrecision")
    field(SCAN, "I/O Intr")
    field(EGU,  "bit")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:DataBitsOffset")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_nbitsOffset")
    field(PINI, "YES")
    field(EGU,  "bit")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:DataBitsOffset_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_nbitsOffset")
    field(SCAN, "I/O Intr")
    field(EGU,  "bit")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:SZipNumPixels")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_szipNumPixels")
    field(PINI, "YES")
    field(EGU,  "bit")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:SZipNumPixels_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_szipNumPixels")
    field(SCAN, "I/O Intr")
    field(EGU,  "bit")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ZLevel")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_zCompressLevel")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ZLevel_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_zCompressLevel")
    field(SCAN, "I/O Intr")
}

record(mbbo, "BL45P-EA-PANDA-02:HDF5:BloscShuffle")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_bloscShuffleType")
    field(PINI, "YES")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "Byte")
    field(ONVL, "1")
    field(TWST, "Bit")
    field(TWVL, "2")
    info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-02:HDF5:BloscShuffle_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_bloscShuffleType")
    field(SCAN, "I/O Intr")
    field(ZRST, "None")
    field(ZRVL, "0")
    field(ONST, "Byte")
    field(ONVL, "1")
    field(TWST, "Bit")
    field(TWVL, "2")
}

record(mbbo, "BL45P-EA-PANDA-02:HDF5:BloscCompressor")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_bloscCompressor")
    field(PINI, "YES")
    field(ZRST, "BloscLZ")
    field(ZRVL, "0")
    field(ONST, "LZ4")
    field(ONVL, "1")
    field(TWST, "LZ4HC")
    field(TWVL, "2")
    field(THST, "SNAPPY")
    field(THVL, "3")
    field(FRST, "ZLIB")
    field(FRVL, "4")
    field(FVST, "ZSTD")
    field(FVVL, "5")
    info(autosaveFields, "VAL")
}

record(mbbi, "BL45P-EA-PANDA-02:HDF5:BloscCompressor_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_bloscCompressor")
    field(SCAN, "I/O Intr")
    field(ZRST, "BloscLZ")
    field(ZRVL, "0")
    field(ONST, "LZ4")
    field(ONVL, "1")
    field(TWST, "LZ4HC")
    field(TWVL, "2")
    field(THST, "SNAPPY")
    field(THVL, "3")
    field(FRST, "ZLIB")
    field(FRVL, "4")
    field(FVST, "ZSTD")
    field(FVVL, "5")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:BloscLevel")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_bloscCompressLevel")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:BloscLevel_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_bloscCompressLevel")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:JPEGQuality")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_jpegQuality")
    field(VAL, "90")
    field(DRVL, "1")
    field(DRVH, "100")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:JPEGQuality_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_jpegQuality")
    field(SCAN, "I/O Intr")
}

record(bo, "BL45P-EA-PANDA-02:HDF5:DimAttDatasets")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_dimAttDatasets")
    field(PINI, "YES")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    info(autosaveFields, "VAL")
}

record(bi, "BL45P-EA-PANDA-02:HDF5:DimAttDatasets_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_dimAttDatasets")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}

# File path.
# % autosave 2 
#record(waveform, "BL45P-EA-PANDA-02:HDF5:XMLPath")
#{
#    field(PINI, "YES")
#    field(DTYP, "asynOctetWrite")
#    field(INP,  "@asyn(PANDA02.HDF,0,5)HDF5_layoutDirectory")
#    field(FTVL, "CHAR")
#    field(NELM, "256")
#}

record(waveform, "BL45P-EA-PANDA-02:HDF5:XMLErrorMsg_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA02.HDF,0,5)HDF5_layoutErrorMsg")
    field(FTVL, "CHAR")
    field(NELM, "256")
    field(SCAN, "I/O Intr")
}

record(bi, "BL45P-EA-PANDA-02:HDF5:XMLValid_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(PANDA02.HDF,0,5)HDF5_layoutValid")
    field(ZNAM, "No")
    field(ZSV,  "MAJOR")
    field(ONAM, "Yes")
    field(OSV,  "NO_ALARM")
    field(SCAN, "I/O Intr")
}

# Filename
# % autosave 2 
record(waveform, "BL45P-EA-PANDA-02:HDF5:XMLFileName")
{
    field(PINI, "YES")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(PANDA02.HDF,0,5)HDF5_layoutFilename")
    field(FTVL, "CHAR")
    field(NELM, "2048")
    info(autosaveFields, "VAL")
}

record(waveform, "BL45P-EA-PANDA-02:HDF5:XMLFileName_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(PANDA02.HDF,0,5)HDF5_layoutFilename")
    field(FTVL, "CHAR")
    field(NELM, "2048")
    field(SCAN, "I/O Intr")
}

record(bi, "BL45P-EA-PANDA-02:HDF5:SWMRSupported_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_SWMRSupported")
    field(SCAN, "I/O Intr")
    field(ZNAM, "Not Supported")
    field(ONAM, "Supported")
}

record(bo, "BL45P-EA-PANDA-02:HDF5:SWMRMode")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_SWMRMode")
    field(PINI, "YES")
    field(ZNAM, "Off")
    field(ONAM, "On")
}

record(bi, "BL45P-EA-PANDA-02:HDF5:SWMRMode_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_SWMRMode")
    field(SCAN, "I/O Intr")
    field(ZNAM, "Off")
    field(ONAM, "On")
}

record(bi, "BL45P-EA-PANDA-02:HDF5:SWMRActive_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_SWMRRunning")
    field(SCAN, "I/O Intr")
    field(ZNAM, "Off")
    field(ONAM, "Active")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:SWMRCbCounter_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_SWMRCbCounter")
    field(SCAN, "I/O Intr")
}

record(bo, "BL45P-EA-PANDA-02:HDF5:PositionMode")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_posRunning")
    field(PINI, "YES")
    field(ZNAM, "Off")
    field(ONAM, "On")
}

record(bi, "BL45P-EA-PANDA-02:HDF5:PositionMode_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_posRunning")
    field(SCAN, "I/O Intr")
    field(ZNAM, "Off")
    field(ONAM, "On")
}

record(stringout, "BL45P-EA-PANDA-02:HDF5:PosNameDimN")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_posNameDimN")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:PosNameDimN_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_posNameDimN")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-02:HDF5:PosNameDimX")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_posNameDimX")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:PosNameDimX_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_posNameDimX")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-02:HDF5:PosNameDimY")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_posNameDimY")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:PosNameDimY_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_posNameDimY")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-02:HDF5:PosNameDim3")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_posNameDim3")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:PosNameDim3_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_posNameDim3")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-02:HDF5:PosNameDim4")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_posNameDim4")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:PosNameDim4_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_posNameDim4")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-02:HDF5:PosNameDim5")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_posNameDim5")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:PosNameDim5_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_posNameDim5")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-02:HDF5:PosNameDim6")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_posNameDim6")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:PosNameDim6_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_posNameDim6")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-02:HDF5:PosNameDim7")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_posNameDim7")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:PosNameDim7_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_posNameDim7")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-02:HDF5:PosNameDim8")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_posNameDim8")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:PosNameDim8_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_posNameDim8")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-02:HDF5:PosNameDim9")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_posNameDim9")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:PosNameDim9_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_posNameDim9")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-02:HDF5:PosIndexDimN")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_posIndexDimN")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:PosIndexDimN_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_posIndexDimN")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-02:HDF5:PosIndexDimX")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_posIndexDimX")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:PosIndexDimX_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_posIndexDimX")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-02:HDF5:PosIndexDimY")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_posIndexDimY")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:PosIndexDimY_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_posIndexDimY")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-02:HDF5:PosIndexDim3")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_posIndexDim3")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:PosIndexDim3_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_posIndexDim3")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-02:HDF5:PosIndexDim4")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_posIndexDim4")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:PosIndexDim4_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_posIndexDim4")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-02:HDF5:PosIndexDim5")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_posIndexDim5")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:PosIndexDim5_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_posIndexDim5")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-02:HDF5:PosIndexDim6")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_posIndexDim6")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:PosIndexDim6_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_posIndexDim6")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-02:HDF5:PosIndexDim7")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_posIndexDim7")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:PosIndexDim7_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_posIndexDim7")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-02:HDF5:PosIndexDim8")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_posIndexDim8")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:PosIndexDim8_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_posIndexDim8")
    field(SCAN, "I/O Intr")
}

record(stringout, "BL45P-EA-PANDA-02:HDF5:PosIndexDim9")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_posIndexDim9")
    field(PINI, "YES")
}

record(stringin, "BL45P-EA-PANDA-02:HDF5:PosIndexDim9_RBV")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_posIndexDim9")
    field(SCAN, "I/O Intr")
}

record(ao, "BL45P-EA-PANDA-02:HDF5:FillValue")
{
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn(PANDA02.HDF,0,5)HDF5_fillValue")
    field(PINI, "YES")
    field(PREC, "1")
}

record(ai, "BL45P-EA-PANDA-02:HDF5:FillValue_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(PANDA02.HDF,0,5)HDF5_fillValue")
    field(SCAN, "I/O Intr")
    field(PREC, "1")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ExtraDimChunkX")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimChunkX")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ExtraDimChunkX_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimChunkX")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ExtraDimChunkY")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimChunkY")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ExtraDimChunkY_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimChunkY")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ExtraDimChunk3")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimChunk3")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ExtraDimChunk3_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimChunk3")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ExtraDimChunk4")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimChunk4")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ExtraDimChunk4_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimChunk4")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ExtraDimChunk5")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimChunk5")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ExtraDimChunk5_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimChunk5")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ExtraDimChunk6")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimChunk6")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ExtraDimChunk6_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimChunk6")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ExtraDimChunk7")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimChunk7")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ExtraDimChunk7_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimChunk7")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ExtraDimChunk8")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimChunk8")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ExtraDimChunk8_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimChunk8")
    field(SCAN, "I/O Intr")
}

record(longout, "BL45P-EA-PANDA-02:HDF5:ExtraDimChunk9")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimChunk9")
    field(PINI, "YES")
    info(autosaveFields, "VAL")
}

record(longin, "BL45P-EA-PANDA-02:HDF5:ExtraDimChunk9_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn(PANDA02.HDF,0,5)HDF5_extraDimChunk9")
    field(SCAN, "I/O Intr")
}
